{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"tests/MyToken_test.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"remix_tests.sol\\\";\\nimport \\\"../contracts/MyToken.sol\\\";\\n\\ncontract MyTokenTest is MyToken {\\n\\n    function testTokenInitialValues() public {\\n        Assert.equal(name(), \\\"MyToken\\\", \\\"token name did not match\\\");\\n        Assert.equal(symbol(), \\\"MTK\\\", \\\"token symbol did not match\\\");\\n        Assert.equal(decimals(), 18, \\\"token decimals did not match\\\");\\n        Assert.equal(totalSupply(), 0, \\\"token supply should be zero\\\");\\n    }\\n}\"},\"contracts/MyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\n\\ncontract MyToken is ERC20, ERC20Permit {\\n    constructor() ERC20(\\\"MyToken\\\", \\\"MTK\\\") ERC20Permit(\\\"MyToken\\\") {}\\n}\\n\"},\"remix_tests.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary Assert {\\n\\n  event AssertionEvent(\\n    bool passed,\\n    string message,\\n    string methodName\\n  );\\n\\n  event AssertionEventUint(\\n    bool passed,\\n    string message,\\n    string methodName,\\n    uint256 returned,\\n    uint256 expected\\n  );\\n\\n  event AssertionEventInt(\\n    bool passed,\\n    string message,\\n    string methodName,\\n    int256 returned,\\n    int256 expected\\n  );\\n\\n  event AssertionEventBool(\\n    bool passed,\\n    string message,\\n    string methodName,\\n    bool returned,\\n    bool expected\\n  );\\n\\n  event AssertionEventAddress(\\n    bool passed,\\n    string message,\\n    string methodName,\\n    address returned,\\n    address expected\\n  );\\n\\n  event AssertionEventBytes32(\\n    bool passed,\\n    string message,\\n    string methodName,\\n    bytes32 returned,\\n    bytes32 expected\\n  );\\n\\n  event AssertionEventString(\\n    bool passed,\\n    string message,\\n    string methodName,\\n    string returned,\\n    string expected\\n  );\\n\\n  event AssertionEventUintInt(\\n    bool passed,\\n    string message,\\n    string methodName,\\n    uint256 returned,\\n    int256 expected\\n  );\\n\\n  event AssertionEventIntUint(\\n    bool passed,\\n    string message,\\n    string methodName,\\n    int256 returned,\\n    uint256 expected\\n  );\\n\\n  function ok(bool a, string memory message) public returns (bool result) {\\n    result = a;\\n    emit AssertionEvent(result, message, \\\"ok\\\");\\n  }\\n\\n  function equal(uint256 a, uint256 b, string memory message) public returns (bool result) {\\n    result = (a == b);\\n    emit AssertionEventUint(result, message, \\\"equal\\\", a, b);\\n  }\\n\\n  function equal(int256 a, int256 b, string memory message) public returns (bool result) {\\n    result = (a == b);\\n    emit AssertionEventInt(result, message, \\\"equal\\\", a, b);\\n  }\\n\\n  function equal(bool a, bool b, string memory message) public returns (bool result) {\\n    result = (a == b);\\n    emit AssertionEventBool(result, message, \\\"equal\\\", a, b);\\n  }\\n\\n  // TODO: only for certain versions of solc\\n  //function equal(fixed a, fixed b, string message) public returns (bool result) {\\n  //  result = (a == b);\\n  //  emit AssertionEvent(result, message);\\n  //}\\n\\n  // TODO: only for certain versions of solc\\n  //function equal(ufixed a, ufixed b, string message) public returns (bool result) {\\n  //  result = (a == b);\\n  //  emit AssertionEvent(result, message);\\n  //}\\n\\n  function equal(address a, address b, string memory message) public returns (bool result) {\\n    result = (a == b);\\n    emit AssertionEventAddress(result, message, \\\"equal\\\", a, b);\\n  }\\n\\n  function equal(bytes32 a, bytes32 b, string memory message) public returns (bool result) {\\n    result = (a == b);\\n    emit AssertionEventBytes32(result, message, \\\"equal\\\", a, b);\\n  }\\n\\n  function equal(string memory a, string memory b, string memory message) public returns (bool result) {\\n     result = (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b)));\\n     emit AssertionEventString(result, message, \\\"equal\\\", a, b);\\n  }\\n\\n  function notEqual(uint256 a, uint256 b, string memory message) public returns (bool result) {\\n    result = (a != b);\\n    emit AssertionEventUint(result, message, \\\"notEqual\\\", a, b);\\n  }\\n\\n  function notEqual(int256 a, int256 b, string memory message) public returns (bool result) {\\n    result = (a != b);\\n    emit AssertionEventInt(result, message, \\\"notEqual\\\", a, b);\\n  }\\n\\n  function notEqual(bool a, bool b, string memory message) public returns (bool result) {\\n    result = (a != b);\\n    emit AssertionEventBool(result, message, \\\"notEqual\\\", a, b);\\n  }\\n\\n  // TODO: only for certain versions of solc\\n  //function notEqual(fixed a, fixed b, string message) public returns (bool result) {\\n  //  result = (a != b);\\n  //  emit AssertionEvent(result, message);\\n  //}\\n\\n  // TODO: only for certain versions of solc\\n  //function notEqual(ufixed a, ufixed b, string message) public returns (bool result) {\\n  //  result = (a != b);\\n  //  emit AssertionEvent(result, message);\\n  //}\\n\\n  function notEqual(address a, address b, string memory message) public returns (bool result) {\\n    result = (a != b);\\n    emit AssertionEventAddress(result, message, \\\"notEqual\\\", a, b);\\n  }\\n\\n  function notEqual(bytes32 a, bytes32 b, string memory message) public returns (bool result) {\\n    result = (a != b);\\n    emit AssertionEventBytes32(result, message, \\\"notEqual\\\", a, b);\\n  }\\n\\n  function notEqual(string memory a, string memory b, string memory message) public returns (bool result) {\\n    result = (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b)));\\n    emit AssertionEventString(result, message, \\\"notEqual\\\", a, b);\\n  }\\n\\n  /*----------------- Greater than --------------------*/\\n  function greaterThan(uint256 a, uint256 b, string memory message) public returns (bool result) {\\n    result = (a > b);\\n    emit AssertionEventUint(result, message, \\\"greaterThan\\\", a, b);\\n  }\\n\\n  function greaterThan(int256 a, int256 b, string memory message) public returns (bool result) {\\n    result = (a > b);\\n    emit AssertionEventInt(result, message, \\\"greaterThan\\\", a, b);\\n  }\\n  // TODO: safely compare between uint and int\\n  function greaterThan(uint256 a, int256 b, string memory message) public returns (bool result) {\\n    if(b < int(0)) {\\n      // int is negative uint \\\"a\\\" always greater\\n      result = true;\\n    } else {\\n      result = (a > uint(b));\\n    }\\n    emit AssertionEventUintInt(result, message, \\\"greaterThan\\\", a, b);\\n  }\\n  function greaterThan(int256 a, uint256 b, string memory message) public returns (bool result) {\\n    if(a < int(0)) {\\n      // int is negative uint \\\"b\\\" always greater\\n      result = false;\\n    } else {\\n      result = (uint(a) > b);\\n    }\\n    emit AssertionEventIntUint(result, message, \\\"greaterThan\\\", a, b);\\n  }\\n  /*----------------- Lesser than --------------------*/\\n  function lesserThan(uint256 a, uint256 b, string memory message) public returns (bool result) {\\n    result = (a < b);\\n    emit AssertionEventUint(result, message, \\\"lesserThan\\\", a, b);\\n  }\\n\\n  function lesserThan(int256 a, int256 b, string memory message) public returns (bool result) {\\n    result = (a < b);\\n    emit AssertionEventInt(result, message, \\\"lesserThan\\\", a, b);\\n  }\\n  // TODO: safely compare between uint and int\\n  function lesserThan(uint256 a, int256 b, string memory message) public returns (bool result) {\\n    if(b < int(0)) {\\n      // int is negative int \\\"b\\\" always lesser\\n      result = false;\\n    } else {\\n      result = (a < uint(b));\\n    }\\n    emit AssertionEventUintInt(result, message, \\\"lesserThan\\\", a, b);\\n  }\\n\\n  function lesserThan(int256 a, uint256 b, string memory message) public returns (bool result) {\\n    if(a < int(0)) {\\n      // int is negative int \\\"a\\\" always lesser\\n      result = true;\\n    } else {\\n      result = (uint(a) < b);\\n    }\\n    emit AssertionEventIntUint(result, message, \\\"lesserThan\\\", a, b);\\n  }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":true,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}},\"remappings\":[]}}",
	"name": "MyTokenTest",
	"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testTokenInitialValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/MyToken_test.sol\":\"MyTokenTest\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"contracts/MyToken.sol\":{\"keccak256\":\"0x78735c82268e3ddcb8d1894d1dc1769012a390793f99d058bdd9dd5ce0a716bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://27c5457ed565dec3163ebb47aa6d2139781c3d5fe5e06649bd5e90062978e378\",\"dweb:/ipfs/QmVpDwBtNFgLfVdgwT2hHkvFYw1ikUUqARVFzVvzySXz2b\"]},\"remix_tests.sol\":{\"keccak256\":\"0xe2783cdc204cba8c72494119339f1d90f9022b15d6c718c668b7f097d8e29787\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bb6a22e64c7f16bcaab63b1c1a1b269d5be8a6d37bdd9dec1718477ab916b18e\",\"dweb:/ipfs/QmdkW1tT5iadBvaHMCoskhDGZKnfdg8o1D9CcoQYtdJet7\"]},\"tests/MyToken_test.sol\":{\"keccak256\":\"0x6e4ee00bf199baaf17483aaa97023057bc2e0a526cfba1b06721a290dfdace41\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://3a7c5f7b0a49f2836469eecab96357ae915fc0dfadf5376317417403ad62ade4\",\"dweb:/ipfs/QmcAtYnyCkpDrCZjpdBfAhRxGNfcjBHYvptDiQoJTWQhCY\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {
			"@_2095": {
				"entryPoint": null,
				"id": 2095,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_213": {
				"entryPoint": null,
				"id": 213,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_3477": {
				"entryPoint": null,
				"id": 3477,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_803": {
				"entryPoint": null,
				"id": 803,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_buildDomainSeparator_2142": {
				"entryPoint": null,
				"id": 2142,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@getStringSlot_1372": {
				"entryPoint": null,
				"id": 1372,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toShortStringWithFallback_1226": {
				"entryPoint": 350,
				"id": 1226,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@toShortString_1128": {
				"entryPoint": 400,
				"id": 1128,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 6,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 808,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_dataslot_string_storage": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"clean_up_bytearray_end_slots_string_storage": {
				"entryPoint": 546,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
				"entryPoint": 861,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
				"entryPoint": 622,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"extract_byte_array_length": {
				"entryPoint": 490,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_used_part_and_set_length_of_short_byte_array": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"panic_error_0x41": {
				"entryPoint": 470,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:3871:20",
					"nodeType": "YulBlock",
					"src": "0:3871:20",
					"statements": [
						{
							"nativeSrc": "6:3:20",
							"nodeType": "YulBlock",
							"src": "6:3:20",
							"statements": []
						},
						{
							"body": {
								"nativeSrc": "46:95:20",
								"nodeType": "YulBlock",
								"src": "46:95:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "63:1:20",
													"nodeType": "YulLiteral",
													"src": "63:1:20",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "70:3:20",
															"nodeType": "YulLiteral",
															"src": "70:3:20",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "75:10:20",
															"nodeType": "YulLiteral",
															"src": "75:10:20",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "66:3:20",
														"nodeType": "YulIdentifier",
														"src": "66:3:20"
													},
													"nativeSrc": "66:20:20",
													"nodeType": "YulFunctionCall",
													"src": "66:20:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "56:6:20",
												"nodeType": "YulIdentifier",
												"src": "56:6:20"
											},
											"nativeSrc": "56:31:20",
											"nodeType": "YulFunctionCall",
											"src": "56:31:20"
										},
										"nativeSrc": "56:31:20",
										"nodeType": "YulExpressionStatement",
										"src": "56:31:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "103:1:20",
													"nodeType": "YulLiteral",
													"src": "103:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "106:4:20",
													"nodeType": "YulLiteral",
													"src": "106:4:20",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "96:6:20",
												"nodeType": "YulIdentifier",
												"src": "96:6:20"
											},
											"nativeSrc": "96:15:20",
											"nodeType": "YulFunctionCall",
											"src": "96:15:20"
										},
										"nativeSrc": "96:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "96:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "127:1:20",
													"nodeType": "YulLiteral",
													"src": "127:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "130:4:20",
													"nodeType": "YulLiteral",
													"src": "130:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "120:6:20",
												"nodeType": "YulIdentifier",
												"src": "120:6:20"
											},
											"nativeSrc": "120:15:20",
											"nodeType": "YulFunctionCall",
											"src": "120:15:20"
										},
										"nativeSrc": "120:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "120:15:20"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "14:127:20",
							"nodeType": "YulFunctionDefinition",
							"src": "14:127:20"
						},
						{
							"body": {
								"nativeSrc": "201:325:20",
								"nodeType": "YulBlock",
								"src": "201:325:20",
								"statements": [
									{
										"nativeSrc": "211:22:20",
										"nodeType": "YulAssignment",
										"src": "211:22:20",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "225:1:20",
													"nodeType": "YulLiteral",
													"src": "225:1:20",
													"type": "",
													"value": "1"
												},
												{
													"name": "data",
													"nativeSrc": "228:4:20",
													"nodeType": "YulIdentifier",
													"src": "228:4:20"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "221:3:20",
												"nodeType": "YulIdentifier",
												"src": "221:3:20"
											},
											"nativeSrc": "221:12:20",
											"nodeType": "YulFunctionCall",
											"src": "221:12:20"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "211:6:20",
												"nodeType": "YulIdentifier",
												"src": "211:6:20"
											}
										]
									},
									{
										"nativeSrc": "242:38:20",
										"nodeType": "YulVariableDeclaration",
										"src": "242:38:20",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "272:4:20",
													"nodeType": "YulIdentifier",
													"src": "272:4:20"
												},
												{
													"kind": "number",
													"nativeSrc": "278:1:20",
													"nodeType": "YulLiteral",
													"src": "278:1:20",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "268:3:20",
												"nodeType": "YulIdentifier",
												"src": "268:3:20"
											},
											"nativeSrc": "268:12:20",
											"nodeType": "YulFunctionCall",
											"src": "268:12:20"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "246:18:20",
												"nodeType": "YulTypedName",
												"src": "246:18:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "319:31:20",
											"nodeType": "YulBlock",
											"src": "319:31:20",
											"statements": [
												{
													"nativeSrc": "321:27:20",
													"nodeType": "YulAssignment",
													"src": "321:27:20",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "335:6:20",
																"nodeType": "YulIdentifier",
																"src": "335:6:20"
															},
															{
																"kind": "number",
																"nativeSrc": "343:4:20",
																"nodeType": "YulLiteral",
																"src": "343:4:20",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "331:3:20",
															"nodeType": "YulIdentifier",
															"src": "331:3:20"
														},
														"nativeSrc": "331:17:20",
														"nodeType": "YulFunctionCall",
														"src": "331:17:20"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "321:6:20",
															"nodeType": "YulIdentifier",
															"src": "321:6:20"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "299:18:20",
													"nodeType": "YulIdentifier",
													"src": "299:18:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "292:6:20",
												"nodeType": "YulIdentifier",
												"src": "292:6:20"
											},
											"nativeSrc": "292:26:20",
											"nodeType": "YulFunctionCall",
											"src": "292:26:20"
										},
										"nativeSrc": "289:61:20",
										"nodeType": "YulIf",
										"src": "289:61:20"
									},
									{
										"body": {
											"nativeSrc": "409:111:20",
											"nodeType": "YulBlock",
											"src": "409:111:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "430:1:20",
																"nodeType": "YulLiteral",
																"src": "430:1:20",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "437:3:20",
																		"nodeType": "YulLiteral",
																		"src": "437:3:20",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "442:10:20",
																		"nodeType": "YulLiteral",
																		"src": "442:10:20",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "433:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "433:3:20"
																},
																"nativeSrc": "433:20:20",
																"nodeType": "YulFunctionCall",
																"src": "433:20:20"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "423:6:20",
															"nodeType": "YulIdentifier",
															"src": "423:6:20"
														},
														"nativeSrc": "423:31:20",
														"nodeType": "YulFunctionCall",
														"src": "423:31:20"
													},
													"nativeSrc": "423:31:20",
													"nodeType": "YulExpressionStatement",
													"src": "423:31:20"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "474:1:20",
																"nodeType": "YulLiteral",
																"src": "474:1:20",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nativeSrc": "477:4:20",
																"nodeType": "YulLiteral",
																"src": "477:4:20",
																"type": "",
																"value": "0x22"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "467:6:20",
															"nodeType": "YulIdentifier",
															"src": "467:6:20"
														},
														"nativeSrc": "467:15:20",
														"nodeType": "YulFunctionCall",
														"src": "467:15:20"
													},
													"nativeSrc": "467:15:20",
													"nodeType": "YulExpressionStatement",
													"src": "467:15:20"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "502:1:20",
																"nodeType": "YulLiteral",
																"src": "502:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "505:4:20",
																"nodeType": "YulLiteral",
																"src": "505:4:20",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "495:6:20",
															"nodeType": "YulIdentifier",
															"src": "495:6:20"
														},
														"nativeSrc": "495:15:20",
														"nodeType": "YulFunctionCall",
														"src": "495:15:20"
													},
													"nativeSrc": "495:15:20",
													"nodeType": "YulExpressionStatement",
													"src": "495:15:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "365:18:20",
													"nodeType": "YulIdentifier",
													"src": "365:18:20"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "388:6:20",
															"nodeType": "YulIdentifier",
															"src": "388:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "396:2:20",
															"nodeType": "YulLiteral",
															"src": "396:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "385:2:20",
														"nodeType": "YulIdentifier",
														"src": "385:2:20"
													},
													"nativeSrc": "385:14:20",
													"nodeType": "YulFunctionCall",
													"src": "385:14:20"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "362:2:20",
												"nodeType": "YulIdentifier",
												"src": "362:2:20"
											},
											"nativeSrc": "362:38:20",
											"nodeType": "YulFunctionCall",
											"src": "362:38:20"
										},
										"nativeSrc": "359:161:20",
										"nodeType": "YulIf",
										"src": "359:161:20"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "146:380:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "181:4:20",
									"nodeType": "YulTypedName",
									"src": "181:4:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "190:6:20",
									"nodeType": "YulTypedName",
									"src": "190:6:20",
									"type": ""
								}
							],
							"src": "146:380:20"
						},
						{
							"body": {
								"nativeSrc": "587:65:20",
								"nodeType": "YulBlock",
								"src": "587:65:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "604:1:20",
													"nodeType": "YulLiteral",
													"src": "604:1:20",
													"type": "",
													"value": "0"
												},
												{
													"name": "ptr",
													"nativeSrc": "607:3:20",
													"nodeType": "YulIdentifier",
													"src": "607:3:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "597:6:20",
												"nodeType": "YulIdentifier",
												"src": "597:6:20"
											},
											"nativeSrc": "597:14:20",
											"nodeType": "YulFunctionCall",
											"src": "597:14:20"
										},
										"nativeSrc": "597:14:20",
										"nodeType": "YulExpressionStatement",
										"src": "597:14:20"
									},
									{
										"nativeSrc": "620:26:20",
										"nodeType": "YulAssignment",
										"src": "620:26:20",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "638:1:20",
													"nodeType": "YulLiteral",
													"src": "638:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "641:4:20",
													"nodeType": "YulLiteral",
													"src": "641:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "keccak256",
												"nativeSrc": "628:9:20",
												"nodeType": "YulIdentifier",
												"src": "628:9:20"
											},
											"nativeSrc": "628:18:20",
											"nodeType": "YulFunctionCall",
											"src": "628:18:20"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "620:4:20",
												"nodeType": "YulIdentifier",
												"src": "620:4:20"
											}
										]
									}
								]
							},
							"name": "array_dataslot_string_storage",
							"nativeSrc": "531:121:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "570:3:20",
									"nodeType": "YulTypedName",
									"src": "570:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nativeSrc": "578:4:20",
									"nodeType": "YulTypedName",
									"src": "578:4:20",
									"type": ""
								}
							],
							"src": "531:121:20"
						},
						{
							"body": {
								"nativeSrc": "738:437:20",
								"nodeType": "YulBlock",
								"src": "738:437:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "771:398:20",
											"nodeType": "YulBlock",
											"src": "771:398:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "792:1:20",
																"nodeType": "YulLiteral",
																"src": "792:1:20",
																"type": "",
																"value": "0"
															},
															{
																"name": "array",
																"nativeSrc": "795:5:20",
																"nodeType": "YulIdentifier",
																"src": "795:5:20"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "785:6:20",
															"nodeType": "YulIdentifier",
															"src": "785:6:20"
														},
														"nativeSrc": "785:16:20",
														"nodeType": "YulFunctionCall",
														"src": "785:16:20"
													},
													"nativeSrc": "785:16:20",
													"nodeType": "YulExpressionStatement",
													"src": "785:16:20"
												},
												{
													"nativeSrc": "814:30:20",
													"nodeType": "YulVariableDeclaration",
													"src": "814:30:20",
													"value": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "836:1:20",
																"nodeType": "YulLiteral",
																"src": "836:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "839:4:20",
																"nodeType": "YulLiteral",
																"src": "839:4:20",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "keccak256",
															"nativeSrc": "826:9:20",
															"nodeType": "YulIdentifier",
															"src": "826:9:20"
														},
														"nativeSrc": "826:18:20",
														"nodeType": "YulFunctionCall",
														"src": "826:18:20"
													},
													"variables": [
														{
															"name": "data",
															"nativeSrc": "818:4:20",
															"nodeType": "YulTypedName",
															"src": "818:4:20",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "857:57:20",
													"nodeType": "YulVariableDeclaration",
													"src": "857:57:20",
													"value": {
														"arguments": [
															{
																"name": "data",
																"nativeSrc": "880:4:20",
																"nodeType": "YulIdentifier",
																"src": "880:4:20"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "890:1:20",
																		"nodeType": "YulLiteral",
																		"src": "890:1:20",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "startIndex",
																				"nativeSrc": "897:10:20",
																				"nodeType": "YulIdentifier",
																				"src": "897:10:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "909:2:20",
																				"nodeType": "YulLiteral",
																				"src": "909:2:20",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "893:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "893:3:20"
																		},
																		"nativeSrc": "893:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "893:19:20"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "886:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "886:3:20"
																},
																"nativeSrc": "886:27:20",
																"nodeType": "YulFunctionCall",
																"src": "886:27:20"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "876:3:20",
															"nodeType": "YulIdentifier",
															"src": "876:3:20"
														},
														"nativeSrc": "876:38:20",
														"nodeType": "YulFunctionCall",
														"src": "876:38:20"
													},
													"variables": [
														{
															"name": "deleteStart",
															"nativeSrc": "861:11:20",
															"nodeType": "YulTypedName",
															"src": "861:11:20",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nativeSrc": "951:23:20",
														"nodeType": "YulBlock",
														"src": "951:23:20",
														"statements": [
															{
																"nativeSrc": "953:19:20",
																"nodeType": "YulAssignment",
																"src": "953:19:20",
																"value": {
																	"name": "data",
																	"nativeSrc": "968:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "968:4:20"
																},
																"variableNames": [
																	{
																		"name": "deleteStart",
																		"nativeSrc": "953:11:20",
																		"nodeType": "YulIdentifier",
																		"src": "953:11:20"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "startIndex",
																"nativeSrc": "933:10:20",
																"nodeType": "YulIdentifier",
																"src": "933:10:20"
															},
															{
																"kind": "number",
																"nativeSrc": "945:4:20",
																"nodeType": "YulLiteral",
																"src": "945:4:20",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "lt",
															"nativeSrc": "930:2:20",
															"nodeType": "YulIdentifier",
															"src": "930:2:20"
														},
														"nativeSrc": "930:20:20",
														"nodeType": "YulFunctionCall",
														"src": "930:20:20"
													},
													"nativeSrc": "927:47:20",
													"nodeType": "YulIf",
													"src": "927:47:20"
												},
												{
													"nativeSrc": "987:41:20",
													"nodeType": "YulVariableDeclaration",
													"src": "987:41:20",
													"value": {
														"arguments": [
															{
																"name": "data",
																"nativeSrc": "1001:4:20",
																"nodeType": "YulIdentifier",
																"src": "1001:4:20"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1011:1:20",
																		"nodeType": "YulLiteral",
																		"src": "1011:1:20",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "len",
																				"nativeSrc": "1018:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "1018:3:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1023:2:20",
																				"nodeType": "YulLiteral",
																				"src": "1023:2:20",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1014:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1014:3:20"
																		},
																		"nativeSrc": "1014:12:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1014:12:20"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "1007:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1007:3:20"
																},
																"nativeSrc": "1007:20:20",
																"nodeType": "YulFunctionCall",
																"src": "1007:20:20"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "997:3:20",
															"nodeType": "YulIdentifier",
															"src": "997:3:20"
														},
														"nativeSrc": "997:31:20",
														"nodeType": "YulFunctionCall",
														"src": "997:31:20"
													},
													"variables": [
														{
															"name": "_1",
															"nativeSrc": "991:2:20",
															"nodeType": "YulTypedName",
															"src": "991:2:20",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "1041:24:20",
													"nodeType": "YulVariableDeclaration",
													"src": "1041:24:20",
													"value": {
														"name": "deleteStart",
														"nativeSrc": "1054:11:20",
														"nodeType": "YulIdentifier",
														"src": "1054:11:20"
													},
													"variables": [
														{
															"name": "start",
															"nativeSrc": "1045:5:20",
															"nodeType": "YulTypedName",
															"src": "1045:5:20",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nativeSrc": "1139:20:20",
														"nodeType": "YulBlock",
														"src": "1139:20:20",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"name": "start",
																			"nativeSrc": "1148:5:20",
																			"nodeType": "YulIdentifier",
																			"src": "1148:5:20"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "1155:1:20",
																			"nodeType": "YulLiteral",
																			"src": "1155:1:20",
																			"type": "",
																			"value": "0"
																		}
																	],
																	"functionName": {
																		"name": "sstore",
																		"nativeSrc": "1141:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "1141:6:20"
																	},
																	"nativeSrc": "1141:16:20",
																	"nodeType": "YulFunctionCall",
																	"src": "1141:16:20"
																},
																"nativeSrc": "1141:16:20",
																"nodeType": "YulExpressionStatement",
																"src": "1141:16:20"
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "start",
																"nativeSrc": "1089:5:20",
																"nodeType": "YulIdentifier",
																"src": "1089:5:20"
															},
															{
																"name": "_1",
																"nativeSrc": "1096:2:20",
																"nodeType": "YulIdentifier",
																"src": "1096:2:20"
															}
														],
														"functionName": {
															"name": "lt",
															"nativeSrc": "1086:2:20",
															"nodeType": "YulIdentifier",
															"src": "1086:2:20"
														},
														"nativeSrc": "1086:13:20",
														"nodeType": "YulFunctionCall",
														"src": "1086:13:20"
													},
													"nativeSrc": "1078:81:20",
													"nodeType": "YulForLoop",
													"post": {
														"nativeSrc": "1100:26:20",
														"nodeType": "YulBlock",
														"src": "1100:26:20",
														"statements": [
															{
																"nativeSrc": "1102:22:20",
																"nodeType": "YulAssignment",
																"src": "1102:22:20",
																"value": {
																	"arguments": [
																		{
																			"name": "start",
																			"nativeSrc": "1115:5:20",
																			"nodeType": "YulIdentifier",
																			"src": "1115:5:20"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "1122:1:20",
																			"nodeType": "YulLiteral",
																			"src": "1122:1:20",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "1111:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "1111:3:20"
																	},
																	"nativeSrc": "1111:13:20",
																	"nodeType": "YulFunctionCall",
																	"src": "1111:13:20"
																},
																"variableNames": [
																	{
																		"name": "start",
																		"nativeSrc": "1102:5:20",
																		"nodeType": "YulIdentifier",
																		"src": "1102:5:20"
																	}
																]
															}
														]
													},
													"pre": {
														"nativeSrc": "1082:3:20",
														"nodeType": "YulBlock",
														"src": "1082:3:20",
														"statements": []
													},
													"src": "1078:81:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "len",
													"nativeSrc": "754:3:20",
													"nodeType": "YulIdentifier",
													"src": "754:3:20"
												},
												{
													"kind": "number",
													"nativeSrc": "759:2:20",
													"nodeType": "YulLiteral",
													"src": "759:2:20",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "751:2:20",
												"nodeType": "YulIdentifier",
												"src": "751:2:20"
											},
											"nativeSrc": "751:11:20",
											"nodeType": "YulFunctionCall",
											"src": "751:11:20"
										},
										"nativeSrc": "748:421:20",
										"nodeType": "YulIf",
										"src": "748:421:20"
									}
								]
							},
							"name": "clean_up_bytearray_end_slots_string_storage",
							"nativeSrc": "657:518:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nativeSrc": "710:5:20",
									"nodeType": "YulTypedName",
									"src": "710:5:20",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "717:3:20",
									"nodeType": "YulTypedName",
									"src": "717:3:20",
									"type": ""
								},
								{
									"name": "startIndex",
									"nativeSrc": "722:10:20",
									"nodeType": "YulTypedName",
									"src": "722:10:20",
									"type": ""
								}
							],
							"src": "657:518:20"
						},
						{
							"body": {
								"nativeSrc": "1265:81:20",
								"nodeType": "YulBlock",
								"src": "1265:81:20",
								"statements": [
									{
										"nativeSrc": "1275:65:20",
										"nodeType": "YulAssignment",
										"src": "1275:65:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "data",
															"nativeSrc": "1290:4:20",
															"nodeType": "YulIdentifier",
															"src": "1290:4:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1308:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1308:1:20",
																					"type": "",
																					"value": "3"
																				},
																				{
																					"name": "len",
																					"nativeSrc": "1311:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "1311:3:20"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nativeSrc": "1304:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "1304:3:20"
																			},
																			"nativeSrc": "1304:11:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1304:11:20"
																		},
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1321:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1321:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "not",
																				"nativeSrc": "1317:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "1317:3:20"
																			},
																			"nativeSrc": "1317:6:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1317:6:20"
																		}
																	],
																	"functionName": {
																		"name": "shr",
																		"nativeSrc": "1300:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "1300:3:20"
																	},
																	"nativeSrc": "1300:24:20",
																	"nodeType": "YulFunctionCall",
																	"src": "1300:24:20"
																}
															],
															"functionName": {
																"name": "not",
																"nativeSrc": "1296:3:20",
																"nodeType": "YulIdentifier",
																"src": "1296:3:20"
															},
															"nativeSrc": "1296:29:20",
															"nodeType": "YulFunctionCall",
															"src": "1296:29:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "1286:3:20",
														"nodeType": "YulIdentifier",
														"src": "1286:3:20"
													},
													"nativeSrc": "1286:40:20",
													"nodeType": "YulFunctionCall",
													"src": "1286:40:20"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "1332:1:20",
															"nodeType": "YulLiteral",
															"src": "1332:1:20",
															"type": "",
															"value": "1"
														},
														{
															"name": "len",
															"nativeSrc": "1335:3:20",
															"nodeType": "YulIdentifier",
															"src": "1335:3:20"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "1328:3:20",
														"nodeType": "YulIdentifier",
														"src": "1328:3:20"
													},
													"nativeSrc": "1328:11:20",
													"nodeType": "YulFunctionCall",
													"src": "1328:11:20"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "1283:2:20",
												"nodeType": "YulIdentifier",
												"src": "1283:2:20"
											},
											"nativeSrc": "1283:57:20",
											"nodeType": "YulFunctionCall",
											"src": "1283:57:20"
										},
										"variableNames": [
											{
												"name": "used",
												"nativeSrc": "1275:4:20",
												"nodeType": "YulIdentifier",
												"src": "1275:4:20"
											}
										]
									}
								]
							},
							"name": "extract_used_part_and_set_length_of_short_byte_array",
							"nativeSrc": "1180:166:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "1242:4:20",
									"nodeType": "YulTypedName",
									"src": "1242:4:20",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "1248:3:20",
									"nodeType": "YulTypedName",
									"src": "1248:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "used",
									"nativeSrc": "1256:4:20",
									"nodeType": "YulTypedName",
									"src": "1256:4:20",
									"type": ""
								}
							],
							"src": "1180:166:20"
						},
						{
							"body": {
								"nativeSrc": "1447:1203:20",
								"nodeType": "YulBlock",
								"src": "1447:1203:20",
								"statements": [
									{
										"nativeSrc": "1457:24:20",
										"nodeType": "YulVariableDeclaration",
										"src": "1457:24:20",
										"value": {
											"arguments": [
												{
													"name": "src",
													"nativeSrc": "1477:3:20",
													"nodeType": "YulIdentifier",
													"src": "1477:3:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "1471:5:20",
												"nodeType": "YulIdentifier",
												"src": "1471:5:20"
											},
											"nativeSrc": "1471:10:20",
											"nodeType": "YulFunctionCall",
											"src": "1471:10:20"
										},
										"variables": [
											{
												"name": "newLen",
												"nativeSrc": "1461:6:20",
												"nodeType": "YulTypedName",
												"src": "1461:6:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "1524:22:20",
											"nodeType": "YulBlock",
											"src": "1524:22:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "1526:16:20",
															"nodeType": "YulIdentifier",
															"src": "1526:16:20"
														},
														"nativeSrc": "1526:18:20",
														"nodeType": "YulFunctionCall",
														"src": "1526:18:20"
													},
													"nativeSrc": "1526:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "1526:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "1496:6:20",
													"nodeType": "YulIdentifier",
													"src": "1496:6:20"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "1512:2:20",
																	"nodeType": "YulLiteral",
																	"src": "1512:2:20",
																	"type": "",
																	"value": "64"
																},
																{
																	"kind": "number",
																	"nativeSrc": "1516:1:20",
																	"nodeType": "YulLiteral",
																	"src": "1516:1:20",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "shl",
																"nativeSrc": "1508:3:20",
																"nodeType": "YulIdentifier",
																"src": "1508:3:20"
															},
															"nativeSrc": "1508:10:20",
															"nodeType": "YulFunctionCall",
															"src": "1508:10:20"
														},
														{
															"kind": "number",
															"nativeSrc": "1520:1:20",
															"nodeType": "YulLiteral",
															"src": "1520:1:20",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1504:3:20",
														"nodeType": "YulIdentifier",
														"src": "1504:3:20"
													},
													"nativeSrc": "1504:18:20",
													"nodeType": "YulFunctionCall",
													"src": "1504:18:20"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "1493:2:20",
												"nodeType": "YulIdentifier",
												"src": "1493:2:20"
											},
											"nativeSrc": "1493:30:20",
											"nodeType": "YulFunctionCall",
											"src": "1493:30:20"
										},
										"nativeSrc": "1490:56:20",
										"nodeType": "YulIf",
										"src": "1490:56:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "1599:4:20",
													"nodeType": "YulIdentifier",
													"src": "1599:4:20"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "slot",
																	"nativeSrc": "1637:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1637:4:20"
																}
															],
															"functionName": {
																"name": "sload",
																"nativeSrc": "1631:5:20",
																"nodeType": "YulIdentifier",
																"src": "1631:5:20"
															},
															"nativeSrc": "1631:11:20",
															"nodeType": "YulFunctionCall",
															"src": "1631:11:20"
														}
													],
													"functionName": {
														"name": "extract_byte_array_length",
														"nativeSrc": "1605:25:20",
														"nodeType": "YulIdentifier",
														"src": "1605:25:20"
													},
													"nativeSrc": "1605:38:20",
													"nodeType": "YulFunctionCall",
													"src": "1605:38:20"
												},
												{
													"name": "newLen",
													"nativeSrc": "1645:6:20",
													"nodeType": "YulIdentifier",
													"src": "1645:6:20"
												}
											],
											"functionName": {
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "1555:43:20",
												"nodeType": "YulIdentifier",
												"src": "1555:43:20"
											},
											"nativeSrc": "1555:97:20",
											"nodeType": "YulFunctionCall",
											"src": "1555:97:20"
										},
										"nativeSrc": "1555:97:20",
										"nodeType": "YulExpressionStatement",
										"src": "1555:97:20"
									},
									{
										"nativeSrc": "1661:18:20",
										"nodeType": "YulVariableDeclaration",
										"src": "1661:18:20",
										"value": {
											"kind": "number",
											"nativeSrc": "1678:1:20",
											"nodeType": "YulLiteral",
											"src": "1678:1:20",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "srcOffset",
												"nativeSrc": "1665:9:20",
												"nodeType": "YulTypedName",
												"src": "1665:9:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "1688:17:20",
										"nodeType": "YulAssignment",
										"src": "1688:17:20",
										"value": {
											"kind": "number",
											"nativeSrc": "1701:4:20",
											"nodeType": "YulLiteral",
											"src": "1701:4:20",
											"type": "",
											"value": "0x20"
										},
										"variableNames": [
											{
												"name": "srcOffset",
												"nativeSrc": "1688:9:20",
												"nodeType": "YulIdentifier",
												"src": "1688:9:20"
											}
										]
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "1751:642:20",
													"nodeType": "YulBlock",
													"src": "1751:642:20",
													"statements": [
														{
															"nativeSrc": "1765:35:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1765:35:20",
															"value": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "1784:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "1784:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1796:2:20",
																				"nodeType": "YulLiteral",
																				"src": "1796:2:20",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "1792:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1792:3:20"
																		},
																		"nativeSrc": "1792:7:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1792:7:20"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1780:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1780:3:20"
																},
																"nativeSrc": "1780:20:20",
																"nodeType": "YulFunctionCall",
																"src": "1780:20:20"
															},
															"variables": [
																{
																	"name": "loopEnd",
																	"nativeSrc": "1769:7:20",
																	"nodeType": "YulTypedName",
																	"src": "1769:7:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1813:49:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1813:49:20",
															"value": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "1857:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "1857:4:20"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_string_storage",
																	"nativeSrc": "1827:29:20",
																	"nodeType": "YulIdentifier",
																	"src": "1827:29:20"
																},
																"nativeSrc": "1827:35:20",
																"nodeType": "YulFunctionCall",
																"src": "1827:35:20"
															},
															"variables": [
																{
																	"name": "dstPtr",
																	"nativeSrc": "1817:6:20",
																	"nodeType": "YulTypedName",
																	"src": "1817:6:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1875:10:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1875:10:20",
															"value": {
																"kind": "number",
																"nativeSrc": "1884:1:20",
																"nodeType": "YulLiteral",
																"src": "1884:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "1879:1:20",
																	"nodeType": "YulTypedName",
																	"src": "1879:1:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1955:165:20",
																"nodeType": "YulBlock",
																"src": "1955:165:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "1980:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "1980:6:20"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nativeSrc": "1998:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "1998:3:20"
																								},
																								{
																									"name": "srcOffset",
																									"nativeSrc": "2003:9:20",
																									"nodeType": "YulIdentifier",
																									"src": "2003:9:20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "1994:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "1994:3:20"
																							},
																							"nativeSrc": "1994:19:20",
																							"nodeType": "YulFunctionCall",
																							"src": "1994:19:20"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "1988:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "1988:5:20"
																					},
																					"nativeSrc": "1988:26:20",
																					"nodeType": "YulFunctionCall",
																					"src": "1988:26:20"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "1973:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1973:6:20"
																			},
																			"nativeSrc": "1973:42:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1973:42:20"
																		},
																		"nativeSrc": "1973:42:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1973:42:20"
																	},
																	{
																		"nativeSrc": "2032:24:20",
																		"nodeType": "YulAssignment",
																		"src": "2032:24:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "2046:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "2046:6:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2054:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2054:1:20",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "2042:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "2042:3:20"
																			},
																			"nativeSrc": "2042:14:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2042:14:20"
																		},
																		"variableNames": [
																			{
																				"name": "dstPtr",
																				"nativeSrc": "2032:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2032:6:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2073:33:20",
																		"nodeType": "YulAssignment",
																		"src": "2073:33:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcOffset",
																					"nativeSrc": "2090:9:20",
																					"nodeType": "YulIdentifier",
																					"src": "2090:9:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2101:4:20",
																					"nodeType": "YulLiteral",
																					"src": "2101:4:20",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "2086:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "2086:3:20"
																			},
																			"nativeSrc": "2086:20:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2086:20:20"
																		},
																		"variableNames": [
																			{
																				"name": "srcOffset",
																				"nativeSrc": "2073:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2073:9:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "1909:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "1909:1:20"
																	},
																	{
																		"name": "loopEnd",
																		"nativeSrc": "1912:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "1912:7:20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "1906:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "1906:2:20"
																},
																"nativeSrc": "1906:14:20",
																"nodeType": "YulFunctionCall",
																"src": "1906:14:20"
															},
															"nativeSrc": "1898:222:20",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "1921:21:20",
																"nodeType": "YulBlock",
																"src": "1921:21:20",
																"statements": [
																	{
																		"nativeSrc": "1923:17:20",
																		"nodeType": "YulAssignment",
																		"src": "1923:17:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "1932:1:20",
																					"nodeType": "YulIdentifier",
																					"src": "1932:1:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1935:4:20",
																					"nodeType": "YulLiteral",
																					"src": "1935:4:20",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "1928:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "1928:3:20"
																			},
																			"nativeSrc": "1928:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1928:12:20"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "1923:1:20",
																				"nodeType": "YulIdentifier",
																				"src": "1923:1:20"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "1902:3:20",
																"nodeType": "YulBlock",
																"src": "1902:3:20",
																"statements": []
															},
															"src": "1898:222:20"
														},
														{
															"body": {
																"nativeSrc": "2168:166:20",
																"nodeType": "YulBlock",
																"src": "2168:166:20",
																"statements": [
																	{
																		"nativeSrc": "2186:43:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "2186:43:20",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "2213:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "2213:3:20"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "2218:9:20",
																							"nodeType": "YulIdentifier",
																							"src": "2218:9:20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2209:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "2209:3:20"
																					},
																					"nativeSrc": "2209:19:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2209:19:20"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2203:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "2203:5:20"
																			},
																			"nativeSrc": "2203:26:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2203:26:20"
																		},
																		"variables": [
																			{
																				"name": "lastValue",
																				"nativeSrc": "2190:9:20",
																				"nodeType": "YulTypedName",
																				"src": "2190:9:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "2253:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "2253:6:20"
																				},
																				{
																					"arguments": [
																						{
																							"name": "lastValue",
																							"nativeSrc": "2265:9:20",
																							"nodeType": "YulIdentifier",
																							"src": "2265:9:20"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"arguments": [
																												{
																													"arguments": [
																														{
																															"kind": "number",
																															"nativeSrc": "2292:1:20",
																															"nodeType": "YulLiteral",
																															"src": "2292:1:20",
																															"type": "",
																															"value": "3"
																														},
																														{
																															"name": "newLen",
																															"nativeSrc": "2295:6:20",
																															"nodeType": "YulIdentifier",
																															"src": "2295:6:20"
																														}
																													],
																													"functionName": {
																														"name": "shl",
																														"nativeSrc": "2288:3:20",
																														"nodeType": "YulIdentifier",
																														"src": "2288:3:20"
																													},
																													"nativeSrc": "2288:14:20",
																													"nodeType": "YulFunctionCall",
																													"src": "2288:14:20"
																												},
																												{
																													"kind": "number",
																													"nativeSrc": "2304:3:20",
																													"nodeType": "YulLiteral",
																													"src": "2304:3:20",
																													"type": "",
																													"value": "248"
																												}
																											],
																											"functionName": {
																												"name": "and",
																												"nativeSrc": "2284:3:20",
																												"nodeType": "YulIdentifier",
																												"src": "2284:3:20"
																											},
																											"nativeSrc": "2284:24:20",
																											"nodeType": "YulFunctionCall",
																											"src": "2284:24:20"
																										},
																										{
																											"arguments": [
																												{
																													"kind": "number",
																													"nativeSrc": "2314:1:20",
																													"nodeType": "YulLiteral",
																													"src": "2314:1:20",
																													"type": "",
																													"value": "0"
																												}
																											],
																											"functionName": {
																												"name": "not",
																												"nativeSrc": "2310:3:20",
																												"nodeType": "YulIdentifier",
																												"src": "2310:3:20"
																											},
																											"nativeSrc": "2310:6:20",
																											"nodeType": "YulFunctionCall",
																											"src": "2310:6:20"
																										}
																									],
																									"functionName": {
																										"name": "shr",
																										"nativeSrc": "2280:3:20",
																										"nodeType": "YulIdentifier",
																										"src": "2280:3:20"
																									},
																									"nativeSrc": "2280:37:20",
																									"nodeType": "YulFunctionCall",
																									"src": "2280:37:20"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "2276:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "2276:3:20"
																							},
																							"nativeSrc": "2276:42:20",
																							"nodeType": "YulFunctionCall",
																							"src": "2276:42:20"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "2261:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "2261:3:20"
																					},
																					"nativeSrc": "2261:58:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2261:58:20"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "2246:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2246:6:20"
																			},
																			"nativeSrc": "2246:74:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2246:74:20"
																		},
																		"nativeSrc": "2246:74:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "2246:74:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "loopEnd",
																		"nativeSrc": "2139:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "2139:7:20"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "2148:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "2148:6:20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "2136:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "2136:2:20"
																},
																"nativeSrc": "2136:19:20",
																"nodeType": "YulFunctionCall",
																"src": "2136:19:20"
															},
															"nativeSrc": "2133:201:20",
															"nodeType": "YulIf",
															"src": "2133:201:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "2354:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "2354:4:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2368:1:20",
																						"nodeType": "YulLiteral",
																						"src": "2368:1:20",
																						"type": "",
																						"value": "1"
																					},
																					{
																						"name": "newLen",
																						"nativeSrc": "2371:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "2371:6:20"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "2364:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "2364:3:20"
																				},
																				"nativeSrc": "2364:14:20",
																				"nodeType": "YulFunctionCall",
																				"src": "2364:14:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2380:1:20",
																				"nodeType": "YulLiteral",
																				"src": "2380:1:20",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2360:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2360:3:20"
																		},
																		"nativeSrc": "2360:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2360:22:20"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "2347:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2347:6:20"
																},
																"nativeSrc": "2347:36:20",
																"nodeType": "YulFunctionCall",
																"src": "2347:36:20"
															},
															"nativeSrc": "2347:36:20",
															"nodeType": "YulExpressionStatement",
															"src": "2347:36:20"
														}
													]
												},
												"nativeSrc": "1744:649:20",
												"nodeType": "YulCase",
												"src": "1744:649:20",
												"value": {
													"kind": "number",
													"nativeSrc": "1749:1:20",
													"nodeType": "YulLiteral",
													"src": "1749:1:20",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "2410:234:20",
													"nodeType": "YulBlock",
													"src": "2410:234:20",
													"statements": [
														{
															"nativeSrc": "2424:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "2424:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "2437:1:20",
																"nodeType": "YulLiteral",
																"src": "2437:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "2428:5:20",
																	"nodeType": "YulTypedName",
																	"src": "2428:5:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2473:67:20",
																"nodeType": "YulBlock",
																"src": "2473:67:20",
																"statements": [
																	{
																		"nativeSrc": "2491:35:20",
																		"nodeType": "YulAssignment",
																		"src": "2491:35:20",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "2510:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "2510:3:20"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "2515:9:20",
																							"nodeType": "YulIdentifier",
																							"src": "2515:9:20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2506:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "2506:3:20"
																					},
																					"nativeSrc": "2506:19:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2506:19:20"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2500:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "2500:5:20"
																			},
																			"nativeSrc": "2500:26:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2500:26:20"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "2491:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "2491:5:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"name": "newLen",
																"nativeSrc": "2454:6:20",
																"nodeType": "YulIdentifier",
																"src": "2454:6:20"
															},
															"nativeSrc": "2451:89:20",
															"nodeType": "YulIf",
															"src": "2451:89:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "2560:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "2560:4:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2619:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "2619:5:20"
																			},
																			{
																				"name": "newLen",
																				"nativeSrc": "2626:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2626:6:20"
																			}
																		],
																		"functionName": {
																			"name": "extract_used_part_and_set_length_of_short_byte_array",
																			"nativeSrc": "2566:52:20",
																			"nodeType": "YulIdentifier",
																			"src": "2566:52:20"
																		},
																		"nativeSrc": "2566:67:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2566:67:20"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "2553:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2553:6:20"
																},
																"nativeSrc": "2553:81:20",
																"nodeType": "YulFunctionCall",
																"src": "2553:81:20"
															},
															"nativeSrc": "2553:81:20",
															"nodeType": "YulExpressionStatement",
															"src": "2553:81:20"
														}
													]
												},
												"nativeSrc": "2402:242:20",
												"nodeType": "YulCase",
												"src": "2402:242:20",
												"value": "default"
											}
										],
										"expression": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "1724:6:20",
													"nodeType": "YulIdentifier",
													"src": "1724:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "1732:2:20",
													"nodeType": "YulLiteral",
													"src": "1732:2:20",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "1721:2:20",
												"nodeType": "YulIdentifier",
												"src": "1721:2:20"
											},
											"nativeSrc": "1721:14:20",
											"nodeType": "YulFunctionCall",
											"src": "1721:14:20"
										},
										"nativeSrc": "1714:930:20",
										"nodeType": "YulSwitch",
										"src": "1714:930:20"
									}
								]
							},
							"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
							"nativeSrc": "1351:1299:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "1432:4:20",
									"nodeType": "YulTypedName",
									"src": "1432:4:20",
									"type": ""
								},
								{
									"name": "src",
									"nativeSrc": "1438:3:20",
									"nodeType": "YulTypedName",
									"src": "1438:3:20",
									"type": ""
								}
							],
							"src": "1351:1299:20"
						},
						{
							"body": {
								"nativeSrc": "2868:276:20",
								"nodeType": "YulBlock",
								"src": "2868:276:20",
								"statements": [
									{
										"nativeSrc": "2878:27:20",
										"nodeType": "YulAssignment",
										"src": "2878:27:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2890:9:20",
													"nodeType": "YulIdentifier",
													"src": "2890:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "2901:3:20",
													"nodeType": "YulLiteral",
													"src": "2901:3:20",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "2886:3:20",
												"nodeType": "YulIdentifier",
												"src": "2886:3:20"
											},
											"nativeSrc": "2886:19:20",
											"nodeType": "YulFunctionCall",
											"src": "2886:19:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "2878:4:20",
												"nodeType": "YulIdentifier",
												"src": "2878:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2921:9:20",
													"nodeType": "YulIdentifier",
													"src": "2921:9:20"
												},
												{
													"name": "value0",
													"nativeSrc": "2932:6:20",
													"nodeType": "YulIdentifier",
													"src": "2932:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2914:6:20",
												"nodeType": "YulIdentifier",
												"src": "2914:6:20"
											},
											"nativeSrc": "2914:25:20",
											"nodeType": "YulFunctionCall",
											"src": "2914:25:20"
										},
										"nativeSrc": "2914:25:20",
										"nodeType": "YulExpressionStatement",
										"src": "2914:25:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2959:9:20",
															"nodeType": "YulIdentifier",
															"src": "2959:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "2970:2:20",
															"nodeType": "YulLiteral",
															"src": "2970:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2955:3:20",
														"nodeType": "YulIdentifier",
														"src": "2955:3:20"
													},
													"nativeSrc": "2955:18:20",
													"nodeType": "YulFunctionCall",
													"src": "2955:18:20"
												},
												{
													"name": "value1",
													"nativeSrc": "2975:6:20",
													"nodeType": "YulIdentifier",
													"src": "2975:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2948:6:20",
												"nodeType": "YulIdentifier",
												"src": "2948:6:20"
											},
											"nativeSrc": "2948:34:20",
											"nodeType": "YulFunctionCall",
											"src": "2948:34:20"
										},
										"nativeSrc": "2948:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "2948:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3002:9:20",
															"nodeType": "YulIdentifier",
															"src": "3002:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3013:2:20",
															"nodeType": "YulLiteral",
															"src": "3013:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2998:3:20",
														"nodeType": "YulIdentifier",
														"src": "2998:3:20"
													},
													"nativeSrc": "2998:18:20",
													"nodeType": "YulFunctionCall",
													"src": "2998:18:20"
												},
												{
													"name": "value2",
													"nativeSrc": "3018:6:20",
													"nodeType": "YulIdentifier",
													"src": "3018:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2991:6:20",
												"nodeType": "YulIdentifier",
												"src": "2991:6:20"
											},
											"nativeSrc": "2991:34:20",
											"nodeType": "YulFunctionCall",
											"src": "2991:34:20"
										},
										"nativeSrc": "2991:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "2991:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3045:9:20",
															"nodeType": "YulIdentifier",
															"src": "3045:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3056:2:20",
															"nodeType": "YulLiteral",
															"src": "3056:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3041:3:20",
														"nodeType": "YulIdentifier",
														"src": "3041:3:20"
													},
													"nativeSrc": "3041:18:20",
													"nodeType": "YulFunctionCall",
													"src": "3041:18:20"
												},
												{
													"name": "value3",
													"nativeSrc": "3061:6:20",
													"nodeType": "YulIdentifier",
													"src": "3061:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3034:6:20",
												"nodeType": "YulIdentifier",
												"src": "3034:6:20"
											},
											"nativeSrc": "3034:34:20",
											"nodeType": "YulFunctionCall",
											"src": "3034:34:20"
										},
										"nativeSrc": "3034:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "3034:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3088:9:20",
															"nodeType": "YulIdentifier",
															"src": "3088:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3099:3:20",
															"nodeType": "YulLiteral",
															"src": "3099:3:20",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3084:3:20",
														"nodeType": "YulIdentifier",
														"src": "3084:3:20"
													},
													"nativeSrc": "3084:19:20",
													"nodeType": "YulFunctionCall",
													"src": "3084:19:20"
												},
												{
													"arguments": [
														{
															"name": "value4",
															"nativeSrc": "3109:6:20",
															"nodeType": "YulIdentifier",
															"src": "3109:6:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "3125:3:20",
																			"nodeType": "YulLiteral",
																			"src": "3125:3:20",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "3130:1:20",
																			"nodeType": "YulLiteral",
																			"src": "3130:1:20",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "3121:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "3121:3:20"
																	},
																	"nativeSrc": "3121:11:20",
																	"nodeType": "YulFunctionCall",
																	"src": "3121:11:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "3134:1:20",
																	"nodeType": "YulLiteral",
																	"src": "3134:1:20",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "3117:3:20",
																"nodeType": "YulIdentifier",
																"src": "3117:3:20"
															},
															"nativeSrc": "3117:19:20",
															"nodeType": "YulFunctionCall",
															"src": "3117:19:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "3105:3:20",
														"nodeType": "YulIdentifier",
														"src": "3105:3:20"
													},
													"nativeSrc": "3105:32:20",
													"nodeType": "YulFunctionCall",
													"src": "3105:32:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3077:6:20",
												"nodeType": "YulIdentifier",
												"src": "3077:6:20"
											},
											"nativeSrc": "3077:61:20",
											"nodeType": "YulFunctionCall",
											"src": "3077:61:20"
										},
										"nativeSrc": "3077:61:20",
										"nodeType": "YulExpressionStatement",
										"src": "3077:61:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
							"nativeSrc": "2655:489:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2805:9:20",
									"nodeType": "YulTypedName",
									"src": "2805:9:20",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "2816:6:20",
									"nodeType": "YulTypedName",
									"src": "2816:6:20",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "2824:6:20",
									"nodeType": "YulTypedName",
									"src": "2824:6:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "2832:6:20",
									"nodeType": "YulTypedName",
									"src": "2832:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "2840:6:20",
									"nodeType": "YulTypedName",
									"src": "2840:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "2848:6:20",
									"nodeType": "YulTypedName",
									"src": "2848:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2859:4:20",
									"nodeType": "YulTypedName",
									"src": "2859:4:20",
									"type": ""
								}
							],
							"src": "2655:489:20"
						},
						{
							"body": {
								"nativeSrc": "3270:297:20",
								"nodeType": "YulBlock",
								"src": "3270:297:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3287:9:20",
													"nodeType": "YulIdentifier",
													"src": "3287:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3298:2:20",
													"nodeType": "YulLiteral",
													"src": "3298:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3280:6:20",
												"nodeType": "YulIdentifier",
												"src": "3280:6:20"
											},
											"nativeSrc": "3280:21:20",
											"nodeType": "YulFunctionCall",
											"src": "3280:21:20"
										},
										"nativeSrc": "3280:21:20",
										"nodeType": "YulExpressionStatement",
										"src": "3280:21:20"
									},
									{
										"nativeSrc": "3310:27:20",
										"nodeType": "YulVariableDeclaration",
										"src": "3310:27:20",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "3330:6:20",
													"nodeType": "YulIdentifier",
													"src": "3330:6:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "3324:5:20",
												"nodeType": "YulIdentifier",
												"src": "3324:5:20"
											},
											"nativeSrc": "3324:13:20",
											"nodeType": "YulFunctionCall",
											"src": "3324:13:20"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "3314:6:20",
												"nodeType": "YulTypedName",
												"src": "3314:6:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3357:9:20",
															"nodeType": "YulIdentifier",
															"src": "3357:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3368:2:20",
															"nodeType": "YulLiteral",
															"src": "3368:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3353:3:20",
														"nodeType": "YulIdentifier",
														"src": "3353:3:20"
													},
													"nativeSrc": "3353:18:20",
													"nodeType": "YulFunctionCall",
													"src": "3353:18:20"
												},
												{
													"name": "length",
													"nativeSrc": "3373:6:20",
													"nodeType": "YulIdentifier",
													"src": "3373:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3346:6:20",
												"nodeType": "YulIdentifier",
												"src": "3346:6:20"
											},
											"nativeSrc": "3346:34:20",
											"nodeType": "YulFunctionCall",
											"src": "3346:34:20"
										},
										"nativeSrc": "3346:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "3346:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3399:9:20",
															"nodeType": "YulIdentifier",
															"src": "3399:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3410:2:20",
															"nodeType": "YulLiteral",
															"src": "3410:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3395:3:20",
														"nodeType": "YulIdentifier",
														"src": "3395:3:20"
													},
													"nativeSrc": "3395:18:20",
													"nodeType": "YulFunctionCall",
													"src": "3395:18:20"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "3419:6:20",
															"nodeType": "YulIdentifier",
															"src": "3419:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3427:2:20",
															"nodeType": "YulLiteral",
															"src": "3427:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3415:3:20",
														"nodeType": "YulIdentifier",
														"src": "3415:3:20"
													},
													"nativeSrc": "3415:15:20",
													"nodeType": "YulFunctionCall",
													"src": "3415:15:20"
												},
												{
													"name": "length",
													"nativeSrc": "3432:6:20",
													"nodeType": "YulIdentifier",
													"src": "3432:6:20"
												}
											],
											"functionName": {
												"name": "mcopy",
												"nativeSrc": "3389:5:20",
												"nodeType": "YulIdentifier",
												"src": "3389:5:20"
											},
											"nativeSrc": "3389:50:20",
											"nodeType": "YulFunctionCall",
											"src": "3389:50:20"
										},
										"nativeSrc": "3389:50:20",
										"nodeType": "YulExpressionStatement",
										"src": "3389:50:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "3463:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "3463:9:20"
																},
																{
																	"name": "length",
																	"nativeSrc": "3474:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3474:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "3459:3:20",
																"nodeType": "YulIdentifier",
																"src": "3459:3:20"
															},
															"nativeSrc": "3459:22:20",
															"nodeType": "YulFunctionCall",
															"src": "3459:22:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3483:2:20",
															"nodeType": "YulLiteral",
															"src": "3483:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3455:3:20",
														"nodeType": "YulIdentifier",
														"src": "3455:3:20"
													},
													"nativeSrc": "3455:31:20",
													"nodeType": "YulFunctionCall",
													"src": "3455:31:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3488:1:20",
													"nodeType": "YulLiteral",
													"src": "3488:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3448:6:20",
												"nodeType": "YulIdentifier",
												"src": "3448:6:20"
											},
											"nativeSrc": "3448:42:20",
											"nodeType": "YulFunctionCall",
											"src": "3448:42:20"
										},
										"nativeSrc": "3448:42:20",
										"nodeType": "YulExpressionStatement",
										"src": "3448:42:20"
									},
									{
										"nativeSrc": "3499:62:20",
										"nodeType": "YulAssignment",
										"src": "3499:62:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3515:9:20",
															"nodeType": "YulIdentifier",
															"src": "3515:9:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "length",
																			"nativeSrc": "3534:6:20",
																			"nodeType": "YulIdentifier",
																			"src": "3534:6:20"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "3542:2:20",
																			"nodeType": "YulLiteral",
																			"src": "3542:2:20",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "3530:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "3530:3:20"
																	},
																	"nativeSrc": "3530:15:20",
																	"nodeType": "YulFunctionCall",
																	"src": "3530:15:20"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "3551:2:20",
																			"nodeType": "YulLiteral",
																			"src": "3551:2:20",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "not",
																		"nativeSrc": "3547:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "3547:3:20"
																	},
																	"nativeSrc": "3547:7:20",
																	"nodeType": "YulFunctionCall",
																	"src": "3547:7:20"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "3526:3:20",
																"nodeType": "YulIdentifier",
																"src": "3526:3:20"
															},
															"nativeSrc": "3526:29:20",
															"nodeType": "YulFunctionCall",
															"src": "3526:29:20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3511:3:20",
														"nodeType": "YulIdentifier",
														"src": "3511:3:20"
													},
													"nativeSrc": "3511:45:20",
													"nodeType": "YulFunctionCall",
													"src": "3511:45:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3558:2:20",
													"nodeType": "YulLiteral",
													"src": "3558:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3507:3:20",
												"nodeType": "YulIdentifier",
												"src": "3507:3:20"
											},
											"nativeSrc": "3507:54:20",
											"nodeType": "YulFunctionCall",
											"src": "3507:54:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "3499:4:20",
												"nodeType": "YulIdentifier",
												"src": "3499:4:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "3149:418:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3239:9:20",
									"nodeType": "YulTypedName",
									"src": "3239:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "3250:6:20",
									"nodeType": "YulTypedName",
									"src": "3250:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "3261:4:20",
									"nodeType": "YulTypedName",
									"src": "3261:4:20",
									"type": ""
								}
							],
							"src": "3149:418:20"
						},
						{
							"body": {
								"nativeSrc": "3666:203:20",
								"nodeType": "YulBlock",
								"src": "3666:203:20",
								"statements": [
									{
										"nativeSrc": "3676:26:20",
										"nodeType": "YulVariableDeclaration",
										"src": "3676:26:20",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nativeSrc": "3696:5:20",
													"nodeType": "YulIdentifier",
													"src": "3696:5:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "3690:5:20",
												"nodeType": "YulIdentifier",
												"src": "3690:5:20"
											},
											"nativeSrc": "3690:12:20",
											"nodeType": "YulFunctionCall",
											"src": "3690:12:20"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "3680:6:20",
												"nodeType": "YulTypedName",
												"src": "3680:6:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3711:32:20",
										"nodeType": "YulAssignment",
										"src": "3711:32:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "array",
															"nativeSrc": "3730:5:20",
															"nodeType": "YulIdentifier",
															"src": "3730:5:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3737:4:20",
															"nodeType": "YulLiteral",
															"src": "3737:4:20",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3726:3:20",
														"nodeType": "YulIdentifier",
														"src": "3726:3:20"
													},
													"nativeSrc": "3726:16:20",
													"nodeType": "YulFunctionCall",
													"src": "3726:16:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "3720:5:20",
												"nodeType": "YulIdentifier",
												"src": "3720:5:20"
											},
											"nativeSrc": "3720:23:20",
											"nodeType": "YulFunctionCall",
											"src": "3720:23:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "3711:5:20",
												"nodeType": "YulIdentifier",
												"src": "3711:5:20"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "3780:83:20",
											"nodeType": "YulBlock",
											"src": "3780:83:20",
											"statements": [
												{
													"nativeSrc": "3794:59:20",
													"nodeType": "YulAssignment",
													"src": "3794:59:20",
													"value": {
														"arguments": [
															{
																"name": "value",
																"nativeSrc": "3807:5:20",
																"nodeType": "YulIdentifier",
																"src": "3807:5:20"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "3822:1:20",
																				"nodeType": "YulLiteral",
																				"src": "3822:1:20",
																				"type": "",
																				"value": "3"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "3829:4:20",
																						"nodeType": "YulLiteral",
																						"src": "3829:4:20",
																						"type": "",
																						"value": "0x20"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "3835:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "3835:6:20"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3825:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3825:3:20"
																				},
																				"nativeSrc": "3825:17:20",
																				"nodeType": "YulFunctionCall",
																				"src": "3825:17:20"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "3818:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3818:3:20"
																		},
																		"nativeSrc": "3818:25:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3818:25:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "3849:1:20",
																				"nodeType": "YulLiteral",
																				"src": "3849:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "3845:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3845:3:20"
																		},
																		"nativeSrc": "3845:6:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3845:6:20"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "3814:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3814:3:20"
																},
																"nativeSrc": "3814:38:20",
																"nodeType": "YulFunctionCall",
																"src": "3814:38:20"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "3803:3:20",
															"nodeType": "YulIdentifier",
															"src": "3803:3:20"
														},
														"nativeSrc": "3803:50:20",
														"nodeType": "YulFunctionCall",
														"src": "3803:50:20"
													},
													"variableNames": [
														{
															"name": "value",
															"nativeSrc": "3794:5:20",
															"nodeType": "YulIdentifier",
															"src": "3794:5:20"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "length",
													"nativeSrc": "3758:6:20",
													"nodeType": "YulIdentifier",
													"src": "3758:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3766:4:20",
													"nodeType": "YulLiteral",
													"src": "3766:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "3755:2:20",
												"nodeType": "YulIdentifier",
												"src": "3755:2:20"
											},
											"nativeSrc": "3755:16:20",
											"nodeType": "YulFunctionCall",
											"src": "3755:16:20"
										},
										"nativeSrc": "3752:111:20",
										"nodeType": "YulIf",
										"src": "3752:111:20"
									}
								]
							},
							"name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
							"nativeSrc": "3572:297:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nativeSrc": "3646:5:20",
									"nodeType": "YulTypedName",
									"src": "3646:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "3656:5:20",
									"nodeType": "YulTypedName",
									"src": "3656:5:20",
									"type": ""
								}
							],
							"src": "3572:297:20"
						}
					]
				},
				"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        mcopy(add(headStart, 64), add(value0, 32), length)\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n}",
				"id": 20,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {
			"remix_tests.sol": {
				"Assert": [
					{
						"length": 20,
						"start": 2191
					},
					{
						"length": 20,
						"start": 2317
					},
					{
						"length": 20,
						"start": 2443
					},
					{
						"length": 20,
						"start": 2627
					}
				]
			}
		},
		"object": "610160604052348015610010575f80fd5b506040518060400160405280600781526020016626bcaa37b5b2b760c91b81525080604051806040016040528060018152602001603160f81b8152506040518060400160405280600781526020016626bcaa37b5b2b760c91b815250604051806040016040528060038152602001624d544b60e81b8152508160039081610097919061026e565b5060046100a4828261026e565b506100b49150839050600561015e565b610120526100c381600661015e565b61014052815160208084019190912060e052815190820120610100524660a05261014f60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c05250610380565b5f6020835110156101795761017283610190565b905061018a565b81610184848261026e565b5060ff90505b92915050565b5f80829050601f815111156101c3578260405163305a27a960e01b81526004016101ba9190610328565b60405180910390fd5b80516101ce8261035d565b179392505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806101fe57607f821691505b60208210810361021c57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561026957805f5260205f20601f840160051c810160208510156102475750805b601f840160051c820191505b81811015610266575f8155600101610253565b50505b505050565b81516001600160401b03811115610287576102876101d6565b61029b8161029584546101ea565b84610222565b6020601f8211600181146102cd575f83156102b65750848201515b5f19600385901b1c1916600184901b178455610266565b5f84815260208120601f198516915b828110156102fc57878501518255602094850194600190920191016102dc565b508482101561031957868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b8051602080830151919081101561021c575f1960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161122f6103d15f395f61097501525f61094801525f6108f101525f6108c901525f61082401525f61084e01525f610878015261122f5ff3fe608060405234801561000f575f80fd5b50600436106100e5575f3560e01c80637ecebe0011610088578063a9059cbb11610063578063a9059cbb146101c4578063d505accf146101d7578063dc881d1c146101ec578063dd62ed3e146101f4575f80fd5b80637ecebe001461018e57806384b0196e146101a157806395d89b41146101bc575f80fd5b806323b872dd116100c357806323b872dd1461013c578063313ce5671461014f5780633644e5151461015e57806370a0823114610166575f80fd5b806306fdde03146100e9578063095ea7b31461010757806318160ddd1461012a575b5f80fd5b6100f161022c565b6040516100fe9190610eaa565b60405180910390f35b61011a610115366004610ede565b6102bc565b60405190151581526020016100fe565b6002545b6040519081526020016100fe565b61011a61014a366004610f06565b6102d5565b604051601281526020016100fe565b61012e6102f8565b61012e610174366004610f40565b6001600160a01b03165f9081526020819052604090205490565b61012e61019c366004610f40565b610306565b6101a9610323565b6040516100fe9796959493929190610f59565b6100f1610365565b61011a6101d2366004610ede565b610374565b6101ea6101e5366004610fef565b610381565b005b6101ea6104bc565b61012e61020236600461105c565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b60606003805461023b9061108d565b80601f01602080910402602001604051908101604052809291908181526020018280546102679061108d565b80156102b25780601f10610289576101008083540402835291602001916102b2565b820191905f5260205f20905b81548152906001019060200180831161029557829003601f168201915b5050505050905090565b5f336102c981858561072e565b60019150505b92915050565b5f336102e2858285610740565b6102ed8585856107bb565b506001949350505050565b5f610301610818565b905090565b6001600160a01b0381165f908152600760205260408120546102cf565b5f6060805f805f6060610334610941565b61033c61096e565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461023b9061108d565b5f336102c98185856107bb565b834211156103aa5760405163313c898160e11b8152600481018590526024015b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886103f58c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f61044f8261099b565b90505f61045e828787876109c7565b9050896001600160a01b0316816001600160a01b0316146104a5576040516325c0072360e11b81526001600160a01b0380831660048301528b1660248201526044016103a1565b6104b08a8a8a61072e565b50505050505050505050565b73__$acbfb1c35000d78352310b16a054a6b106$__63e8c2cb166104de61022c565b6040518263ffffffff1660e01b81526004016104fa91906110c5565b602060405180830381865af4158015610515573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105399190611138565b5073__$acbfb1c35000d78352310b16a054a6b106$__63e8c2cb1661055c610365565b6040518263ffffffff1660e01b81526004016105789190611157565b602060405180830381865af4158015610593573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105b79190611138565b5073__$acbfb1c35000d78352310b16a054a6b106$__63abcd796060126040516001600160e01b031960e084901b16815260ff90911660048201526012602482015260606044820152601c60648201527f746f6b656e20646563696d616c7320646964206e6f74206d6174636800000000608482015260a401602060405180830381865af415801561064b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061066f9190611138565b5073__$acbfb1c35000d78352310b16a054a6b106$__63abcd796061069360025490565b6040516001600160e01b031960e084901b16815260048101919091525f602482015260606044820152601b60648201527f746f6b656e20737570706c792073686f756c64206265207a65726f0000000000608482015260a401602060405180830381865af4158015610707573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061072b9190611138565b50565b61073b83838360016109f3565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f1981146107b557818110156107a757604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016103a1565b6107b584848484035f6109f3565b50505050565b6001600160a01b0383166107e457604051634b637e8f60e11b81525f60048201526024016103a1565b6001600160a01b03821661080d5760405163ec442f0560e01b81525f60048201526024016103a1565b61073b838383610ac5565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561087057507f000000000000000000000000000000000000000000000000000000000000000046145b1561089a57507f000000000000000000000000000000000000000000000000000000000000000090565b610301604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60606103017f00000000000000000000000000000000000000000000000000000000000000006005610beb565b60606103017f00000000000000000000000000000000000000000000000000000000000000006006610beb565b5f6102cf6109a7610818565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f806109d788888888610c94565b9250925092506109e78282610d5c565b50909695505050505050565b6001600160a01b038416610a1c5760405163e602df0560e01b81525f60048201526024016103a1565b6001600160a01b038316610a4557604051634a1406b160e11b81525f60048201526024016103a1565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156107b557826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610ab791815260200190565b60405180910390a350505050565b6001600160a01b038316610aef578060025f828254610ae491906111c6565b90915550610b5f9050565b6001600160a01b0383165f9081526020819052604090205481811015610b415760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016103a1565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610b7b57600280548290039055610b99565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610bde91815260200190565b60405180910390a3505050565b606060ff8314610c0557610bfe83610e18565b90506102cf565b818054610c119061108d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3d9061108d565b8015610c885780601f10610c5f57610100808354040283529160200191610c88565b820191905f5260205f20905b815481529060010190602001808311610c6b57829003601f168201915b505050505090506102cf565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610ccd57505f91506003905082610d52565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610d1e573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116610d4957505f925060019150829050610d52565b92505f91508190505b9450945094915050565b5f826003811115610d6f57610d6f6111e5565b03610d78575050565b6001826003811115610d8c57610d8c6111e5565b03610daa5760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610dbe57610dbe6111e5565b03610ddf5760405163fce698f760e01b8152600481018290526024016103a1565b6003826003811115610df357610df36111e5565b03610e14576040516335e2f38360e21b8152600481018290526024016103a1565b5050565b60605f610e2483610e55565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f60ff8216601f8111156102cf57604051632cd44ac360e21b815260040160405180910390fd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610ebc6020830184610e7c565b9392505050565b80356001600160a01b0381168114610ed9575f80fd5b919050565b5f8060408385031215610eef575f80fd5b610ef883610ec3565b946020939093013593505050565b5f805f60608486031215610f18575f80fd5b610f2184610ec3565b9250610f2f60208501610ec3565b929592945050506040919091013590565b5f60208284031215610f50575f80fd5b610ebc82610ec3565b60ff60f81b8816815260e060208201525f610f7760e0830189610e7c565b8281036040840152610f898189610e7c565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015610fde578351835260209384019390920191600101610fc0565b50909b9a5050505050505050505050565b5f805f805f805f60e0888a031215611005575f80fd5b61100e88610ec3565b965061101c60208901610ec3565b95506040880135945060608801359350608088013560ff8116811461103f575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f806040838503121561106d575f80fd5b61107683610ec3565b915061108460208401610ec3565b90509250929050565b600181811c908216806110a157607f821691505b6020821081036110bf57634e487b7160e01b5f52602260045260245ffd5b50919050565b606081525f6110d76060830184610e7c565b828103806020850152600782526626bcaa37b5b2b760c91b602083015260408101604085015250601860408201527f746f6b656e206e616d6520646964206e6f74206d61746368000000000000000060608201526080810191505092915050565b5f60208284031215611148575f80fd5b81518015158114610ebc575f80fd5b606081525f6111696060830184610e7c565b82810380602085015260038252624d544b60e81b602083015260408101604085015250601a60408201527f746f6b656e2073796d626f6c20646964206e6f74206d6174636800000000000060608201526080810191505092915050565b808201808211156102cf57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52602160045260245ffdfea264697066735822122005029262ab186c02398c42756937359f41187346e05656b76aaf32761460bc6464736f6c634300081a0033",
		"opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x26BCAA37B5B2B7 PUSH1 0xC9 SHL DUP2 MSTORE POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x26BCAA37B5B2B7 PUSH1 0xC9 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4D544B PUSH1 0xE8 SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x26E JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0xA4 DUP3 DUP3 PUSH2 0x26E JUMP JUMPDEST POP PUSH2 0xB4 SWAP2 POP DUP4 SWAP1 POP PUSH1 0x5 PUSH2 0x15E JUMP JUMPDEST PUSH2 0x120 MSTORE PUSH2 0xC3 DUP2 PUSH1 0x6 PUSH2 0x15E JUMP JUMPDEST PUSH2 0x140 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xE0 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x100 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH2 0x14F PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE POP PUSH2 0x380 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x179 JUMPI PUSH2 0x172 DUP4 PUSH2 0x190 JUMP JUMPDEST SWAP1 POP PUSH2 0x18A JUMP JUMPDEST DUP2 PUSH2 0x184 DUP5 DUP3 PUSH2 0x26E JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x1C3 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x328 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1CE DUP3 PUSH2 0x35D JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1FE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x21C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x269 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x247 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x266 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x253 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x287 JUMPI PUSH2 0x287 PUSH2 0x1D6 JUMP JUMPDEST PUSH2 0x29B DUP2 PUSH2 0x295 DUP5 SLOAD PUSH2 0x1EA JUMP JUMPDEST DUP5 PUSH2 0x222 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2CD JUMPI PUSH0 DUP4 ISZERO PUSH2 0x2B6 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x266 JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2FC JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x2DC JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0x319 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x21C JUMPI PUSH0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x122F PUSH2 0x3D1 PUSH0 CODECOPY PUSH0 PUSH2 0x975 ADD MSTORE PUSH0 PUSH2 0x948 ADD MSTORE PUSH0 PUSH2 0x8F1 ADD MSTORE PUSH0 PUSH2 0x8C9 ADD MSTORE PUSH0 PUSH2 0x824 ADD MSTORE PUSH0 PUSH2 0x84E ADD MSTORE PUSH0 PUSH2 0x878 ADD MSTORE PUSH2 0x122F PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE5 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0x88 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x63 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1C4 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xDC881D1C EQ PUSH2 0x1EC JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1F4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1BC JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x166 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xE9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x12A JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF1 PUSH2 0x22C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFE SWAP2 SWAP1 PUSH2 0xEAA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11A PUSH2 0x115 CALLDATASIZE PUSH1 0x4 PUSH2 0xEDE JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH2 0x11A PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0xF06 JUMP JUMPDEST PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH2 0x12E PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x12E PUSH2 0x174 CALLDATASIZE PUSH1 0x4 PUSH2 0xF40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x12E PUSH2 0x19C CALLDATASIZE PUSH1 0x4 PUSH2 0xF40 JUMP JUMPDEST PUSH2 0x306 JUMP JUMPDEST PUSH2 0x1A9 PUSH2 0x323 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFE SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF59 JUMP JUMPDEST PUSH2 0xF1 PUSH2 0x365 JUMP JUMPDEST PUSH2 0x11A PUSH2 0x1D2 CALLDATASIZE PUSH1 0x4 PUSH2 0xEDE JUMP JUMPDEST PUSH2 0x374 JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0xFEF JUMP JUMPDEST PUSH2 0x381 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EA PUSH2 0x4BC JUMP JUMPDEST PUSH2 0x12E PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0x105C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x23B SWAP1 PUSH2 0x108D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x267 SWAP1 PUSH2 0x108D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2B2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x289 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2B2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x295 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2C9 DUP2 DUP6 DUP6 PUSH2 0x72E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2E2 DUP6 DUP3 DUP6 PUSH2 0x740 JUMP JUMPDEST PUSH2 0x2ED DUP6 DUP6 DUP6 PUSH2 0x7BB JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x301 PUSH2 0x818 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x2CF JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x334 PUSH2 0x941 JUMP JUMPDEST PUSH2 0x33C PUSH2 0x96E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x23B SWAP1 PUSH2 0x108D JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2C9 DUP2 DUP6 DUP6 PUSH2 0x7BB JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x3AA JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x3F5 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x44F DUP3 PUSH2 0x99B JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x45E DUP3 DUP8 DUP8 DUP8 PUSH2 0x9C7 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH2 0x4B0 DUP11 DUP11 DUP11 PUSH2 0x72E JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0x0 PUSH4 0xE8C2CB16 PUSH2 0x4DE PUSH2 0x22C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FA SWAP2 SWAP1 PUSH2 0x10C5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x515 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x539 SWAP2 SWAP1 PUSH2 0x1138 JUMP JUMPDEST POP PUSH20 0x0 PUSH4 0xE8C2CB16 PUSH2 0x55C PUSH2 0x365 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x578 SWAP2 SWAP1 PUSH2 0x1157 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x593 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5B7 SWAP2 SWAP1 PUSH2 0x1138 JUMP JUMPDEST POP PUSH20 0x0 PUSH4 0xABCD7960 PUSH1 0x12 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0xFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x746F6B656E20646563696D616C7320646964206E6F74206D6174636800000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x64B JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x66F SWAP2 SWAP1 PUSH2 0x1138 JUMP JUMPDEST POP PUSH20 0x0 PUSH4 0xABCD7960 PUSH2 0x693 PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH0 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x746F6B656E20737570706C792073686F756C64206265207A65726F0000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x707 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x72B SWAP2 SWAP1 PUSH2 0x1138 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x73B DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x9F3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0x7B5 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH2 0x7B5 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x9F3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x7E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x80D JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH2 0x73B DUP4 DUP4 DUP4 PUSH2 0xAC5 JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x870 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x89A JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x301 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x301 PUSH32 0x0 PUSH1 0x5 PUSH2 0xBEB JUMP JUMPDEST PUSH1 0x60 PUSH2 0x301 PUSH32 0x0 PUSH1 0x6 PUSH2 0xBEB JUMP JUMPDEST PUSH0 PUSH2 0x2CF PUSH2 0x9A7 PUSH2 0x818 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x9D7 DUP9 DUP9 DUP9 DUP9 PUSH2 0xC94 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x9E7 DUP3 DUP3 PUSH2 0xD5C JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xA1C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xA45 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x7B5 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xAB7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xAEF JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xAE4 SWAP2 SWAP1 PUSH2 0x11C6 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xB5F SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xB41 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB7B JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xB99 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xBDE SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xC05 JUMPI PUSH2 0xBFE DUP4 PUSH2 0xE18 JUMP JUMPDEST SWAP1 POP PUSH2 0x2CF JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xC11 SWAP1 PUSH2 0x108D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC3D SWAP1 PUSH2 0x108D JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC88 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC5F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC88 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC6B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2CF JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xCCD JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xD52 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD1E JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xD49 JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xD52 JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD6F JUMPI PUSH2 0xD6F PUSH2 0x11E5 JUMP JUMPDEST SUB PUSH2 0xD78 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD8C JUMPI PUSH2 0xD8C PUSH2 0x11E5 JUMP JUMPDEST SUB PUSH2 0xDAA JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xDBE JUMPI PUSH2 0xDBE PUSH2 0x11E5 JUMP JUMPDEST SUB PUSH2 0xDDF JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xDF3 JUMPI PUSH2 0xDF3 PUSH2 0x11E5 JUMP JUMPDEST SUB PUSH2 0xE14 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3A1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xE24 DUP4 PUSH2 0xE55 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x2CF JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xEBC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xE7C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xED9 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEEF JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xEF8 DUP4 PUSH2 0xEC3 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xF18 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF21 DUP5 PUSH2 0xEC3 JUMP JUMPDEST SWAP3 POP PUSH2 0xF2F PUSH1 0x20 DUP6 ADD PUSH2 0xEC3 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF50 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xEBC DUP3 PUSH2 0xEC3 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xF77 PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0xE7C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xF89 DUP2 DUP10 PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFDE JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xFC0 JUMP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1005 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x100E DUP9 PUSH2 0xEC3 JUMP JUMPDEST SWAP7 POP PUSH2 0x101C PUSH1 0x20 DUP10 ADD PUSH2 0xEC3 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x103F JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x106D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1076 DUP4 PUSH2 0xEC3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1084 PUSH1 0x20 DUP5 ADD PUSH2 0xEC3 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x10A1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x10BF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH0 PUSH2 0x10D7 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xE7C JUMP JUMPDEST DUP3 DUP2 SUB DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x7 DUP3 MSTORE PUSH7 0x26BCAA37B5B2B7 PUSH1 0xC9 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 DUP6 ADD MSTORE POP PUSH1 0x18 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x746F6B656E206E616D6520646964206E6F74206D617463680000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1148 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xEBC JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH0 PUSH2 0x1169 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xE7C JUMP JUMPDEST DUP3 DUP2 SUB DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x3 DUP3 MSTORE PUSH3 0x4D544B PUSH1 0xE8 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 DUP6 ADD MSTORE POP PUSH1 0x1A PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x746F6B656E2073796D626F6C20646964206E6F74206D61746368000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2CF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV MUL SWAP3 PUSH3 0xAB186C MUL CODECOPY DUP13 TIMESTAMP PUSH22 0x6937359F41187346E05656B76AAF32761460BC646473 PUSH16 0x6C634300081A00330000000000000000 ",
		"sourceMap": "131:368:19:-:0;;;;;;;;;;;;;1574:52:4;;;;;;;;;;;;;-1:-1:-1;;;1574:52:4;;;1613:4;3328:431:13;;;;;;;;;;;;;-1:-1:-1;;;3328:431:13;;;1896:113:2;;;;;;;;;;;;;-1:-1:-1;;;1896:113:2;;;;;;;;;;;;;;;;-1:-1:-1;;;1896:113:2;;;1970:5;1962;:13;;;;;;:::i;:::-;-1:-1:-1;1985:7:2;:17;1995:7;1985;:17;:::i;:::-;-1:-1:-1;3401:45:13;;-1:-1:-1;3401:4:13;;-1:-1:-1;3432:13:13;3401:30;:45::i;:::-;3393:53;;3467:51;:7;3501:16;3467:33;:51::i;:::-;3456:62;;3542:22;;;;;;;;;;3528:36;;3591:25;;;;;;3574:42;;3644:13;3627:30;;3692:23;4226:11;;4239:14;;4204:80;;;2079:95;4204:80;;;2914:25:20;2955:18;;;2948:34;;;;2998:18;;;2991:34;4255:13:13;3041:18:20;;;3034:34;4278:4:13;3084:19:20;;;3077:61;4168:7:13;;2886:19:20;;4204:80:13;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;3692:23;3667:48;;-1:-1:-1;;3747:4:13;3725:27;;-1:-1:-1;131:368:19;;2914:340:9;3010:11;3059:2;3043:5;3037:19;:24;3033:215;;;3084:20;3098:5;3084:13;:20::i;:::-;3077:27;;;;3033:215;3161:5;3135:46;3176:5;3161;3135:46;:::i;:::-;-1:-1:-1;1390:66:9;;-1:-1:-1;3033:215:9;2914:340;;;;:::o;1708:286::-;1773:11;1796:17;1822:3;1796:30;;1854:2;1840:4;:11;:16;1836:72;;;1893:3;1879:18;;-1:-1:-1;;;1879:18:9;;;;;;;;:::i;:::-;;;;;;;;1836:72;1974:11;;1957:13;1974:4;1957:13;:::i;:::-;1949:36;;1708:286;-1:-1:-1;;;1708:286:9:o;14:127:20:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:518::-;759:2;754:3;751:11;748:421;;;795:5;792:1;785:16;839:4;836:1;826:18;909:2;897:10;893:19;890:1;886:27;880:4;876:38;945:4;933:10;930:20;927:47;;;-1:-1:-1;968:4:20;927:47;1023:2;1018:3;1014:12;1011:1;1007:20;1001:4;997:31;987:41;;1078:81;1096:2;1089:5;1086:13;1078:81;;;1155:1;1141:16;;1122:1;1111:13;1078:81;;;1082:3;;748:421;657:518;;;:::o;1351:1299::-;1471:10;;-1:-1:-1;;;;;1493:30:20;;1490:56;;;1526:18;;:::i;:::-;1555:97;1645:6;1605:38;1637:4;1631:11;1605:38;:::i;:::-;1599:4;1555:97;:::i;:::-;1701:4;1732:2;1721:14;;1749:1;1744:649;;;;2437:1;2454:6;2451:89;;;-1:-1:-1;2506:19:20;;;2500:26;2451:89;-1:-1:-1;;1308:1:20;1304:11;;;1300:24;1296:29;1286:40;1332:1;1328:11;;;1283:57;2553:81;;1714:930;;1744:649;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1780:20:20;;;1898:222;1912:7;1909:1;1906:14;1898:222;;;1994:19;;;1988:26;1973:42;;2101:4;2086:20;;;;2054:1;2042:14;;;;1928:12;1898:222;;;1902:3;2148:6;2139:7;2136:19;2133:201;;;2209:19;;;2203:26;-1:-1:-1;;2292:1:20;2288:14;;;2304:3;2284:24;2280:37;2276:42;2261:58;2246:74;;2133:201;-1:-1:-1;;;;2380:1:20;2364:14;;;2360:22;2347:36;;-1:-1:-1;1351:1299:20:o;3149:418::-;3298:2;3287:9;3280:21;3261:4;3330:6;3324:13;3373:6;3368:2;3357:9;3353:18;3346:34;3432:6;3427:2;3419:6;3415:15;3410:2;3399:9;3395:18;3389:50;3488:1;3483:2;3474:6;3463:9;3459:22;3455:31;3448:42;3558:2;3551;3547:7;3542:2;3534:6;3530:15;3526:29;3515:9;3511:45;3507:54;3499:62;;;3149:418;;;;:::o;3572:297::-;3690:12;;3737:4;3726:16;;;3720:23;;3690:12;3755:16;;3752:111;;;-1:-1:-1;;3829:4:20;3825:17;;;;3822:1;3818:25;3814:38;3803:50;;3572:297;-1:-1:-1;3572:297:20:o;:::-;131:368:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
	},
	"abi": [
		{
			"inputs": [],
			"name": "ECDSAInvalidSignature",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "length",
					"type": "uint256"
				}
			],
			"name": "ECDSAInvalidSignatureLength",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "s",
					"type": "bytes32"
				}
			],
			"name": "ECDSAInvalidSignatureS",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "allowance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientAllowance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "balance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientBalance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "approver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidApprover",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "receiver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidReceiver",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSpender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "deadline",
					"type": "uint256"
				}
			],
			"name": "ERC2612ExpiredSignature",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "signer",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "ERC2612InvalidSigner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "currentNonce",
					"type": "uint256"
				}
			],
			"name": "InvalidAccountNonce",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "InvalidShortString",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "str",
					"type": "string"
				}
			],
			"name": "StringTooLong",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [],
			"name": "EIP712DomainChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "DOMAIN_SEPARATOR",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "allowance",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "decimals",
			"outputs": [
				{
					"internalType": "uint8",
					"name": "",
					"type": "uint8"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "eip712Domain",
			"outputs": [
				{
					"internalType": "bytes1",
					"name": "fields",
					"type": "bytes1"
				},
				{
					"internalType": "string",
					"name": "name",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "version",
					"type": "string"
				},
				{
					"internalType": "uint256",
					"name": "chainId",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "verifyingContract",
					"type": "address"
				},
				{
					"internalType": "bytes32",
					"name": "salt",
					"type": "bytes32"
				},
				{
					"internalType": "uint256[]",
					"name": "extensions",
					"type": "uint256[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "nonces",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "deadline",
					"type": "uint256"
				},
				{
					"internalType": "uint8",
					"name": "v",
					"type": "uint8"
				},
				{
					"internalType": "bytes32",
					"name": "r",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "s",
					"type": "bytes32"
				}
			],
			"name": "permit",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "testTokenInitialValues",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "totalSupply",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transfer",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 184,
				"contract": "tests/MyToken_test.sol:MyTokenTest",
				"label": "_balances",
				"offset": 0,
				"slot": "0",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 190,
				"contract": "tests/MyToken_test.sol:MyTokenTest",
				"label": "_allowances",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
			},
			{
				"astId": 192,
				"contract": "tests/MyToken_test.sol:MyTokenTest",
				"label": "_totalSupply",
				"offset": 0,
				"slot": "2",
				"type": "t_uint256"
			},
			{
				"astId": 194,
				"contract": "tests/MyToken_test.sol:MyTokenTest",
				"label": "_name",
				"offset": 0,
				"slot": "3",
				"type": "t_string_storage"
			},
			{
				"astId": 196,
				"contract": "tests/MyToken_test.sol:MyTokenTest",
				"label": "_symbol",
				"offset": 0,
				"slot": "4",
				"type": "t_string_storage"
			},
			{
				"astId": 2035,
				"contract": "tests/MyToken_test.sol:MyTokenTest",
				"label": "_nameFallback",
				"offset": 0,
				"slot": "5",
				"type": "t_string_storage"
			},
			{
				"astId": 2037,
				"contract": "tests/MyToken_test.sol:MyTokenTest",
				"label": "_versionFallback",
				"offset": 0,
				"slot": "6",
				"type": "t_string_storage"
			},
			{
				"astId": 1014,
				"contract": "tests/MyToken_test.sol:MyTokenTest",
				"label": "_nonces",
				"offset": 0,
				"slot": "7",
				"type": "t_mapping(t_address,t_uint256)"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => mapping(address => uint256))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_uint256)"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	},
	"web3Deploy": "var mytokentestContract = new web3.eth.Contract([{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testTokenInitialValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]);\nvar mytokentest = mytokentestContract.deploy({\n     data: '0x610160604052348015610010575f80fd5b506040518060400160405280600781526020016626bcaa37b5b2b760c91b81525080604051806040016040528060018152602001603160f81b8152506040518060400160405280600781526020016626bcaa37b5b2b760c91b815250604051806040016040528060038152602001624d544b60e81b8152508160039081610097919061026e565b5060046100a4828261026e565b506100b49150839050600561015e565b610120526100c381600661015e565b61014052815160208084019190912060e052815190820120610100524660a05261014f60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c05250610380565b5f6020835110156101795761017283610190565b905061018a565b81610184848261026e565b5060ff90505b92915050565b5f80829050601f815111156101c3578260405163305a27a960e01b81526004016101ba9190610328565b60405180910390fd5b80516101ce8261035d565b179392505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806101fe57607f821691505b60208210810361021c57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561026957805f5260205f20601f840160051c810160208510156102475750805b601f840160051c820191505b81811015610266575f8155600101610253565b50505b505050565b81516001600160401b03811115610287576102876101d6565b61029b8161029584546101ea565b84610222565b6020601f8211600181146102cd575f83156102b65750848201515b5f19600385901b1c1916600184901b178455610266565b5f84815260208120601f198516915b828110156102fc57878501518255602094850194600190920191016102dc565b508482101561031957868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b8051602080830151919081101561021c575f1960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161122f6103d15f395f61097501525f61094801525f6108f101525f6108c901525f61082401525f61084e01525f610878015261122f5ff3fe608060405234801561000f575f80fd5b50600436106100e5575f3560e01c80637ecebe0011610088578063a9059cbb11610063578063a9059cbb146101c4578063d505accf146101d7578063dc881d1c146101ec578063dd62ed3e146101f4575f80fd5b80637ecebe001461018e57806384b0196e146101a157806395d89b41146101bc575f80fd5b806323b872dd116100c357806323b872dd1461013c578063313ce5671461014f5780633644e5151461015e57806370a0823114610166575f80fd5b806306fdde03146100e9578063095ea7b31461010757806318160ddd1461012a575b5f80fd5b6100f161022c565b6040516100fe9190610eaa565b60405180910390f35b61011a610115366004610ede565b6102bc565b60405190151581526020016100fe565b6002545b6040519081526020016100fe565b61011a61014a366004610f06565b6102d5565b604051601281526020016100fe565b61012e6102f8565b61012e610174366004610f40565b6001600160a01b03165f9081526020819052604090205490565b61012e61019c366004610f40565b610306565b6101a9610323565b6040516100fe9796959493929190610f59565b6100f1610365565b61011a6101d2366004610ede565b610374565b6101ea6101e5366004610fef565b610381565b005b6101ea6104bc565b61012e61020236600461105c565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b60606003805461023b9061108d565b80601f01602080910402602001604051908101604052809291908181526020018280546102679061108d565b80156102b25780601f10610289576101008083540402835291602001916102b2565b820191905f5260205f20905b81548152906001019060200180831161029557829003601f168201915b5050505050905090565b5f336102c981858561072e565b60019150505b92915050565b5f336102e2858285610740565b6102ed8585856107bb565b506001949350505050565b5f610301610818565b905090565b6001600160a01b0381165f908152600760205260408120546102cf565b5f6060805f805f6060610334610941565b61033c61096e565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461023b9061108d565b5f336102c98185856107bb565b834211156103aa5760405163313c898160e11b8152600481018590526024015b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886103f58c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f61044f8261099b565b90505f61045e828787876109c7565b9050896001600160a01b0316816001600160a01b0316146104a5576040516325c0072360e11b81526001600160a01b0380831660048301528b1660248201526044016103a1565b6104b08a8a8a61072e565b50505050505050505050565b73__$acbfb1c35000d78352310b16a054a6b106$__63e8c2cb166104de61022c565b6040518263ffffffff1660e01b81526004016104fa91906110c5565b602060405180830381865af4158015610515573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105399190611138565b5073__$acbfb1c35000d78352310b16a054a6b106$__63e8c2cb1661055c610365565b6040518263ffffffff1660e01b81526004016105789190611157565b602060405180830381865af4158015610593573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105b79190611138565b5073__$acbfb1c35000d78352310b16a054a6b106$__63abcd796060126040516001600160e01b031960e084901b16815260ff90911660048201526012602482015260606044820152601c60648201527f746f6b656e20646563696d616c7320646964206e6f74206d6174636800000000608482015260a401602060405180830381865af415801561064b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061066f9190611138565b5073__$acbfb1c35000d78352310b16a054a6b106$__63abcd796061069360025490565b6040516001600160e01b031960e084901b16815260048101919091525f602482015260606044820152601b60648201527f746f6b656e20737570706c792073686f756c64206265207a65726f0000000000608482015260a401602060405180830381865af4158015610707573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061072b9190611138565b50565b61073b83838360016109f3565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f1981146107b557818110156107a757604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016103a1565b6107b584848484035f6109f3565b50505050565b6001600160a01b0383166107e457604051634b637e8f60e11b81525f60048201526024016103a1565b6001600160a01b03821661080d5760405163ec442f0560e01b81525f60048201526024016103a1565b61073b838383610ac5565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561087057507f000000000000000000000000000000000000000000000000000000000000000046145b1561089a57507f000000000000000000000000000000000000000000000000000000000000000090565b610301604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60606103017f00000000000000000000000000000000000000000000000000000000000000006005610beb565b60606103017f00000000000000000000000000000000000000000000000000000000000000006006610beb565b5f6102cf6109a7610818565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f806109d788888888610c94565b9250925092506109e78282610d5c565b50909695505050505050565b6001600160a01b038416610a1c5760405163e602df0560e01b81525f60048201526024016103a1565b6001600160a01b038316610a4557604051634a1406b160e11b81525f60048201526024016103a1565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156107b557826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610ab791815260200190565b60405180910390a350505050565b6001600160a01b038316610aef578060025f828254610ae491906111c6565b90915550610b5f9050565b6001600160a01b0383165f9081526020819052604090205481811015610b415760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016103a1565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610b7b57600280548290039055610b99565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610bde91815260200190565b60405180910390a3505050565b606060ff8314610c0557610bfe83610e18565b90506102cf565b818054610c119061108d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3d9061108d565b8015610c885780601f10610c5f57610100808354040283529160200191610c88565b820191905f5260205f20905b815481529060010190602001808311610c6b57829003601f168201915b505050505090506102cf565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610ccd57505f91506003905082610d52565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610d1e573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116610d4957505f925060019150829050610d52565b92505f91508190505b9450945094915050565b5f826003811115610d6f57610d6f6111e5565b03610d78575050565b6001826003811115610d8c57610d8c6111e5565b03610daa5760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610dbe57610dbe6111e5565b03610ddf5760405163fce698f760e01b8152600481018290526024016103a1565b6003826003811115610df357610df36111e5565b03610e14576040516335e2f38360e21b8152600481018290526024016103a1565b5050565b60605f610e2483610e55565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f60ff8216601f8111156102cf57604051632cd44ac360e21b815260040160405180910390fd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610ebc6020830184610e7c565b9392505050565b80356001600160a01b0381168114610ed9575f80fd5b919050565b5f8060408385031215610eef575f80fd5b610ef883610ec3565b946020939093013593505050565b5f805f60608486031215610f18575f80fd5b610f2184610ec3565b9250610f2f60208501610ec3565b929592945050506040919091013590565b5f60208284031215610f50575f80fd5b610ebc82610ec3565b60ff60f81b8816815260e060208201525f610f7760e0830189610e7c565b8281036040840152610f898189610e7c565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015610fde578351835260209384019390920191600101610fc0565b50909b9a5050505050505050505050565b5f805f805f805f60e0888a031215611005575f80fd5b61100e88610ec3565b965061101c60208901610ec3565b95506040880135945060608801359350608088013560ff8116811461103f575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f806040838503121561106d575f80fd5b61107683610ec3565b915061108460208401610ec3565b90509250929050565b600181811c908216806110a157607f821691505b6020821081036110bf57634e487b7160e01b5f52602260045260245ffd5b50919050565b606081525f6110d76060830184610e7c565b828103806020850152600782526626bcaa37b5b2b760c91b602083015260408101604085015250601860408201527f746f6b656e206e616d6520646964206e6f74206d61746368000000000000000060608201526080810191505092915050565b5f60208284031215611148575f80fd5b81518015158114610ebc575f80fd5b606081525f6111696060830184610e7c565b82810380602085015260038252624d544b60e81b602083015260408101604085015250601a60408201527f746f6b656e2073796d626f6c20646964206e6f74206d6174636800000000000060608201526080810191505092915050565b808201808211156102cf57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52602160045260245ffdfea264697066735822122005029262ab186c02398c42756937359f41187346e05656b76aaf32761460bc6464736f6c634300081a0033', \n     arguments: [\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"3644e515": "DOMAIN_SEPARATOR()",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"313ce567": "decimals()",
		"84b0196e": "eip712Domain()",
		"06fdde03": "name()",
		"7ecebe00": "nonces(address)",
		"d505accf": "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
		"95d89b41": "symbol()",
		"dc881d1c": "testTokenInitialValues()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "931000",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"DOMAIN_SEPARATOR()": "infinite",
			"allowance(address,address)": "infinite",
			"approve(address,uint256)": "24758",
			"balanceOf(address)": "2626",
			"decimals()": "221",
			"eip712Domain()": "infinite",
			"name()": "infinite",
			"nonces(address)": "2591",
			"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
			"symbol()": "infinite",
			"testTokenInitialValues()": "infinite",
			"totalSupply()": "2348",
			"transfer(address,uint256)": "51238",
			"transferFrom(address,address,uint256)": "infinite"
		}
	},
	"devdoc": {
		"errors": {
			"ECDSAInvalidSignature()": [
				{
					"details": "The signature derives the `address(0)`."
				}
			],
			"ECDSAInvalidSignatureLength(uint256)": [
				{
					"details": "The signature has an invalid length."
				}
			],
			"ECDSAInvalidSignatureS(bytes32)": [
				{
					"details": "The signature has an S value that is in the upper half order."
				}
			],
			"ERC20InsufficientAllowance(address,uint256,uint256)": [
				{
					"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
					"params": {
						"allowance": "Amount of tokens a `spender` is allowed to operate with.",
						"needed": "Minimum amount required to perform a transfer.",
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC20InsufficientBalance(address,uint256,uint256)": [
				{
					"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
					"params": {
						"balance": "Current balance for the interacting account.",
						"needed": "Minimum amount required to perform a transfer.",
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidApprover(address)": [
				{
					"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
					"params": {
						"approver": "Address initiating an approval operation."
					}
				}
			],
			"ERC20InvalidReceiver(address)": [
				{
					"details": "Indicates a failure with the token `receiver`. Used in transfers.",
					"params": {
						"receiver": "Address to which tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSender(address)": [
				{
					"details": "Indicates a failure with the token `sender`. Used in transfers.",
					"params": {
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSpender(address)": [
				{
					"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
					"params": {
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC2612ExpiredSignature(uint256)": [
				{
					"details": "Permit deadline has expired."
				}
			],
			"ERC2612InvalidSigner(address,address)": [
				{
					"details": "Mismatched signature."
				}
			],
			"InvalidAccountNonce(address,uint256)": [
				{
					"details": "The nonce used for an `account` is not the expected current nonce."
				}
			]
		},
		"events": {
			"Approval(address,address,uint256)": {
				"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
			},
			"EIP712DomainChanged()": {
				"details": "MAY be emitted to signal that the domain could have changed."
			},
			"Transfer(address,address,uint256)": {
				"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
			}
		},
		"kind": "dev",
		"methods": {
			"DOMAIN_SEPARATOR()": {
				"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
			},
			"allowance(address,address)": {
				"details": "See {IERC20-allowance}."
			},
			"approve(address,uint256)": {
				"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
			},
			"balanceOf(address)": {
				"details": "See {IERC20-balanceOf}."
			},
			"decimals()": {
				"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
			},
			"eip712Domain()": {
				"details": "See {IERC-5267}."
			},
			"name()": {
				"details": "Returns the name of the token."
			},
			"nonces(address)": {
				"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
			},
			"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
				"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
			},
			"symbol()": {
				"details": "Returns the symbol of the token, usually a shorter version of the name."
			},
			"totalSupply()": {
				"details": "See {IERC20-totalSupply}."
			},
			"transfer(address,uint256)": {
				"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
			},
			"transferFrom(address,address,uint256)": {
				"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@DOMAIN_SEPARATOR_907": {
				"entryPoint": 760,
				"id": 907,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_EIP712Name_2212": {
				"entryPoint": 2369,
				"id": 2212,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_EIP712Version_2224": {
				"entryPoint": 2414,
				"id": 2224,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_approve_567": {
				"entryPoint": 1838,
				"id": 567,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_approve_627": {
				"entryPoint": 2547,
				"id": 627,
				"parameterSlots": 4,
				"returnSlots": 0
			},
			"@_buildDomainSeparator_2142": {
				"entryPoint": null,
				"id": 2142,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_domainSeparatorV4_2121": {
				"entryPoint": 2072,
				"id": 2121,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_hashTypedDataV4_2158": {
				"entryPoint": 2459,
				"id": 2158,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_msgSender_982": {
				"entryPoint": null,
				"id": 982,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_spendAllowance_675": {
				"entryPoint": 1856,
				"id": 675,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_throwError_1997": {
				"entryPoint": 3420,
				"id": 1997,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_transfer_406": {
				"entryPoint": 1979,
				"id": 406,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_update_483": {
				"entryPoint": 2757,
				"id": 483,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_useNonce_1042": {
				"entryPoint": null,
				"id": 1042,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@allowance_303": {
				"entryPoint": null,
				"id": 303,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@approve_327": {
				"entryPoint": 700,
				"id": 327,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@balanceOf_262": {
				"entryPoint": null,
				"id": 262,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@byteLength_1186": {
				"entryPoint": 3669,
				"id": 1186,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@decimals_240": {
				"entryPoint": null,
				"id": 240,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@eip712Domain_2200": {
				"entryPoint": 803,
				"id": 2200,
				"parameterSlots": 0,
				"returnSlots": 7
			},
			"@name_222": {
				"entryPoint": 556,
				"id": 222,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@nonces_1027": {
				"entryPoint": null,
				"id": 1027,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@nonces_897": {
				"entryPoint": 774,
				"id": 897,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@permit_880": {
				"entryPoint": 897,
				"id": 880,
				"parameterSlots": 7,
				"returnSlots": 0
			},
			"@recover_1948": {
				"entryPoint": 2503,
				"id": 1948,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"@symbol_231": {
				"entryPoint": 869,
				"id": 231,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@testTokenInitialValues_4275": {
				"entryPoint": 1212,
				"id": 4275,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@toStringWithFallback_1253": {
				"entryPoint": 3051,
				"id": 1253,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@toString_1154": {
				"entryPoint": 3608,
				"id": 1154,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toTypedDataHash_2298": {
				"entryPoint": null,
				"id": 2298,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@totalSupply_249": {
				"entryPoint": null,
				"id": 249,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@transferFrom_359": {
				"entryPoint": 725,
				"id": 359,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"@transfer_286": {
				"entryPoint": 884,
				"id": 286,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@tryRecover_1912": {
				"entryPoint": 3220,
				"id": 1912,
				"parameterSlots": 4,
				"returnSlots": 3
			},
			"abi_decode_address": {
				"entryPoint": 3779,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 3904,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_addresst_address": {
				"entryPoint": 4188,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_addresst_uint256": {
				"entryPoint": 3846,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
				"entryPoint": 4079,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 7
			},
			"abi_decode_tuple_t_addresst_uint256": {
				"entryPoint": 3806,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_bool_fromMemory": {
				"entryPoint": 4408,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_string": {
				"entryPoint": 3708,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
				"entryPoint": 3929,
				"id": null,
				"parameterSlots": 8,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 7,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 6,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 5,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 3754,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_245c734e6d4ec044daf7beffa09d54d4bafba490113c199734d790b04a7390e5_t_stringliteral_ded2ee270d71437b5f0a954775141c9e9df919b36f4fe17a99e646e4c3c69936__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_library_reversed": {
				"entryPoint": 4293,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_793539e36336d70961c91bdb898dff4b065dbb5ef5ac709025f5b68be91dd01e_t_stringliteral_f575216461f54c2e041738e8b8d199f72eb6be1f077174aaf571aabf6568860d__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_library_reversed": {
				"entryPoint": 4439,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_rational_0_by_1_t_stringliteral_a98e435fde1199fec7a064784ca2092c0021045372b1dc1d6a10798084e7f064__to_t_uint256_t_uint256_t_string_memory_ptr__fromStack_library_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint8_t_rational_18_by_1_t_stringliteral_c6f4430b79e8d4db307de93d9b3001c93510a47801d19fe2afbd5ece5099d644__to_t_uint256_t_uint256_t_string_memory_ptr__fromStack_library_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 4550,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"extract_byte_array_length": {
				"entryPoint": 4237,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"panic_error_0x21": {
				"entryPoint": 4581,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:10829:20",
					"nodeType": "YulBlock",
					"src": "0:10829:20",
					"statements": [
						{
							"nativeSrc": "6:3:20",
							"nodeType": "YulBlock",
							"src": "6:3:20",
							"statements": []
						},
						{
							"body": {
								"nativeSrc": "64:239:20",
								"nodeType": "YulBlock",
								"src": "64:239:20",
								"statements": [
									{
										"nativeSrc": "74:26:20",
										"nodeType": "YulVariableDeclaration",
										"src": "74:26:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "94:5:20",
													"nodeType": "YulIdentifier",
													"src": "94:5:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "88:5:20",
												"nodeType": "YulIdentifier",
												"src": "88:5:20"
											},
											"nativeSrc": "88:12:20",
											"nodeType": "YulFunctionCall",
											"src": "88:12:20"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "78:6:20",
												"nodeType": "YulTypedName",
												"src": "78:6:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "116:3:20",
													"nodeType": "YulIdentifier",
													"src": "116:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "121:6:20",
													"nodeType": "YulIdentifier",
													"src": "121:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "109:6:20",
												"nodeType": "YulIdentifier",
												"src": "109:6:20"
											},
											"nativeSrc": "109:19:20",
											"nodeType": "YulFunctionCall",
											"src": "109:19:20"
										},
										"nativeSrc": "109:19:20",
										"nodeType": "YulExpressionStatement",
										"src": "109:19:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nativeSrc": "147:3:20",
															"nodeType": "YulIdentifier",
															"src": "147:3:20"
														},
														{
															"kind": "number",
															"nativeSrc": "152:4:20",
															"nodeType": "YulLiteral",
															"src": "152:4:20",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "143:3:20",
														"nodeType": "YulIdentifier",
														"src": "143:3:20"
													},
													"nativeSrc": "143:14:20",
													"nodeType": "YulFunctionCall",
													"src": "143:14:20"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "163:5:20",
															"nodeType": "YulIdentifier",
															"src": "163:5:20"
														},
														{
															"kind": "number",
															"nativeSrc": "170:4:20",
															"nodeType": "YulLiteral",
															"src": "170:4:20",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "159:3:20",
														"nodeType": "YulIdentifier",
														"src": "159:3:20"
													},
													"nativeSrc": "159:16:20",
													"nodeType": "YulFunctionCall",
													"src": "159:16:20"
												},
												{
													"name": "length",
													"nativeSrc": "177:6:20",
													"nodeType": "YulIdentifier",
													"src": "177:6:20"
												}
											],
											"functionName": {
												"name": "mcopy",
												"nativeSrc": "137:5:20",
												"nodeType": "YulIdentifier",
												"src": "137:5:20"
											},
											"nativeSrc": "137:47:20",
											"nodeType": "YulFunctionCall",
											"src": "137:47:20"
										},
										"nativeSrc": "137:47:20",
										"nodeType": "YulExpressionStatement",
										"src": "137:47:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "pos",
																	"nativeSrc": "208:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "208:3:20"
																},
																{
																	"name": "length",
																	"nativeSrc": "213:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "213:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "204:3:20",
																"nodeType": "YulIdentifier",
																"src": "204:3:20"
															},
															"nativeSrc": "204:16:20",
															"nodeType": "YulFunctionCall",
															"src": "204:16:20"
														},
														{
															"kind": "number",
															"nativeSrc": "222:4:20",
															"nodeType": "YulLiteral",
															"src": "222:4:20",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "200:3:20",
														"nodeType": "YulIdentifier",
														"src": "200:3:20"
													},
													"nativeSrc": "200:27:20",
													"nodeType": "YulFunctionCall",
													"src": "200:27:20"
												},
												{
													"kind": "number",
													"nativeSrc": "229:1:20",
													"nodeType": "YulLiteral",
													"src": "229:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "193:6:20",
												"nodeType": "YulIdentifier",
												"src": "193:6:20"
											},
											"nativeSrc": "193:38:20",
											"nodeType": "YulFunctionCall",
											"src": "193:38:20"
										},
										"nativeSrc": "193:38:20",
										"nodeType": "YulExpressionStatement",
										"src": "193:38:20"
									},
									{
										"nativeSrc": "240:57:20",
										"nodeType": "YulAssignment",
										"src": "240:57:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nativeSrc": "255:3:20",
															"nodeType": "YulIdentifier",
															"src": "255:3:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "length",
																			"nativeSrc": "268:6:20",
																			"nodeType": "YulIdentifier",
																			"src": "268:6:20"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "276:2:20",
																			"nodeType": "YulLiteral",
																			"src": "276:2:20",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "264:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "264:3:20"
																	},
																	"nativeSrc": "264:15:20",
																	"nodeType": "YulFunctionCall",
																	"src": "264:15:20"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "285:2:20",
																			"nodeType": "YulLiteral",
																			"src": "285:2:20",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "not",
																		"nativeSrc": "281:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "281:3:20"
																	},
																	"nativeSrc": "281:7:20",
																	"nodeType": "YulFunctionCall",
																	"src": "281:7:20"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "260:3:20",
																"nodeType": "YulIdentifier",
																"src": "260:3:20"
															},
															"nativeSrc": "260:29:20",
															"nodeType": "YulFunctionCall",
															"src": "260:29:20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "251:3:20",
														"nodeType": "YulIdentifier",
														"src": "251:3:20"
													},
													"nativeSrc": "251:39:20",
													"nodeType": "YulFunctionCall",
													"src": "251:39:20"
												},
												{
													"kind": "number",
													"nativeSrc": "292:4:20",
													"nodeType": "YulLiteral",
													"src": "292:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "247:3:20",
												"nodeType": "YulIdentifier",
												"src": "247:3:20"
											},
											"nativeSrc": "247:50:20",
											"nodeType": "YulFunctionCall",
											"src": "247:50:20"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "240:3:20",
												"nodeType": "YulIdentifier",
												"src": "240:3:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_string",
							"nativeSrc": "14:289:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "41:5:20",
									"nodeType": "YulTypedName",
									"src": "41:5:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "48:3:20",
									"nodeType": "YulTypedName",
									"src": "48:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "56:3:20",
									"nodeType": "YulTypedName",
									"src": "56:3:20",
									"type": ""
								}
							],
							"src": "14:289:20"
						},
						{
							"body": {
								"nativeSrc": "429:99:20",
								"nodeType": "YulBlock",
								"src": "429:99:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "446:9:20",
													"nodeType": "YulIdentifier",
													"src": "446:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "457:2:20",
													"nodeType": "YulLiteral",
													"src": "457:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "439:6:20",
												"nodeType": "YulIdentifier",
												"src": "439:6:20"
											},
											"nativeSrc": "439:21:20",
											"nodeType": "YulFunctionCall",
											"src": "439:21:20"
										},
										"nativeSrc": "439:21:20",
										"nodeType": "YulExpressionStatement",
										"src": "439:21:20"
									},
									{
										"nativeSrc": "469:53:20",
										"nodeType": "YulAssignment",
										"src": "469:53:20",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "495:6:20",
													"nodeType": "YulIdentifier",
													"src": "495:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "507:9:20",
															"nodeType": "YulIdentifier",
															"src": "507:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "518:2:20",
															"nodeType": "YulLiteral",
															"src": "518:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "503:3:20",
														"nodeType": "YulIdentifier",
														"src": "503:3:20"
													},
													"nativeSrc": "503:18:20",
													"nodeType": "YulFunctionCall",
													"src": "503:18:20"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "477:17:20",
												"nodeType": "YulIdentifier",
												"src": "477:17:20"
											},
											"nativeSrc": "477:45:20",
											"nodeType": "YulFunctionCall",
											"src": "477:45:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "469:4:20",
												"nodeType": "YulIdentifier",
												"src": "469:4:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "308:220:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "398:9:20",
									"nodeType": "YulTypedName",
									"src": "398:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "409:6:20",
									"nodeType": "YulTypedName",
									"src": "409:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "420:4:20",
									"nodeType": "YulTypedName",
									"src": "420:4:20",
									"type": ""
								}
							],
							"src": "308:220:20"
						},
						{
							"body": {
								"nativeSrc": "582:124:20",
								"nodeType": "YulBlock",
								"src": "582:124:20",
								"statements": [
									{
										"nativeSrc": "592:29:20",
										"nodeType": "YulAssignment",
										"src": "592:29:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "614:6:20",
													"nodeType": "YulIdentifier",
													"src": "614:6:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "601:12:20",
												"nodeType": "YulIdentifier",
												"src": "601:12:20"
											},
											"nativeSrc": "601:20:20",
											"nodeType": "YulFunctionCall",
											"src": "601:20:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "592:5:20",
												"nodeType": "YulIdentifier",
												"src": "592:5:20"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "684:16:20",
											"nodeType": "YulBlock",
											"src": "684:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "693:1:20",
																"nodeType": "YulLiteral",
																"src": "693:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "696:1:20",
																"nodeType": "YulLiteral",
																"src": "696:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "686:6:20",
															"nodeType": "YulIdentifier",
															"src": "686:6:20"
														},
														"nativeSrc": "686:12:20",
														"nodeType": "YulFunctionCall",
														"src": "686:12:20"
													},
													"nativeSrc": "686:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "686:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "643:5:20",
															"nodeType": "YulIdentifier",
															"src": "643:5:20"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "654:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "654:5:20"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "669:3:20",
																					"nodeType": "YulLiteral",
																					"src": "669:3:20",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "674:1:20",
																					"nodeType": "YulLiteral",
																					"src": "674:1:20",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nativeSrc": "665:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "665:3:20"
																			},
																			"nativeSrc": "665:11:20",
																			"nodeType": "YulFunctionCall",
																			"src": "665:11:20"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "678:1:20",
																			"nodeType": "YulLiteral",
																			"src": "678:1:20",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nativeSrc": "661:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "661:3:20"
																	},
																	"nativeSrc": "661:19:20",
																	"nodeType": "YulFunctionCall",
																	"src": "661:19:20"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "650:3:20",
																"nodeType": "YulIdentifier",
																"src": "650:3:20"
															},
															"nativeSrc": "650:31:20",
															"nodeType": "YulFunctionCall",
															"src": "650:31:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "640:2:20",
														"nodeType": "YulIdentifier",
														"src": "640:2:20"
													},
													"nativeSrc": "640:42:20",
													"nodeType": "YulFunctionCall",
													"src": "640:42:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "633:6:20",
												"nodeType": "YulIdentifier",
												"src": "633:6:20"
											},
											"nativeSrc": "633:50:20",
											"nodeType": "YulFunctionCall",
											"src": "633:50:20"
										},
										"nativeSrc": "630:70:20",
										"nodeType": "YulIf",
										"src": "630:70:20"
									}
								]
							},
							"name": "abi_decode_address",
							"nativeSrc": "533:173:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "561:6:20",
									"nodeType": "YulTypedName",
									"src": "561:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "572:5:20",
									"nodeType": "YulTypedName",
									"src": "572:5:20",
									"type": ""
								}
							],
							"src": "533:173:20"
						},
						{
							"body": {
								"nativeSrc": "798:213:20",
								"nodeType": "YulBlock",
								"src": "798:213:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "844:16:20",
											"nodeType": "YulBlock",
											"src": "844:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "853:1:20",
																"nodeType": "YulLiteral",
																"src": "853:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "856:1:20",
																"nodeType": "YulLiteral",
																"src": "856:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "846:6:20",
															"nodeType": "YulIdentifier",
															"src": "846:6:20"
														},
														"nativeSrc": "846:12:20",
														"nodeType": "YulFunctionCall",
														"src": "846:12:20"
													},
													"nativeSrc": "846:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "846:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "819:7:20",
															"nodeType": "YulIdentifier",
															"src": "819:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "828:9:20",
															"nodeType": "YulIdentifier",
															"src": "828:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "815:3:20",
														"nodeType": "YulIdentifier",
														"src": "815:3:20"
													},
													"nativeSrc": "815:23:20",
													"nodeType": "YulFunctionCall",
													"src": "815:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "840:2:20",
													"nodeType": "YulLiteral",
													"src": "840:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "811:3:20",
												"nodeType": "YulIdentifier",
												"src": "811:3:20"
											},
											"nativeSrc": "811:32:20",
											"nodeType": "YulFunctionCall",
											"src": "811:32:20"
										},
										"nativeSrc": "808:52:20",
										"nodeType": "YulIf",
										"src": "808:52:20"
									},
									{
										"nativeSrc": "869:39:20",
										"nodeType": "YulAssignment",
										"src": "869:39:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "898:9:20",
													"nodeType": "YulIdentifier",
													"src": "898:9:20"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "879:18:20",
												"nodeType": "YulIdentifier",
												"src": "879:18:20"
											},
											"nativeSrc": "879:29:20",
											"nodeType": "YulFunctionCall",
											"src": "879:29:20"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "869:6:20",
												"nodeType": "YulIdentifier",
												"src": "869:6:20"
											}
										]
									},
									{
										"nativeSrc": "917:14:20",
										"nodeType": "YulVariableDeclaration",
										"src": "917:14:20",
										"value": {
											"kind": "number",
											"nativeSrc": "930:1:20",
											"nodeType": "YulLiteral",
											"src": "930:1:20",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "921:5:20",
												"nodeType": "YulTypedName",
												"src": "921:5:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "940:41:20",
										"nodeType": "YulAssignment",
										"src": "940:41:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "966:9:20",
															"nodeType": "YulIdentifier",
															"src": "966:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "977:2:20",
															"nodeType": "YulLiteral",
															"src": "977:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "962:3:20",
														"nodeType": "YulIdentifier",
														"src": "962:3:20"
													},
													"nativeSrc": "962:18:20",
													"nodeType": "YulFunctionCall",
													"src": "962:18:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "949:12:20",
												"nodeType": "YulIdentifier",
												"src": "949:12:20"
											},
											"nativeSrc": "949:32:20",
											"nodeType": "YulFunctionCall",
											"src": "949:32:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "940:5:20",
												"nodeType": "YulIdentifier",
												"src": "940:5:20"
											}
										]
									},
									{
										"nativeSrc": "990:15:20",
										"nodeType": "YulAssignment",
										"src": "990:15:20",
										"value": {
											"name": "value",
											"nativeSrc": "1000:5:20",
											"nodeType": "YulIdentifier",
											"src": "1000:5:20"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "990:6:20",
												"nodeType": "YulIdentifier",
												"src": "990:6:20"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256",
							"nativeSrc": "711:300:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "756:9:20",
									"nodeType": "YulTypedName",
									"src": "756:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "767:7:20",
									"nodeType": "YulTypedName",
									"src": "767:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "779:6:20",
									"nodeType": "YulTypedName",
									"src": "779:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "787:6:20",
									"nodeType": "YulTypedName",
									"src": "787:6:20",
									"type": ""
								}
							],
							"src": "711:300:20"
						},
						{
							"body": {
								"nativeSrc": "1111:92:20",
								"nodeType": "YulBlock",
								"src": "1111:92:20",
								"statements": [
									{
										"nativeSrc": "1121:26:20",
										"nodeType": "YulAssignment",
										"src": "1121:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1133:9:20",
													"nodeType": "YulIdentifier",
													"src": "1133:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "1144:2:20",
													"nodeType": "YulLiteral",
													"src": "1144:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1129:3:20",
												"nodeType": "YulIdentifier",
												"src": "1129:3:20"
											},
											"nativeSrc": "1129:18:20",
											"nodeType": "YulFunctionCall",
											"src": "1129:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1121:4:20",
												"nodeType": "YulIdentifier",
												"src": "1121:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1163:9:20",
													"nodeType": "YulIdentifier",
													"src": "1163:9:20"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nativeSrc": "1188:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1188:6:20"
																}
															],
															"functionName": {
																"name": "iszero",
																"nativeSrc": "1181:6:20",
																"nodeType": "YulIdentifier",
																"src": "1181:6:20"
															},
															"nativeSrc": "1181:14:20",
															"nodeType": "YulFunctionCall",
															"src": "1181:14:20"
														}
													],
													"functionName": {
														"name": "iszero",
														"nativeSrc": "1174:6:20",
														"nodeType": "YulIdentifier",
														"src": "1174:6:20"
													},
													"nativeSrc": "1174:22:20",
													"nodeType": "YulFunctionCall",
													"src": "1174:22:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1156:6:20",
												"nodeType": "YulIdentifier",
												"src": "1156:6:20"
											},
											"nativeSrc": "1156:41:20",
											"nodeType": "YulFunctionCall",
											"src": "1156:41:20"
										},
										"nativeSrc": "1156:41:20",
										"nodeType": "YulExpressionStatement",
										"src": "1156:41:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
							"nativeSrc": "1016:187:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1080:9:20",
									"nodeType": "YulTypedName",
									"src": "1080:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1091:6:20",
									"nodeType": "YulTypedName",
									"src": "1091:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1102:4:20",
									"nodeType": "YulTypedName",
									"src": "1102:4:20",
									"type": ""
								}
							],
							"src": "1016:187:20"
						},
						{
							"body": {
								"nativeSrc": "1309:76:20",
								"nodeType": "YulBlock",
								"src": "1309:76:20",
								"statements": [
									{
										"nativeSrc": "1319:26:20",
										"nodeType": "YulAssignment",
										"src": "1319:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1331:9:20",
													"nodeType": "YulIdentifier",
													"src": "1331:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "1342:2:20",
													"nodeType": "YulLiteral",
													"src": "1342:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1327:3:20",
												"nodeType": "YulIdentifier",
												"src": "1327:3:20"
											},
											"nativeSrc": "1327:18:20",
											"nodeType": "YulFunctionCall",
											"src": "1327:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1319:4:20",
												"nodeType": "YulIdentifier",
												"src": "1319:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1361:9:20",
													"nodeType": "YulIdentifier",
													"src": "1361:9:20"
												},
												{
													"name": "value0",
													"nativeSrc": "1372:6:20",
													"nodeType": "YulIdentifier",
													"src": "1372:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1354:6:20",
												"nodeType": "YulIdentifier",
												"src": "1354:6:20"
											},
											"nativeSrc": "1354:25:20",
											"nodeType": "YulFunctionCall",
											"src": "1354:25:20"
										},
										"nativeSrc": "1354:25:20",
										"nodeType": "YulExpressionStatement",
										"src": "1354:25:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nativeSrc": "1208:177:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1278:9:20",
									"nodeType": "YulTypedName",
									"src": "1278:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1289:6:20",
									"nodeType": "YulTypedName",
									"src": "1289:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1300:4:20",
									"nodeType": "YulTypedName",
									"src": "1300:4:20",
									"type": ""
								}
							],
							"src": "1208:177:20"
						},
						{
							"body": {
								"nativeSrc": "1494:270:20",
								"nodeType": "YulBlock",
								"src": "1494:270:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "1540:16:20",
											"nodeType": "YulBlock",
											"src": "1540:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1549:1:20",
																"nodeType": "YulLiteral",
																"src": "1549:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "1552:1:20",
																"nodeType": "YulLiteral",
																"src": "1552:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "1542:6:20",
															"nodeType": "YulIdentifier",
															"src": "1542:6:20"
														},
														"nativeSrc": "1542:12:20",
														"nodeType": "YulFunctionCall",
														"src": "1542:12:20"
													},
													"nativeSrc": "1542:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "1542:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "1515:7:20",
															"nodeType": "YulIdentifier",
															"src": "1515:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "1524:9:20",
															"nodeType": "YulIdentifier",
															"src": "1524:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1511:3:20",
														"nodeType": "YulIdentifier",
														"src": "1511:3:20"
													},
													"nativeSrc": "1511:23:20",
													"nodeType": "YulFunctionCall",
													"src": "1511:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "1536:2:20",
													"nodeType": "YulLiteral",
													"src": "1536:2:20",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "1507:3:20",
												"nodeType": "YulIdentifier",
												"src": "1507:3:20"
											},
											"nativeSrc": "1507:32:20",
											"nodeType": "YulFunctionCall",
											"src": "1507:32:20"
										},
										"nativeSrc": "1504:52:20",
										"nodeType": "YulIf",
										"src": "1504:52:20"
									},
									{
										"nativeSrc": "1565:39:20",
										"nodeType": "YulAssignment",
										"src": "1565:39:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1594:9:20",
													"nodeType": "YulIdentifier",
													"src": "1594:9:20"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "1575:18:20",
												"nodeType": "YulIdentifier",
												"src": "1575:18:20"
											},
											"nativeSrc": "1575:29:20",
											"nodeType": "YulFunctionCall",
											"src": "1575:29:20"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "1565:6:20",
												"nodeType": "YulIdentifier",
												"src": "1565:6:20"
											}
										]
									},
									{
										"nativeSrc": "1613:48:20",
										"nodeType": "YulAssignment",
										"src": "1613:48:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1646:9:20",
															"nodeType": "YulIdentifier",
															"src": "1646:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "1657:2:20",
															"nodeType": "YulLiteral",
															"src": "1657:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1642:3:20",
														"nodeType": "YulIdentifier",
														"src": "1642:3:20"
													},
													"nativeSrc": "1642:18:20",
													"nodeType": "YulFunctionCall",
													"src": "1642:18:20"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "1623:18:20",
												"nodeType": "YulIdentifier",
												"src": "1623:18:20"
											},
											"nativeSrc": "1623:38:20",
											"nodeType": "YulFunctionCall",
											"src": "1623:38:20"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "1613:6:20",
												"nodeType": "YulIdentifier",
												"src": "1613:6:20"
											}
										]
									},
									{
										"nativeSrc": "1670:14:20",
										"nodeType": "YulVariableDeclaration",
										"src": "1670:14:20",
										"value": {
											"kind": "number",
											"nativeSrc": "1683:1:20",
											"nodeType": "YulLiteral",
											"src": "1683:1:20",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "1674:5:20",
												"nodeType": "YulTypedName",
												"src": "1674:5:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "1693:41:20",
										"nodeType": "YulAssignment",
										"src": "1693:41:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1719:9:20",
															"nodeType": "YulIdentifier",
															"src": "1719:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "1730:2:20",
															"nodeType": "YulLiteral",
															"src": "1730:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1715:3:20",
														"nodeType": "YulIdentifier",
														"src": "1715:3:20"
													},
													"nativeSrc": "1715:18:20",
													"nodeType": "YulFunctionCall",
													"src": "1715:18:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "1702:12:20",
												"nodeType": "YulIdentifier",
												"src": "1702:12:20"
											},
											"nativeSrc": "1702:32:20",
											"nodeType": "YulFunctionCall",
											"src": "1702:32:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "1693:5:20",
												"nodeType": "YulIdentifier",
												"src": "1693:5:20"
											}
										]
									},
									{
										"nativeSrc": "1743:15:20",
										"nodeType": "YulAssignment",
										"src": "1743:15:20",
										"value": {
											"name": "value",
											"nativeSrc": "1753:5:20",
											"nodeType": "YulIdentifier",
											"src": "1753:5:20"
										},
										"variableNames": [
											{
												"name": "value2",
												"nativeSrc": "1743:6:20",
												"nodeType": "YulIdentifier",
												"src": "1743:6:20"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256",
							"nativeSrc": "1390:374:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1444:9:20",
									"nodeType": "YulTypedName",
									"src": "1444:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "1455:7:20",
									"nodeType": "YulTypedName",
									"src": "1455:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "1467:6:20",
									"nodeType": "YulTypedName",
									"src": "1467:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "1475:6:20",
									"nodeType": "YulTypedName",
									"src": "1475:6:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "1483:6:20",
									"nodeType": "YulTypedName",
									"src": "1483:6:20",
									"type": ""
								}
							],
							"src": "1390:374:20"
						},
						{
							"body": {
								"nativeSrc": "1866:87:20",
								"nodeType": "YulBlock",
								"src": "1866:87:20",
								"statements": [
									{
										"nativeSrc": "1876:26:20",
										"nodeType": "YulAssignment",
										"src": "1876:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1888:9:20",
													"nodeType": "YulIdentifier",
													"src": "1888:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "1899:2:20",
													"nodeType": "YulLiteral",
													"src": "1899:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1884:3:20",
												"nodeType": "YulIdentifier",
												"src": "1884:3:20"
											},
											"nativeSrc": "1884:18:20",
											"nodeType": "YulFunctionCall",
											"src": "1884:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1876:4:20",
												"nodeType": "YulIdentifier",
												"src": "1876:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1918:9:20",
													"nodeType": "YulIdentifier",
													"src": "1918:9:20"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "1933:6:20",
															"nodeType": "YulIdentifier",
															"src": "1933:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "1941:4:20",
															"nodeType": "YulLiteral",
															"src": "1941:4:20",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "1929:3:20",
														"nodeType": "YulIdentifier",
														"src": "1929:3:20"
													},
													"nativeSrc": "1929:17:20",
													"nodeType": "YulFunctionCall",
													"src": "1929:17:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1911:6:20",
												"nodeType": "YulIdentifier",
												"src": "1911:6:20"
											},
											"nativeSrc": "1911:36:20",
											"nodeType": "YulFunctionCall",
											"src": "1911:36:20"
										},
										"nativeSrc": "1911:36:20",
										"nodeType": "YulExpressionStatement",
										"src": "1911:36:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
							"nativeSrc": "1769:184:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1835:9:20",
									"nodeType": "YulTypedName",
									"src": "1835:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1846:6:20",
									"nodeType": "YulTypedName",
									"src": "1846:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1857:4:20",
									"nodeType": "YulTypedName",
									"src": "1857:4:20",
									"type": ""
								}
							],
							"src": "1769:184:20"
						},
						{
							"body": {
								"nativeSrc": "2059:76:20",
								"nodeType": "YulBlock",
								"src": "2059:76:20",
								"statements": [
									{
										"nativeSrc": "2069:26:20",
										"nodeType": "YulAssignment",
										"src": "2069:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2081:9:20",
													"nodeType": "YulIdentifier",
													"src": "2081:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "2092:2:20",
													"nodeType": "YulLiteral",
													"src": "2092:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "2077:3:20",
												"nodeType": "YulIdentifier",
												"src": "2077:3:20"
											},
											"nativeSrc": "2077:18:20",
											"nodeType": "YulFunctionCall",
											"src": "2077:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "2069:4:20",
												"nodeType": "YulIdentifier",
												"src": "2069:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2111:9:20",
													"nodeType": "YulIdentifier",
													"src": "2111:9:20"
												},
												{
													"name": "value0",
													"nativeSrc": "2122:6:20",
													"nodeType": "YulIdentifier",
													"src": "2122:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2104:6:20",
												"nodeType": "YulIdentifier",
												"src": "2104:6:20"
											},
											"nativeSrc": "2104:25:20",
											"nodeType": "YulFunctionCall",
											"src": "2104:25:20"
										},
										"nativeSrc": "2104:25:20",
										"nodeType": "YulExpressionStatement",
										"src": "2104:25:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
							"nativeSrc": "1958:177:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2028:9:20",
									"nodeType": "YulTypedName",
									"src": "2028:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "2039:6:20",
									"nodeType": "YulTypedName",
									"src": "2039:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2050:4:20",
									"nodeType": "YulTypedName",
									"src": "2050:4:20",
									"type": ""
								}
							],
							"src": "1958:177:20"
						},
						{
							"body": {
								"nativeSrc": "2210:116:20",
								"nodeType": "YulBlock",
								"src": "2210:116:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "2256:16:20",
											"nodeType": "YulBlock",
											"src": "2256:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "2265:1:20",
																"nodeType": "YulLiteral",
																"src": "2265:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "2268:1:20",
																"nodeType": "YulLiteral",
																"src": "2268:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "2258:6:20",
															"nodeType": "YulIdentifier",
															"src": "2258:6:20"
														},
														"nativeSrc": "2258:12:20",
														"nodeType": "YulFunctionCall",
														"src": "2258:12:20"
													},
													"nativeSrc": "2258:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "2258:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "2231:7:20",
															"nodeType": "YulIdentifier",
															"src": "2231:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "2240:9:20",
															"nodeType": "YulIdentifier",
															"src": "2240:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "2227:3:20",
														"nodeType": "YulIdentifier",
														"src": "2227:3:20"
													},
													"nativeSrc": "2227:23:20",
													"nodeType": "YulFunctionCall",
													"src": "2227:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "2252:2:20",
													"nodeType": "YulLiteral",
													"src": "2252:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "2223:3:20",
												"nodeType": "YulIdentifier",
												"src": "2223:3:20"
											},
											"nativeSrc": "2223:32:20",
											"nodeType": "YulFunctionCall",
											"src": "2223:32:20"
										},
										"nativeSrc": "2220:52:20",
										"nodeType": "YulIf",
										"src": "2220:52:20"
									},
									{
										"nativeSrc": "2281:39:20",
										"nodeType": "YulAssignment",
										"src": "2281:39:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2310:9:20",
													"nodeType": "YulIdentifier",
													"src": "2310:9:20"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "2291:18:20",
												"nodeType": "YulIdentifier",
												"src": "2291:18:20"
											},
											"nativeSrc": "2291:29:20",
											"nodeType": "YulFunctionCall",
											"src": "2291:29:20"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "2281:6:20",
												"nodeType": "YulIdentifier",
												"src": "2281:6:20"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nativeSrc": "2140:186:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2176:9:20",
									"nodeType": "YulTypedName",
									"src": "2176:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "2187:7:20",
									"nodeType": "YulTypedName",
									"src": "2187:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "2199:6:20",
									"nodeType": "YulTypedName",
									"src": "2199:6:20",
									"type": ""
								}
							],
							"src": "2140:186:20"
						},
						{
							"body": {
								"nativeSrc": "2688:881:20",
								"nodeType": "YulBlock",
								"src": "2688:881:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2705:9:20",
													"nodeType": "YulIdentifier",
													"src": "2705:9:20"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "2720:6:20",
															"nodeType": "YulIdentifier",
															"src": "2720:6:20"
														},
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "2732:3:20",
																	"nodeType": "YulLiteral",
																	"src": "2732:3:20",
																	"type": "",
																	"value": "248"
																},
																{
																	"kind": "number",
																	"nativeSrc": "2737:3:20",
																	"nodeType": "YulLiteral",
																	"src": "2737:3:20",
																	"type": "",
																	"value": "255"
																}
															],
															"functionName": {
																"name": "shl",
																"nativeSrc": "2728:3:20",
																"nodeType": "YulIdentifier",
																"src": "2728:3:20"
															},
															"nativeSrc": "2728:13:20",
															"nodeType": "YulFunctionCall",
															"src": "2728:13:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "2716:3:20",
														"nodeType": "YulIdentifier",
														"src": "2716:3:20"
													},
													"nativeSrc": "2716:26:20",
													"nodeType": "YulFunctionCall",
													"src": "2716:26:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2698:6:20",
												"nodeType": "YulIdentifier",
												"src": "2698:6:20"
											},
											"nativeSrc": "2698:45:20",
											"nodeType": "YulFunctionCall",
											"src": "2698:45:20"
										},
										"nativeSrc": "2698:45:20",
										"nodeType": "YulExpressionStatement",
										"src": "2698:45:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2763:9:20",
															"nodeType": "YulIdentifier",
															"src": "2763:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "2774:2:20",
															"nodeType": "YulLiteral",
															"src": "2774:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2759:3:20",
														"nodeType": "YulIdentifier",
														"src": "2759:3:20"
													},
													"nativeSrc": "2759:18:20",
													"nodeType": "YulFunctionCall",
													"src": "2759:18:20"
												},
												{
													"kind": "number",
													"nativeSrc": "2779:3:20",
													"nodeType": "YulLiteral",
													"src": "2779:3:20",
													"type": "",
													"value": "224"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2752:6:20",
												"nodeType": "YulIdentifier",
												"src": "2752:6:20"
											},
											"nativeSrc": "2752:31:20",
											"nodeType": "YulFunctionCall",
											"src": "2752:31:20"
										},
										"nativeSrc": "2752:31:20",
										"nodeType": "YulExpressionStatement",
										"src": "2752:31:20"
									},
									{
										"nativeSrc": "2792:60:20",
										"nodeType": "YulVariableDeclaration",
										"src": "2792:60:20",
										"value": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "2824:6:20",
													"nodeType": "YulIdentifier",
													"src": "2824:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2836:9:20",
															"nodeType": "YulIdentifier",
															"src": "2836:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "2847:3:20",
															"nodeType": "YulLiteral",
															"src": "2847:3:20",
															"type": "",
															"value": "224"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2832:3:20",
														"nodeType": "YulIdentifier",
														"src": "2832:3:20"
													},
													"nativeSrc": "2832:19:20",
													"nodeType": "YulFunctionCall",
													"src": "2832:19:20"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "2806:17:20",
												"nodeType": "YulIdentifier",
												"src": "2806:17:20"
											},
											"nativeSrc": "2806:46:20",
											"nodeType": "YulFunctionCall",
											"src": "2806:46:20"
										},
										"variables": [
											{
												"name": "tail_1",
												"nativeSrc": "2796:6:20",
												"nodeType": "YulTypedName",
												"src": "2796:6:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2872:9:20",
															"nodeType": "YulIdentifier",
															"src": "2872:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "2883:2:20",
															"nodeType": "YulLiteral",
															"src": "2883:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2868:3:20",
														"nodeType": "YulIdentifier",
														"src": "2868:3:20"
													},
													"nativeSrc": "2868:18:20",
													"nodeType": "YulFunctionCall",
													"src": "2868:18:20"
												},
												{
													"arguments": [
														{
															"name": "tail_1",
															"nativeSrc": "2892:6:20",
															"nodeType": "YulIdentifier",
															"src": "2892:6:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "2900:9:20",
															"nodeType": "YulIdentifier",
															"src": "2900:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "2888:3:20",
														"nodeType": "YulIdentifier",
														"src": "2888:3:20"
													},
													"nativeSrc": "2888:22:20",
													"nodeType": "YulFunctionCall",
													"src": "2888:22:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2861:6:20",
												"nodeType": "YulIdentifier",
												"src": "2861:6:20"
											},
											"nativeSrc": "2861:50:20",
											"nodeType": "YulFunctionCall",
											"src": "2861:50:20"
										},
										"nativeSrc": "2861:50:20",
										"nodeType": "YulExpressionStatement",
										"src": "2861:50:20"
									},
									{
										"nativeSrc": "2920:47:20",
										"nodeType": "YulVariableDeclaration",
										"src": "2920:47:20",
										"value": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "2952:6:20",
													"nodeType": "YulIdentifier",
													"src": "2952:6:20"
												},
												{
													"name": "tail_1",
													"nativeSrc": "2960:6:20",
													"nodeType": "YulIdentifier",
													"src": "2960:6:20"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "2934:17:20",
												"nodeType": "YulIdentifier",
												"src": "2934:17:20"
											},
											"nativeSrc": "2934:33:20",
											"nodeType": "YulFunctionCall",
											"src": "2934:33:20"
										},
										"variables": [
											{
												"name": "tail_2",
												"nativeSrc": "2924:6:20",
												"nodeType": "YulTypedName",
												"src": "2924:6:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2987:9:20",
															"nodeType": "YulIdentifier",
															"src": "2987:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "2998:2:20",
															"nodeType": "YulLiteral",
															"src": "2998:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2983:3:20",
														"nodeType": "YulIdentifier",
														"src": "2983:3:20"
													},
													"nativeSrc": "2983:18:20",
													"nodeType": "YulFunctionCall",
													"src": "2983:18:20"
												},
												{
													"name": "value3",
													"nativeSrc": "3003:6:20",
													"nodeType": "YulIdentifier",
													"src": "3003:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2976:6:20",
												"nodeType": "YulIdentifier",
												"src": "2976:6:20"
											},
											"nativeSrc": "2976:34:20",
											"nodeType": "YulFunctionCall",
											"src": "2976:34:20"
										},
										"nativeSrc": "2976:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "2976:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3030:9:20",
															"nodeType": "YulIdentifier",
															"src": "3030:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3041:3:20",
															"nodeType": "YulLiteral",
															"src": "3041:3:20",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3026:3:20",
														"nodeType": "YulIdentifier",
														"src": "3026:3:20"
													},
													"nativeSrc": "3026:19:20",
													"nodeType": "YulFunctionCall",
													"src": "3026:19:20"
												},
												{
													"arguments": [
														{
															"name": "value4",
															"nativeSrc": "3051:6:20",
															"nodeType": "YulIdentifier",
															"src": "3051:6:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "3067:3:20",
																			"nodeType": "YulLiteral",
																			"src": "3067:3:20",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "3072:1:20",
																			"nodeType": "YulLiteral",
																			"src": "3072:1:20",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "3063:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "3063:3:20"
																	},
																	"nativeSrc": "3063:11:20",
																	"nodeType": "YulFunctionCall",
																	"src": "3063:11:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "3076:1:20",
																	"nodeType": "YulLiteral",
																	"src": "3076:1:20",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "3059:3:20",
																"nodeType": "YulIdentifier",
																"src": "3059:3:20"
															},
															"nativeSrc": "3059:19:20",
															"nodeType": "YulFunctionCall",
															"src": "3059:19:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "3047:3:20",
														"nodeType": "YulIdentifier",
														"src": "3047:3:20"
													},
													"nativeSrc": "3047:32:20",
													"nodeType": "YulFunctionCall",
													"src": "3047:32:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3019:6:20",
												"nodeType": "YulIdentifier",
												"src": "3019:6:20"
											},
											"nativeSrc": "3019:61:20",
											"nodeType": "YulFunctionCall",
											"src": "3019:61:20"
										},
										"nativeSrc": "3019:61:20",
										"nodeType": "YulExpressionStatement",
										"src": "3019:61:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3100:9:20",
															"nodeType": "YulIdentifier",
															"src": "3100:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3111:3:20",
															"nodeType": "YulLiteral",
															"src": "3111:3:20",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3096:3:20",
														"nodeType": "YulIdentifier",
														"src": "3096:3:20"
													},
													"nativeSrc": "3096:19:20",
													"nodeType": "YulFunctionCall",
													"src": "3096:19:20"
												},
												{
													"name": "value5",
													"nativeSrc": "3117:6:20",
													"nodeType": "YulIdentifier",
													"src": "3117:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3089:6:20",
												"nodeType": "YulIdentifier",
												"src": "3089:6:20"
											},
											"nativeSrc": "3089:35:20",
											"nodeType": "YulFunctionCall",
											"src": "3089:35:20"
										},
										"nativeSrc": "3089:35:20",
										"nodeType": "YulExpressionStatement",
										"src": "3089:35:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3144:9:20",
															"nodeType": "YulIdentifier",
															"src": "3144:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3155:3:20",
															"nodeType": "YulLiteral",
															"src": "3155:3:20",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3140:3:20",
														"nodeType": "YulIdentifier",
														"src": "3140:3:20"
													},
													"nativeSrc": "3140:19:20",
													"nodeType": "YulFunctionCall",
													"src": "3140:19:20"
												},
												{
													"arguments": [
														{
															"name": "tail_2",
															"nativeSrc": "3165:6:20",
															"nodeType": "YulIdentifier",
															"src": "3165:6:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "3173:9:20",
															"nodeType": "YulIdentifier",
															"src": "3173:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "3161:3:20",
														"nodeType": "YulIdentifier",
														"src": "3161:3:20"
													},
													"nativeSrc": "3161:22:20",
													"nodeType": "YulFunctionCall",
													"src": "3161:22:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3133:6:20",
												"nodeType": "YulIdentifier",
												"src": "3133:6:20"
											},
											"nativeSrc": "3133:51:20",
											"nodeType": "YulFunctionCall",
											"src": "3133:51:20"
										},
										"nativeSrc": "3133:51:20",
										"nodeType": "YulExpressionStatement",
										"src": "3133:51:20"
									},
									{
										"nativeSrc": "3193:17:20",
										"nodeType": "YulVariableDeclaration",
										"src": "3193:17:20",
										"value": {
											"name": "tail_2",
											"nativeSrc": "3204:6:20",
											"nodeType": "YulIdentifier",
											"src": "3204:6:20"
										},
										"variables": [
											{
												"name": "pos",
												"nativeSrc": "3197:3:20",
												"nodeType": "YulTypedName",
												"src": "3197:3:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3219:27:20",
										"nodeType": "YulVariableDeclaration",
										"src": "3219:27:20",
										"value": {
											"arguments": [
												{
													"name": "value6",
													"nativeSrc": "3239:6:20",
													"nodeType": "YulIdentifier",
													"src": "3239:6:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "3233:5:20",
												"nodeType": "YulIdentifier",
												"src": "3233:5:20"
											},
											"nativeSrc": "3233:13:20",
											"nodeType": "YulFunctionCall",
											"src": "3233:13:20"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "3223:6:20",
												"nodeType": "YulTypedName",
												"src": "3223:6:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "tail_2",
													"nativeSrc": "3262:6:20",
													"nodeType": "YulIdentifier",
													"src": "3262:6:20"
												},
												{
													"name": "length",
													"nativeSrc": "3270:6:20",
													"nodeType": "YulIdentifier",
													"src": "3270:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3255:6:20",
												"nodeType": "YulIdentifier",
												"src": "3255:6:20"
											},
											"nativeSrc": "3255:22:20",
											"nodeType": "YulFunctionCall",
											"src": "3255:22:20"
										},
										"nativeSrc": "3255:22:20",
										"nodeType": "YulExpressionStatement",
										"src": "3255:22:20"
									},
									{
										"nativeSrc": "3286:22:20",
										"nodeType": "YulAssignment",
										"src": "3286:22:20",
										"value": {
											"arguments": [
												{
													"name": "tail_2",
													"nativeSrc": "3297:6:20",
													"nodeType": "YulIdentifier",
													"src": "3297:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3305:2:20",
													"nodeType": "YulLiteral",
													"src": "3305:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3293:3:20",
												"nodeType": "YulIdentifier",
												"src": "3293:3:20"
											},
											"nativeSrc": "3293:15:20",
											"nodeType": "YulFunctionCall",
											"src": "3293:15:20"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "3286:3:20",
												"nodeType": "YulIdentifier",
												"src": "3286:3:20"
											}
										]
									},
									{
										"nativeSrc": "3317:29:20",
										"nodeType": "YulVariableDeclaration",
										"src": "3317:29:20",
										"value": {
											"arguments": [
												{
													"name": "value6",
													"nativeSrc": "3335:6:20",
													"nodeType": "YulIdentifier",
													"src": "3335:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3343:2:20",
													"nodeType": "YulLiteral",
													"src": "3343:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3331:3:20",
												"nodeType": "YulIdentifier",
												"src": "3331:3:20"
											},
											"nativeSrc": "3331:15:20",
											"nodeType": "YulFunctionCall",
											"src": "3331:15:20"
										},
										"variables": [
											{
												"name": "srcPtr",
												"nativeSrc": "3321:6:20",
												"nodeType": "YulTypedName",
												"src": "3321:6:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3355:10:20",
										"nodeType": "YulVariableDeclaration",
										"src": "3355:10:20",
										"value": {
											"kind": "number",
											"nativeSrc": "3364:1:20",
											"nodeType": "YulLiteral",
											"src": "3364:1:20",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nativeSrc": "3359:1:20",
												"nodeType": "YulTypedName",
												"src": "3359:1:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "3423:120:20",
											"nodeType": "YulBlock",
											"src": "3423:120:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"name": "pos",
																"nativeSrc": "3444:3:20",
																"nodeType": "YulIdentifier",
																"src": "3444:3:20"
															},
															{
																"arguments": [
																	{
																		"name": "srcPtr",
																		"nativeSrc": "3455:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3455:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3449:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "3449:5:20"
																},
																"nativeSrc": "3449:13:20",
																"nodeType": "YulFunctionCall",
																"src": "3449:13:20"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "3437:6:20",
															"nodeType": "YulIdentifier",
															"src": "3437:6:20"
														},
														"nativeSrc": "3437:26:20",
														"nodeType": "YulFunctionCall",
														"src": "3437:26:20"
													},
													"nativeSrc": "3437:26:20",
													"nodeType": "YulExpressionStatement",
													"src": "3437:26:20"
												},
												{
													"nativeSrc": "3476:19:20",
													"nodeType": "YulAssignment",
													"src": "3476:19:20",
													"value": {
														"arguments": [
															{
																"name": "pos",
																"nativeSrc": "3487:3:20",
																"nodeType": "YulIdentifier",
																"src": "3487:3:20"
															},
															{
																"kind": "number",
																"nativeSrc": "3492:2:20",
																"nodeType": "YulLiteral",
																"src": "3492:2:20",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "3483:3:20",
															"nodeType": "YulIdentifier",
															"src": "3483:3:20"
														},
														"nativeSrc": "3483:12:20",
														"nodeType": "YulFunctionCall",
														"src": "3483:12:20"
													},
													"variableNames": [
														{
															"name": "pos",
															"nativeSrc": "3476:3:20",
															"nodeType": "YulIdentifier",
															"src": "3476:3:20"
														}
													]
												},
												{
													"nativeSrc": "3508:25:20",
													"nodeType": "YulAssignment",
													"src": "3508:25:20",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nativeSrc": "3522:6:20",
																"nodeType": "YulIdentifier",
																"src": "3522:6:20"
															},
															{
																"kind": "number",
																"nativeSrc": "3530:2:20",
																"nodeType": "YulLiteral",
																"src": "3530:2:20",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "3518:3:20",
															"nodeType": "YulIdentifier",
															"src": "3518:3:20"
														},
														"nativeSrc": "3518:15:20",
														"nodeType": "YulFunctionCall",
														"src": "3518:15:20"
													},
													"variableNames": [
														{
															"name": "srcPtr",
															"nativeSrc": "3508:6:20",
															"nodeType": "YulIdentifier",
															"src": "3508:6:20"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nativeSrc": "3385:1:20",
													"nodeType": "YulIdentifier",
													"src": "3385:1:20"
												},
												{
													"name": "length",
													"nativeSrc": "3388:6:20",
													"nodeType": "YulIdentifier",
													"src": "3388:6:20"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "3382:2:20",
												"nodeType": "YulIdentifier",
												"src": "3382:2:20"
											},
											"nativeSrc": "3382:13:20",
											"nodeType": "YulFunctionCall",
											"src": "3382:13:20"
										},
										"nativeSrc": "3374:169:20",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "3396:18:20",
											"nodeType": "YulBlock",
											"src": "3396:18:20",
											"statements": [
												{
													"nativeSrc": "3398:14:20",
													"nodeType": "YulAssignment",
													"src": "3398:14:20",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nativeSrc": "3407:1:20",
																"nodeType": "YulIdentifier",
																"src": "3407:1:20"
															},
															{
																"kind": "number",
																"nativeSrc": "3410:1:20",
																"nodeType": "YulLiteral",
																"src": "3410:1:20",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "3403:3:20",
															"nodeType": "YulIdentifier",
															"src": "3403:3:20"
														},
														"nativeSrc": "3403:9:20",
														"nodeType": "YulFunctionCall",
														"src": "3403:9:20"
													},
													"variableNames": [
														{
															"name": "i",
															"nativeSrc": "3398:1:20",
															"nodeType": "YulIdentifier",
															"src": "3398:1:20"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "3378:3:20",
											"nodeType": "YulBlock",
											"src": "3378:3:20",
											"statements": []
										},
										"src": "3374:169:20"
									},
									{
										"nativeSrc": "3552:11:20",
										"nodeType": "YulAssignment",
										"src": "3552:11:20",
										"value": {
											"name": "pos",
											"nativeSrc": "3560:3:20",
											"nodeType": "YulIdentifier",
											"src": "3560:3:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "3552:4:20",
												"nodeType": "YulIdentifier",
												"src": "3552:4:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
							"nativeSrc": "2331:1238:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2609:9:20",
									"nodeType": "YulTypedName",
									"src": "2609:9:20",
									"type": ""
								},
								{
									"name": "value6",
									"nativeSrc": "2620:6:20",
									"nodeType": "YulTypedName",
									"src": "2620:6:20",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "2628:6:20",
									"nodeType": "YulTypedName",
									"src": "2628:6:20",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "2636:6:20",
									"nodeType": "YulTypedName",
									"src": "2636:6:20",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "2644:6:20",
									"nodeType": "YulTypedName",
									"src": "2644:6:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "2652:6:20",
									"nodeType": "YulTypedName",
									"src": "2652:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "2660:6:20",
									"nodeType": "YulTypedName",
									"src": "2660:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "2668:6:20",
									"nodeType": "YulTypedName",
									"src": "2668:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2679:4:20",
									"nodeType": "YulTypedName",
									"src": "2679:4:20",
									"type": ""
								}
							],
							"src": "2331:1238:20"
						},
						{
							"body": {
								"nativeSrc": "3744:733:20",
								"nodeType": "YulBlock",
								"src": "3744:733:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "3791:16:20",
											"nodeType": "YulBlock",
											"src": "3791:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3800:1:20",
																"nodeType": "YulLiteral",
																"src": "3800:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "3803:1:20",
																"nodeType": "YulLiteral",
																"src": "3803:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "3793:6:20",
															"nodeType": "YulIdentifier",
															"src": "3793:6:20"
														},
														"nativeSrc": "3793:12:20",
														"nodeType": "YulFunctionCall",
														"src": "3793:12:20"
													},
													"nativeSrc": "3793:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "3793:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "3765:7:20",
															"nodeType": "YulIdentifier",
															"src": "3765:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "3774:9:20",
															"nodeType": "YulIdentifier",
															"src": "3774:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "3761:3:20",
														"nodeType": "YulIdentifier",
														"src": "3761:3:20"
													},
													"nativeSrc": "3761:23:20",
													"nodeType": "YulFunctionCall",
													"src": "3761:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3786:3:20",
													"nodeType": "YulLiteral",
													"src": "3786:3:20",
													"type": "",
													"value": "224"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "3757:3:20",
												"nodeType": "YulIdentifier",
												"src": "3757:3:20"
											},
											"nativeSrc": "3757:33:20",
											"nodeType": "YulFunctionCall",
											"src": "3757:33:20"
										},
										"nativeSrc": "3754:53:20",
										"nodeType": "YulIf",
										"src": "3754:53:20"
									},
									{
										"nativeSrc": "3816:39:20",
										"nodeType": "YulAssignment",
										"src": "3816:39:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3845:9:20",
													"nodeType": "YulIdentifier",
													"src": "3845:9:20"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "3826:18:20",
												"nodeType": "YulIdentifier",
												"src": "3826:18:20"
											},
											"nativeSrc": "3826:29:20",
											"nodeType": "YulFunctionCall",
											"src": "3826:29:20"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "3816:6:20",
												"nodeType": "YulIdentifier",
												"src": "3816:6:20"
											}
										]
									},
									{
										"nativeSrc": "3864:48:20",
										"nodeType": "YulAssignment",
										"src": "3864:48:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3897:9:20",
															"nodeType": "YulIdentifier",
															"src": "3897:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3908:2:20",
															"nodeType": "YulLiteral",
															"src": "3908:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3893:3:20",
														"nodeType": "YulIdentifier",
														"src": "3893:3:20"
													},
													"nativeSrc": "3893:18:20",
													"nodeType": "YulFunctionCall",
													"src": "3893:18:20"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "3874:18:20",
												"nodeType": "YulIdentifier",
												"src": "3874:18:20"
											},
											"nativeSrc": "3874:38:20",
											"nodeType": "YulFunctionCall",
											"src": "3874:38:20"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "3864:6:20",
												"nodeType": "YulIdentifier",
												"src": "3864:6:20"
											}
										]
									},
									{
										"nativeSrc": "3921:14:20",
										"nodeType": "YulVariableDeclaration",
										"src": "3921:14:20",
										"value": {
											"kind": "number",
											"nativeSrc": "3934:1:20",
											"nodeType": "YulLiteral",
											"src": "3934:1:20",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "3925:5:20",
												"nodeType": "YulTypedName",
												"src": "3925:5:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3944:41:20",
										"nodeType": "YulAssignment",
										"src": "3944:41:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3970:9:20",
															"nodeType": "YulIdentifier",
															"src": "3970:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "3981:2:20",
															"nodeType": "YulLiteral",
															"src": "3981:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3966:3:20",
														"nodeType": "YulIdentifier",
														"src": "3966:3:20"
													},
													"nativeSrc": "3966:18:20",
													"nodeType": "YulFunctionCall",
													"src": "3966:18:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "3953:12:20",
												"nodeType": "YulIdentifier",
												"src": "3953:12:20"
											},
											"nativeSrc": "3953:32:20",
											"nodeType": "YulFunctionCall",
											"src": "3953:32:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "3944:5:20",
												"nodeType": "YulIdentifier",
												"src": "3944:5:20"
											}
										]
									},
									{
										"nativeSrc": "3994:15:20",
										"nodeType": "YulAssignment",
										"src": "3994:15:20",
										"value": {
											"name": "value",
											"nativeSrc": "4004:5:20",
											"nodeType": "YulIdentifier",
											"src": "4004:5:20"
										},
										"variableNames": [
											{
												"name": "value2",
												"nativeSrc": "3994:6:20",
												"nodeType": "YulIdentifier",
												"src": "3994:6:20"
											}
										]
									},
									{
										"nativeSrc": "4018:16:20",
										"nodeType": "YulVariableDeclaration",
										"src": "4018:16:20",
										"value": {
											"kind": "number",
											"nativeSrc": "4033:1:20",
											"nodeType": "YulLiteral",
											"src": "4033:1:20",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "value_1",
												"nativeSrc": "4022:7:20",
												"nodeType": "YulTypedName",
												"src": "4022:7:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "4043:43:20",
										"nodeType": "YulAssignment",
										"src": "4043:43:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4071:9:20",
															"nodeType": "YulIdentifier",
															"src": "4071:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "4082:2:20",
															"nodeType": "YulLiteral",
															"src": "4082:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4067:3:20",
														"nodeType": "YulIdentifier",
														"src": "4067:3:20"
													},
													"nativeSrc": "4067:18:20",
													"nodeType": "YulFunctionCall",
													"src": "4067:18:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "4054:12:20",
												"nodeType": "YulIdentifier",
												"src": "4054:12:20"
											},
											"nativeSrc": "4054:32:20",
											"nodeType": "YulFunctionCall",
											"src": "4054:32:20"
										},
										"variableNames": [
											{
												"name": "value_1",
												"nativeSrc": "4043:7:20",
												"nodeType": "YulIdentifier",
												"src": "4043:7:20"
											}
										]
									},
									{
										"nativeSrc": "4095:17:20",
										"nodeType": "YulAssignment",
										"src": "4095:17:20",
										"value": {
											"name": "value_1",
											"nativeSrc": "4105:7:20",
											"nodeType": "YulIdentifier",
											"src": "4105:7:20"
										},
										"variableNames": [
											{
												"name": "value3",
												"nativeSrc": "4095:6:20",
												"nodeType": "YulIdentifier",
												"src": "4095:6:20"
											}
										]
									},
									{
										"nativeSrc": "4121:48:20",
										"nodeType": "YulVariableDeclaration",
										"src": "4121:48:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4153:9:20",
															"nodeType": "YulIdentifier",
															"src": "4153:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "4164:3:20",
															"nodeType": "YulLiteral",
															"src": "4164:3:20",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4149:3:20",
														"nodeType": "YulIdentifier",
														"src": "4149:3:20"
													},
													"nativeSrc": "4149:19:20",
													"nodeType": "YulFunctionCall",
													"src": "4149:19:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "4136:12:20",
												"nodeType": "YulIdentifier",
												"src": "4136:12:20"
											},
											"nativeSrc": "4136:33:20",
											"nodeType": "YulFunctionCall",
											"src": "4136:33:20"
										},
										"variables": [
											{
												"name": "value_2",
												"nativeSrc": "4125:7:20",
												"nodeType": "YulTypedName",
												"src": "4125:7:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "4221:16:20",
											"nodeType": "YulBlock",
											"src": "4221:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "4230:1:20",
																"nodeType": "YulLiteral",
																"src": "4230:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "4233:1:20",
																"nodeType": "YulLiteral",
																"src": "4233:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "4223:6:20",
															"nodeType": "YulIdentifier",
															"src": "4223:6:20"
														},
														"nativeSrc": "4223:12:20",
														"nodeType": "YulFunctionCall",
														"src": "4223:12:20"
													},
													"nativeSrc": "4223:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "4223:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value_2",
															"nativeSrc": "4191:7:20",
															"nodeType": "YulIdentifier",
															"src": "4191:7:20"
														},
														{
															"arguments": [
																{
																	"name": "value_2",
																	"nativeSrc": "4204:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "4204:7:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "4213:4:20",
																	"nodeType": "YulLiteral",
																	"src": "4213:4:20",
																	"type": "",
																	"value": "0xff"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "4200:3:20",
																"nodeType": "YulIdentifier",
																"src": "4200:3:20"
															},
															"nativeSrc": "4200:18:20",
															"nodeType": "YulFunctionCall",
															"src": "4200:18:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "4188:2:20",
														"nodeType": "YulIdentifier",
														"src": "4188:2:20"
													},
													"nativeSrc": "4188:31:20",
													"nodeType": "YulFunctionCall",
													"src": "4188:31:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "4181:6:20",
												"nodeType": "YulIdentifier",
												"src": "4181:6:20"
											},
											"nativeSrc": "4181:39:20",
											"nodeType": "YulFunctionCall",
											"src": "4181:39:20"
										},
										"nativeSrc": "4178:59:20",
										"nodeType": "YulIf",
										"src": "4178:59:20"
									},
									{
										"nativeSrc": "4246:17:20",
										"nodeType": "YulAssignment",
										"src": "4246:17:20",
										"value": {
											"name": "value_2",
											"nativeSrc": "4256:7:20",
											"nodeType": "YulIdentifier",
											"src": "4256:7:20"
										},
										"variableNames": [
											{
												"name": "value4",
												"nativeSrc": "4246:6:20",
												"nodeType": "YulIdentifier",
												"src": "4246:6:20"
											}
										]
									},
									{
										"nativeSrc": "4272:16:20",
										"nodeType": "YulVariableDeclaration",
										"src": "4272:16:20",
										"value": {
											"kind": "number",
											"nativeSrc": "4287:1:20",
											"nodeType": "YulLiteral",
											"src": "4287:1:20",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "value_3",
												"nativeSrc": "4276:7:20",
												"nodeType": "YulTypedName",
												"src": "4276:7:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "4297:44:20",
										"nodeType": "YulAssignment",
										"src": "4297:44:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4325:9:20",
															"nodeType": "YulIdentifier",
															"src": "4325:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "4336:3:20",
															"nodeType": "YulLiteral",
															"src": "4336:3:20",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4321:3:20",
														"nodeType": "YulIdentifier",
														"src": "4321:3:20"
													},
													"nativeSrc": "4321:19:20",
													"nodeType": "YulFunctionCall",
													"src": "4321:19:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "4308:12:20",
												"nodeType": "YulIdentifier",
												"src": "4308:12:20"
											},
											"nativeSrc": "4308:33:20",
											"nodeType": "YulFunctionCall",
											"src": "4308:33:20"
										},
										"variableNames": [
											{
												"name": "value_3",
												"nativeSrc": "4297:7:20",
												"nodeType": "YulIdentifier",
												"src": "4297:7:20"
											}
										]
									},
									{
										"nativeSrc": "4350:17:20",
										"nodeType": "YulAssignment",
										"src": "4350:17:20",
										"value": {
											"name": "value_3",
											"nativeSrc": "4360:7:20",
											"nodeType": "YulIdentifier",
											"src": "4360:7:20"
										},
										"variableNames": [
											{
												"name": "value5",
												"nativeSrc": "4350:6:20",
												"nodeType": "YulIdentifier",
												"src": "4350:6:20"
											}
										]
									},
									{
										"nativeSrc": "4376:16:20",
										"nodeType": "YulVariableDeclaration",
										"src": "4376:16:20",
										"value": {
											"kind": "number",
											"nativeSrc": "4391:1:20",
											"nodeType": "YulLiteral",
											"src": "4391:1:20",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "value_4",
												"nativeSrc": "4380:7:20",
												"nodeType": "YulTypedName",
												"src": "4380:7:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "4401:44:20",
										"nodeType": "YulAssignment",
										"src": "4401:44:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4429:9:20",
															"nodeType": "YulIdentifier",
															"src": "4429:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "4440:3:20",
															"nodeType": "YulLiteral",
															"src": "4440:3:20",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4425:3:20",
														"nodeType": "YulIdentifier",
														"src": "4425:3:20"
													},
													"nativeSrc": "4425:19:20",
													"nodeType": "YulFunctionCall",
													"src": "4425:19:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "4412:12:20",
												"nodeType": "YulIdentifier",
												"src": "4412:12:20"
											},
											"nativeSrc": "4412:33:20",
											"nodeType": "YulFunctionCall",
											"src": "4412:33:20"
										},
										"variableNames": [
											{
												"name": "value_4",
												"nativeSrc": "4401:7:20",
												"nodeType": "YulIdentifier",
												"src": "4401:7:20"
											}
										]
									},
									{
										"nativeSrc": "4454:17:20",
										"nodeType": "YulAssignment",
										"src": "4454:17:20",
										"value": {
											"name": "value_4",
											"nativeSrc": "4464:7:20",
											"nodeType": "YulIdentifier",
											"src": "4464:7:20"
										},
										"variableNames": [
											{
												"name": "value6",
												"nativeSrc": "4454:6:20",
												"nodeType": "YulIdentifier",
												"src": "4454:6:20"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
							"nativeSrc": "3574:903:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3662:9:20",
									"nodeType": "YulTypedName",
									"src": "3662:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "3673:7:20",
									"nodeType": "YulTypedName",
									"src": "3673:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "3685:6:20",
									"nodeType": "YulTypedName",
									"src": "3685:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "3693:6:20",
									"nodeType": "YulTypedName",
									"src": "3693:6:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "3701:6:20",
									"nodeType": "YulTypedName",
									"src": "3701:6:20",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "3709:6:20",
									"nodeType": "YulTypedName",
									"src": "3709:6:20",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "3717:6:20",
									"nodeType": "YulTypedName",
									"src": "3717:6:20",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "3725:6:20",
									"nodeType": "YulTypedName",
									"src": "3725:6:20",
									"type": ""
								},
								{
									"name": "value6",
									"nativeSrc": "3733:6:20",
									"nodeType": "YulTypedName",
									"src": "3733:6:20",
									"type": ""
								}
							],
							"src": "3574:903:20"
						},
						{
							"body": {
								"nativeSrc": "4569:173:20",
								"nodeType": "YulBlock",
								"src": "4569:173:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "4615:16:20",
											"nodeType": "YulBlock",
											"src": "4615:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "4624:1:20",
																"nodeType": "YulLiteral",
																"src": "4624:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "4627:1:20",
																"nodeType": "YulLiteral",
																"src": "4627:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "4617:6:20",
															"nodeType": "YulIdentifier",
															"src": "4617:6:20"
														},
														"nativeSrc": "4617:12:20",
														"nodeType": "YulFunctionCall",
														"src": "4617:12:20"
													},
													"nativeSrc": "4617:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "4617:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "4590:7:20",
															"nodeType": "YulIdentifier",
															"src": "4590:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "4599:9:20",
															"nodeType": "YulIdentifier",
															"src": "4599:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "4586:3:20",
														"nodeType": "YulIdentifier",
														"src": "4586:3:20"
													},
													"nativeSrc": "4586:23:20",
													"nodeType": "YulFunctionCall",
													"src": "4586:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "4611:2:20",
													"nodeType": "YulLiteral",
													"src": "4611:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "4582:3:20",
												"nodeType": "YulIdentifier",
												"src": "4582:3:20"
											},
											"nativeSrc": "4582:32:20",
											"nodeType": "YulFunctionCall",
											"src": "4582:32:20"
										},
										"nativeSrc": "4579:52:20",
										"nodeType": "YulIf",
										"src": "4579:52:20"
									},
									{
										"nativeSrc": "4640:39:20",
										"nodeType": "YulAssignment",
										"src": "4640:39:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4669:9:20",
													"nodeType": "YulIdentifier",
													"src": "4669:9:20"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "4650:18:20",
												"nodeType": "YulIdentifier",
												"src": "4650:18:20"
											},
											"nativeSrc": "4650:29:20",
											"nodeType": "YulFunctionCall",
											"src": "4650:29:20"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "4640:6:20",
												"nodeType": "YulIdentifier",
												"src": "4640:6:20"
											}
										]
									},
									{
										"nativeSrc": "4688:48:20",
										"nodeType": "YulAssignment",
										"src": "4688:48:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4721:9:20",
															"nodeType": "YulIdentifier",
															"src": "4721:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "4732:2:20",
															"nodeType": "YulLiteral",
															"src": "4732:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4717:3:20",
														"nodeType": "YulIdentifier",
														"src": "4717:3:20"
													},
													"nativeSrc": "4717:18:20",
													"nodeType": "YulFunctionCall",
													"src": "4717:18:20"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "4698:18:20",
												"nodeType": "YulIdentifier",
												"src": "4698:18:20"
											},
											"nativeSrc": "4698:38:20",
											"nodeType": "YulFunctionCall",
											"src": "4698:38:20"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "4688:6:20",
												"nodeType": "YulIdentifier",
												"src": "4688:6:20"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_address",
							"nativeSrc": "4482:260:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4527:9:20",
									"nodeType": "YulTypedName",
									"src": "4527:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "4538:7:20",
									"nodeType": "YulTypedName",
									"src": "4538:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "4550:6:20",
									"nodeType": "YulTypedName",
									"src": "4550:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "4558:6:20",
									"nodeType": "YulTypedName",
									"src": "4558:6:20",
									"type": ""
								}
							],
							"src": "4482:260:20"
						},
						{
							"body": {
								"nativeSrc": "4802:325:20",
								"nodeType": "YulBlock",
								"src": "4802:325:20",
								"statements": [
									{
										"nativeSrc": "4812:22:20",
										"nodeType": "YulAssignment",
										"src": "4812:22:20",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "4826:1:20",
													"nodeType": "YulLiteral",
													"src": "4826:1:20",
													"type": "",
													"value": "1"
												},
												{
													"name": "data",
													"nativeSrc": "4829:4:20",
													"nodeType": "YulIdentifier",
													"src": "4829:4:20"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "4822:3:20",
												"nodeType": "YulIdentifier",
												"src": "4822:3:20"
											},
											"nativeSrc": "4822:12:20",
											"nodeType": "YulFunctionCall",
											"src": "4822:12:20"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "4812:6:20",
												"nodeType": "YulIdentifier",
												"src": "4812:6:20"
											}
										]
									},
									{
										"nativeSrc": "4843:38:20",
										"nodeType": "YulVariableDeclaration",
										"src": "4843:38:20",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "4873:4:20",
													"nodeType": "YulIdentifier",
													"src": "4873:4:20"
												},
												{
													"kind": "number",
													"nativeSrc": "4879:1:20",
													"nodeType": "YulLiteral",
													"src": "4879:1:20",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "4869:3:20",
												"nodeType": "YulIdentifier",
												"src": "4869:3:20"
											},
											"nativeSrc": "4869:12:20",
											"nodeType": "YulFunctionCall",
											"src": "4869:12:20"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "4847:18:20",
												"nodeType": "YulTypedName",
												"src": "4847:18:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "4920:31:20",
											"nodeType": "YulBlock",
											"src": "4920:31:20",
											"statements": [
												{
													"nativeSrc": "4922:27:20",
													"nodeType": "YulAssignment",
													"src": "4922:27:20",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "4936:6:20",
																"nodeType": "YulIdentifier",
																"src": "4936:6:20"
															},
															{
																"kind": "number",
																"nativeSrc": "4944:4:20",
																"nodeType": "YulLiteral",
																"src": "4944:4:20",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "4932:3:20",
															"nodeType": "YulIdentifier",
															"src": "4932:3:20"
														},
														"nativeSrc": "4932:17:20",
														"nodeType": "YulFunctionCall",
														"src": "4932:17:20"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "4922:6:20",
															"nodeType": "YulIdentifier",
															"src": "4922:6:20"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "4900:18:20",
													"nodeType": "YulIdentifier",
													"src": "4900:18:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "4893:6:20",
												"nodeType": "YulIdentifier",
												"src": "4893:6:20"
											},
											"nativeSrc": "4893:26:20",
											"nodeType": "YulFunctionCall",
											"src": "4893:26:20"
										},
										"nativeSrc": "4890:61:20",
										"nodeType": "YulIf",
										"src": "4890:61:20"
									},
									{
										"body": {
											"nativeSrc": "5010:111:20",
											"nodeType": "YulBlock",
											"src": "5010:111:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "5031:1:20",
																"nodeType": "YulLiteral",
																"src": "5031:1:20",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5038:3:20",
																		"nodeType": "YulLiteral",
																		"src": "5038:3:20",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5043:10:20",
																		"nodeType": "YulLiteral",
																		"src": "5043:10:20",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "5034:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5034:3:20"
																},
																"nativeSrc": "5034:20:20",
																"nodeType": "YulFunctionCall",
																"src": "5034:20:20"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "5024:6:20",
															"nodeType": "YulIdentifier",
															"src": "5024:6:20"
														},
														"nativeSrc": "5024:31:20",
														"nodeType": "YulFunctionCall",
														"src": "5024:31:20"
													},
													"nativeSrc": "5024:31:20",
													"nodeType": "YulExpressionStatement",
													"src": "5024:31:20"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "5075:1:20",
																"nodeType": "YulLiteral",
																"src": "5075:1:20",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nativeSrc": "5078:4:20",
																"nodeType": "YulLiteral",
																"src": "5078:4:20",
																"type": "",
																"value": "0x22"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "5068:6:20",
															"nodeType": "YulIdentifier",
															"src": "5068:6:20"
														},
														"nativeSrc": "5068:15:20",
														"nodeType": "YulFunctionCall",
														"src": "5068:15:20"
													},
													"nativeSrc": "5068:15:20",
													"nodeType": "YulExpressionStatement",
													"src": "5068:15:20"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "5103:1:20",
																"nodeType": "YulLiteral",
																"src": "5103:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "5106:4:20",
																"nodeType": "YulLiteral",
																"src": "5106:4:20",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "5096:6:20",
															"nodeType": "YulIdentifier",
															"src": "5096:6:20"
														},
														"nativeSrc": "5096:15:20",
														"nodeType": "YulFunctionCall",
														"src": "5096:15:20"
													},
													"nativeSrc": "5096:15:20",
													"nodeType": "YulExpressionStatement",
													"src": "5096:15:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "4966:18:20",
													"nodeType": "YulIdentifier",
													"src": "4966:18:20"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "4989:6:20",
															"nodeType": "YulIdentifier",
															"src": "4989:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "4997:2:20",
															"nodeType": "YulLiteral",
															"src": "4997:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "4986:2:20",
														"nodeType": "YulIdentifier",
														"src": "4986:2:20"
													},
													"nativeSrc": "4986:14:20",
													"nodeType": "YulFunctionCall",
													"src": "4986:14:20"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "4963:2:20",
												"nodeType": "YulIdentifier",
												"src": "4963:2:20"
											},
											"nativeSrc": "4963:38:20",
											"nodeType": "YulFunctionCall",
											"src": "4963:38:20"
										},
										"nativeSrc": "4960:161:20",
										"nodeType": "YulIf",
										"src": "4960:161:20"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "4747:380:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "4782:4:20",
									"nodeType": "YulTypedName",
									"src": "4782:4:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "4791:6:20",
									"nodeType": "YulTypedName",
									"src": "4791:6:20",
									"type": ""
								}
							],
							"src": "4747:380:20"
						},
						{
							"body": {
								"nativeSrc": "5164:95:20",
								"nodeType": "YulBlock",
								"src": "5164:95:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5181:1:20",
													"nodeType": "YulLiteral",
													"src": "5181:1:20",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "5188:3:20",
															"nodeType": "YulLiteral",
															"src": "5188:3:20",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "5193:10:20",
															"nodeType": "YulLiteral",
															"src": "5193:10:20",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "5184:3:20",
														"nodeType": "YulIdentifier",
														"src": "5184:3:20"
													},
													"nativeSrc": "5184:20:20",
													"nodeType": "YulFunctionCall",
													"src": "5184:20:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5174:6:20",
												"nodeType": "YulIdentifier",
												"src": "5174:6:20"
											},
											"nativeSrc": "5174:31:20",
											"nodeType": "YulFunctionCall",
											"src": "5174:31:20"
										},
										"nativeSrc": "5174:31:20",
										"nodeType": "YulExpressionStatement",
										"src": "5174:31:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5221:1:20",
													"nodeType": "YulLiteral",
													"src": "5221:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "5224:4:20",
													"nodeType": "YulLiteral",
													"src": "5224:4:20",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5214:6:20",
												"nodeType": "YulIdentifier",
												"src": "5214:6:20"
											},
											"nativeSrc": "5214:15:20",
											"nodeType": "YulFunctionCall",
											"src": "5214:15:20"
										},
										"nativeSrc": "5214:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "5214:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5245:1:20",
													"nodeType": "YulLiteral",
													"src": "5245:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "5248:4:20",
													"nodeType": "YulLiteral",
													"src": "5248:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "5238:6:20",
												"nodeType": "YulIdentifier",
												"src": "5238:6:20"
											},
											"nativeSrc": "5238:15:20",
											"nodeType": "YulFunctionCall",
											"src": "5238:15:20"
										},
										"nativeSrc": "5238:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "5238:15:20"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "5132:127:20",
							"nodeType": "YulFunctionDefinition",
							"src": "5132:127:20"
						},
						{
							"body": {
								"nativeSrc": "5505:346:20",
								"nodeType": "YulBlock",
								"src": "5505:346:20",
								"statements": [
									{
										"nativeSrc": "5515:27:20",
										"nodeType": "YulAssignment",
										"src": "5515:27:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5527:9:20",
													"nodeType": "YulIdentifier",
													"src": "5527:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "5538:3:20",
													"nodeType": "YulLiteral",
													"src": "5538:3:20",
													"type": "",
													"value": "192"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5523:3:20",
												"nodeType": "YulIdentifier",
												"src": "5523:3:20"
											},
											"nativeSrc": "5523:19:20",
											"nodeType": "YulFunctionCall",
											"src": "5523:19:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5515:4:20",
												"nodeType": "YulIdentifier",
												"src": "5515:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5558:9:20",
													"nodeType": "YulIdentifier",
													"src": "5558:9:20"
												},
												{
													"name": "value0",
													"nativeSrc": "5569:6:20",
													"nodeType": "YulIdentifier",
													"src": "5569:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5551:6:20",
												"nodeType": "YulIdentifier",
												"src": "5551:6:20"
											},
											"nativeSrc": "5551:25:20",
											"nodeType": "YulFunctionCall",
											"src": "5551:25:20"
										},
										"nativeSrc": "5551:25:20",
										"nodeType": "YulExpressionStatement",
										"src": "5551:25:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5596:9:20",
															"nodeType": "YulIdentifier",
															"src": "5596:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "5607:2:20",
															"nodeType": "YulLiteral",
															"src": "5607:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5592:3:20",
														"nodeType": "YulIdentifier",
														"src": "5592:3:20"
													},
													"nativeSrc": "5592:18:20",
													"nodeType": "YulFunctionCall",
													"src": "5592:18:20"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "5616:6:20",
															"nodeType": "YulIdentifier",
															"src": "5616:6:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "5632:3:20",
																			"nodeType": "YulLiteral",
																			"src": "5632:3:20",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "5637:1:20",
																			"nodeType": "YulLiteral",
																			"src": "5637:1:20",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "5628:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "5628:3:20"
																	},
																	"nativeSrc": "5628:11:20",
																	"nodeType": "YulFunctionCall",
																	"src": "5628:11:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "5641:1:20",
																	"nodeType": "YulLiteral",
																	"src": "5641:1:20",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "5624:3:20",
																"nodeType": "YulIdentifier",
																"src": "5624:3:20"
															},
															"nativeSrc": "5624:19:20",
															"nodeType": "YulFunctionCall",
															"src": "5624:19:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "5612:3:20",
														"nodeType": "YulIdentifier",
														"src": "5612:3:20"
													},
													"nativeSrc": "5612:32:20",
													"nodeType": "YulFunctionCall",
													"src": "5612:32:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5585:6:20",
												"nodeType": "YulIdentifier",
												"src": "5585:6:20"
											},
											"nativeSrc": "5585:60:20",
											"nodeType": "YulFunctionCall",
											"src": "5585:60:20"
										},
										"nativeSrc": "5585:60:20",
										"nodeType": "YulExpressionStatement",
										"src": "5585:60:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5665:9:20",
															"nodeType": "YulIdentifier",
															"src": "5665:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "5676:2:20",
															"nodeType": "YulLiteral",
															"src": "5676:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5661:3:20",
														"nodeType": "YulIdentifier",
														"src": "5661:3:20"
													},
													"nativeSrc": "5661:18:20",
													"nodeType": "YulFunctionCall",
													"src": "5661:18:20"
												},
												{
													"arguments": [
														{
															"name": "value2",
															"nativeSrc": "5685:6:20",
															"nodeType": "YulIdentifier",
															"src": "5685:6:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "5701:3:20",
																			"nodeType": "YulLiteral",
																			"src": "5701:3:20",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "5706:1:20",
																			"nodeType": "YulLiteral",
																			"src": "5706:1:20",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "5697:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "5697:3:20"
																	},
																	"nativeSrc": "5697:11:20",
																	"nodeType": "YulFunctionCall",
																	"src": "5697:11:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "5710:1:20",
																	"nodeType": "YulLiteral",
																	"src": "5710:1:20",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "5693:3:20",
																"nodeType": "YulIdentifier",
																"src": "5693:3:20"
															},
															"nativeSrc": "5693:19:20",
															"nodeType": "YulFunctionCall",
															"src": "5693:19:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "5681:3:20",
														"nodeType": "YulIdentifier",
														"src": "5681:3:20"
													},
													"nativeSrc": "5681:32:20",
													"nodeType": "YulFunctionCall",
													"src": "5681:32:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5654:6:20",
												"nodeType": "YulIdentifier",
												"src": "5654:6:20"
											},
											"nativeSrc": "5654:60:20",
											"nodeType": "YulFunctionCall",
											"src": "5654:60:20"
										},
										"nativeSrc": "5654:60:20",
										"nodeType": "YulExpressionStatement",
										"src": "5654:60:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5734:9:20",
															"nodeType": "YulIdentifier",
															"src": "5734:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "5745:2:20",
															"nodeType": "YulLiteral",
															"src": "5745:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5730:3:20",
														"nodeType": "YulIdentifier",
														"src": "5730:3:20"
													},
													"nativeSrc": "5730:18:20",
													"nodeType": "YulFunctionCall",
													"src": "5730:18:20"
												},
												{
													"name": "value3",
													"nativeSrc": "5750:6:20",
													"nodeType": "YulIdentifier",
													"src": "5750:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5723:6:20",
												"nodeType": "YulIdentifier",
												"src": "5723:6:20"
											},
											"nativeSrc": "5723:34:20",
											"nodeType": "YulFunctionCall",
											"src": "5723:34:20"
										},
										"nativeSrc": "5723:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "5723:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5777:9:20",
															"nodeType": "YulIdentifier",
															"src": "5777:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "5788:3:20",
															"nodeType": "YulLiteral",
															"src": "5788:3:20",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5773:3:20",
														"nodeType": "YulIdentifier",
														"src": "5773:3:20"
													},
													"nativeSrc": "5773:19:20",
													"nodeType": "YulFunctionCall",
													"src": "5773:19:20"
												},
												{
													"name": "value4",
													"nativeSrc": "5794:6:20",
													"nodeType": "YulIdentifier",
													"src": "5794:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5766:6:20",
												"nodeType": "YulIdentifier",
												"src": "5766:6:20"
											},
											"nativeSrc": "5766:35:20",
											"nodeType": "YulFunctionCall",
											"src": "5766:35:20"
										},
										"nativeSrc": "5766:35:20",
										"nodeType": "YulExpressionStatement",
										"src": "5766:35:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5821:9:20",
															"nodeType": "YulIdentifier",
															"src": "5821:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "5832:3:20",
															"nodeType": "YulLiteral",
															"src": "5832:3:20",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5817:3:20",
														"nodeType": "YulIdentifier",
														"src": "5817:3:20"
													},
													"nativeSrc": "5817:19:20",
													"nodeType": "YulFunctionCall",
													"src": "5817:19:20"
												},
												{
													"name": "value5",
													"nativeSrc": "5838:6:20",
													"nodeType": "YulIdentifier",
													"src": "5838:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5810:6:20",
												"nodeType": "YulIdentifier",
												"src": "5810:6:20"
											},
											"nativeSrc": "5810:35:20",
											"nodeType": "YulFunctionCall",
											"src": "5810:35:20"
										},
										"nativeSrc": "5810:35:20",
										"nodeType": "YulExpressionStatement",
										"src": "5810:35:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "5264:587:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5434:9:20",
									"nodeType": "YulTypedName",
									"src": "5434:9:20",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "5445:6:20",
									"nodeType": "YulTypedName",
									"src": "5445:6:20",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "5453:6:20",
									"nodeType": "YulTypedName",
									"src": "5453:6:20",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "5461:6:20",
									"nodeType": "YulTypedName",
									"src": "5461:6:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "5469:6:20",
									"nodeType": "YulTypedName",
									"src": "5469:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "5477:6:20",
									"nodeType": "YulTypedName",
									"src": "5477:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5485:6:20",
									"nodeType": "YulTypedName",
									"src": "5485:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5496:4:20",
									"nodeType": "YulTypedName",
									"src": "5496:4:20",
									"type": ""
								}
							],
							"src": "5264:587:20"
						},
						{
							"body": {
								"nativeSrc": "5985:171:20",
								"nodeType": "YulBlock",
								"src": "5985:171:20",
								"statements": [
									{
										"nativeSrc": "5995:26:20",
										"nodeType": "YulAssignment",
										"src": "5995:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6007:9:20",
													"nodeType": "YulIdentifier",
													"src": "6007:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "6018:2:20",
													"nodeType": "YulLiteral",
													"src": "6018:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6003:3:20",
												"nodeType": "YulIdentifier",
												"src": "6003:3:20"
											},
											"nativeSrc": "6003:18:20",
											"nodeType": "YulFunctionCall",
											"src": "6003:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5995:4:20",
												"nodeType": "YulIdentifier",
												"src": "5995:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6037:9:20",
													"nodeType": "YulIdentifier",
													"src": "6037:9:20"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "6052:6:20",
															"nodeType": "YulIdentifier",
															"src": "6052:6:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "6068:3:20",
																			"nodeType": "YulLiteral",
																			"src": "6068:3:20",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "6073:1:20",
																			"nodeType": "YulLiteral",
																			"src": "6073:1:20",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "6064:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "6064:3:20"
																	},
																	"nativeSrc": "6064:11:20",
																	"nodeType": "YulFunctionCall",
																	"src": "6064:11:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "6077:1:20",
																	"nodeType": "YulLiteral",
																	"src": "6077:1:20",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "6060:3:20",
																"nodeType": "YulIdentifier",
																"src": "6060:3:20"
															},
															"nativeSrc": "6060:19:20",
															"nodeType": "YulFunctionCall",
															"src": "6060:19:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "6048:3:20",
														"nodeType": "YulIdentifier",
														"src": "6048:3:20"
													},
													"nativeSrc": "6048:32:20",
													"nodeType": "YulFunctionCall",
													"src": "6048:32:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6030:6:20",
												"nodeType": "YulIdentifier",
												"src": "6030:6:20"
											},
											"nativeSrc": "6030:51:20",
											"nodeType": "YulFunctionCall",
											"src": "6030:51:20"
										},
										"nativeSrc": "6030:51:20",
										"nodeType": "YulExpressionStatement",
										"src": "6030:51:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6101:9:20",
															"nodeType": "YulIdentifier",
															"src": "6101:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "6112:2:20",
															"nodeType": "YulLiteral",
															"src": "6112:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6097:3:20",
														"nodeType": "YulIdentifier",
														"src": "6097:3:20"
													},
													"nativeSrc": "6097:18:20",
													"nodeType": "YulFunctionCall",
													"src": "6097:18:20"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "6121:6:20",
															"nodeType": "YulIdentifier",
															"src": "6121:6:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "6137:3:20",
																			"nodeType": "YulLiteral",
																			"src": "6137:3:20",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "6142:1:20",
																			"nodeType": "YulLiteral",
																			"src": "6142:1:20",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "6133:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "6133:3:20"
																	},
																	"nativeSrc": "6133:11:20",
																	"nodeType": "YulFunctionCall",
																	"src": "6133:11:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "6146:1:20",
																	"nodeType": "YulLiteral",
																	"src": "6146:1:20",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "6129:3:20",
																"nodeType": "YulIdentifier",
																"src": "6129:3:20"
															},
															"nativeSrc": "6129:19:20",
															"nodeType": "YulFunctionCall",
															"src": "6129:19:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "6117:3:20",
														"nodeType": "YulIdentifier",
														"src": "6117:3:20"
													},
													"nativeSrc": "6117:32:20",
													"nodeType": "YulFunctionCall",
													"src": "6117:32:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6090:6:20",
												"nodeType": "YulIdentifier",
												"src": "6090:6:20"
											},
											"nativeSrc": "6090:60:20",
											"nodeType": "YulFunctionCall",
											"src": "6090:60:20"
										},
										"nativeSrc": "6090:60:20",
										"nodeType": "YulExpressionStatement",
										"src": "6090:60:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
							"nativeSrc": "5856:300:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5946:9:20",
									"nodeType": "YulTypedName",
									"src": "5946:9:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "5957:6:20",
									"nodeType": "YulTypedName",
									"src": "5957:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5965:6:20",
									"nodeType": "YulTypedName",
									"src": "5965:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5976:4:20",
									"nodeType": "YulTypedName",
									"src": "5976:4:20",
									"type": ""
								}
							],
							"src": "5856:300:20"
						},
						{
							"body": {
								"nativeSrc": "6492:431:20",
								"nodeType": "YulBlock",
								"src": "6492:431:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6509:9:20",
													"nodeType": "YulIdentifier",
													"src": "6509:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "6520:2:20",
													"nodeType": "YulLiteral",
													"src": "6520:2:20",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6502:6:20",
												"nodeType": "YulIdentifier",
												"src": "6502:6:20"
											},
											"nativeSrc": "6502:21:20",
											"nodeType": "YulFunctionCall",
											"src": "6502:21:20"
										},
										"nativeSrc": "6502:21:20",
										"nodeType": "YulExpressionStatement",
										"src": "6502:21:20"
									},
									{
										"nativeSrc": "6532:59:20",
										"nodeType": "YulVariableDeclaration",
										"src": "6532:59:20",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "6564:6:20",
													"nodeType": "YulIdentifier",
													"src": "6564:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6576:9:20",
															"nodeType": "YulIdentifier",
															"src": "6576:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "6587:2:20",
															"nodeType": "YulLiteral",
															"src": "6587:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6572:3:20",
														"nodeType": "YulIdentifier",
														"src": "6572:3:20"
													},
													"nativeSrc": "6572:18:20",
													"nodeType": "YulFunctionCall",
													"src": "6572:18:20"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "6546:17:20",
												"nodeType": "YulIdentifier",
												"src": "6546:17:20"
											},
											"nativeSrc": "6546:45:20",
											"nodeType": "YulFunctionCall",
											"src": "6546:45:20"
										},
										"variables": [
											{
												"name": "tail_1",
												"nativeSrc": "6536:6:20",
												"nodeType": "YulTypedName",
												"src": "6536:6:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "6600:32:20",
										"nodeType": "YulVariableDeclaration",
										"src": "6600:32:20",
										"value": {
											"arguments": [
												{
													"name": "tail_1",
													"nativeSrc": "6614:6:20",
													"nodeType": "YulIdentifier",
													"src": "6614:6:20"
												},
												{
													"name": "headStart",
													"nativeSrc": "6622:9:20",
													"nodeType": "YulIdentifier",
													"src": "6622:9:20"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "6610:3:20",
												"nodeType": "YulIdentifier",
												"src": "6610:3:20"
											},
											"nativeSrc": "6610:22:20",
											"nodeType": "YulFunctionCall",
											"src": "6610:22:20"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "6604:2:20",
												"nodeType": "YulTypedName",
												"src": "6604:2:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6652:9:20",
															"nodeType": "YulIdentifier",
															"src": "6652:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "6663:2:20",
															"nodeType": "YulLiteral",
															"src": "6663:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6648:3:20",
														"nodeType": "YulIdentifier",
														"src": "6648:3:20"
													},
													"nativeSrc": "6648:18:20",
													"nodeType": "YulFunctionCall",
													"src": "6648:18:20"
												},
												{
													"name": "_1",
													"nativeSrc": "6668:2:20",
													"nodeType": "YulIdentifier",
													"src": "6668:2:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6641:6:20",
												"nodeType": "YulIdentifier",
												"src": "6641:6:20"
											},
											"nativeSrc": "6641:30:20",
											"nodeType": "YulFunctionCall",
											"src": "6641:30:20"
										},
										"nativeSrc": "6641:30:20",
										"nodeType": "YulExpressionStatement",
										"src": "6641:30:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "tail_1",
													"nativeSrc": "6687:6:20",
													"nodeType": "YulIdentifier",
													"src": "6687:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "6695:1:20",
													"nodeType": "YulLiteral",
													"src": "6695:1:20",
													"type": "",
													"value": "7"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6680:6:20",
												"nodeType": "YulIdentifier",
												"src": "6680:6:20"
											},
											"nativeSrc": "6680:17:20",
											"nodeType": "YulFunctionCall",
											"src": "6680:17:20"
										},
										"nativeSrc": "6680:17:20",
										"nodeType": "YulExpressionStatement",
										"src": "6680:17:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "tail_1",
															"nativeSrc": "6717:6:20",
															"nodeType": "YulIdentifier",
															"src": "6717:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "6725:2:20",
															"nodeType": "YulLiteral",
															"src": "6725:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6713:3:20",
														"nodeType": "YulIdentifier",
														"src": "6713:3:20"
													},
													"nativeSrc": "6713:15:20",
													"nodeType": "YulFunctionCall",
													"src": "6713:15:20"
												},
												{
													"hexValue": "4d79546f6b656e",
													"kind": "string",
													"nativeSrc": "6730:9:20",
													"nodeType": "YulLiteral",
													"src": "6730:9:20",
													"type": "",
													"value": "MyToken"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6706:6:20",
												"nodeType": "YulIdentifier",
												"src": "6706:6:20"
											},
											"nativeSrc": "6706:34:20",
											"nodeType": "YulFunctionCall",
											"src": "6706:34:20"
										},
										"nativeSrc": "6706:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "6706:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6760:9:20",
															"nodeType": "YulIdentifier",
															"src": "6760:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "6771:2:20",
															"nodeType": "YulLiteral",
															"src": "6771:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6756:3:20",
														"nodeType": "YulIdentifier",
														"src": "6756:3:20"
													},
													"nativeSrc": "6756:18:20",
													"nodeType": "YulFunctionCall",
													"src": "6756:18:20"
												},
												{
													"arguments": [
														{
															"name": "_1",
															"nativeSrc": "6780:2:20",
															"nodeType": "YulIdentifier",
															"src": "6780:2:20"
														},
														{
															"kind": "number",
															"nativeSrc": "6784:2:20",
															"nodeType": "YulLiteral",
															"src": "6784:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6776:3:20",
														"nodeType": "YulIdentifier",
														"src": "6776:3:20"
													},
													"nativeSrc": "6776:11:20",
													"nodeType": "YulFunctionCall",
													"src": "6776:11:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6749:6:20",
												"nodeType": "YulIdentifier",
												"src": "6749:6:20"
											},
											"nativeSrc": "6749:39:20",
											"nodeType": "YulFunctionCall",
											"src": "6749:39:20"
										},
										"nativeSrc": "6749:39:20",
										"nodeType": "YulExpressionStatement",
										"src": "6749:39:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "tail_1",
															"nativeSrc": "6808:6:20",
															"nodeType": "YulIdentifier",
															"src": "6808:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "6816:2:20",
															"nodeType": "YulLiteral",
															"src": "6816:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6804:3:20",
														"nodeType": "YulIdentifier",
														"src": "6804:3:20"
													},
													"nativeSrc": "6804:15:20",
													"nodeType": "YulFunctionCall",
													"src": "6804:15:20"
												},
												{
													"kind": "number",
													"nativeSrc": "6821:2:20",
													"nodeType": "YulLiteral",
													"src": "6821:2:20",
													"type": "",
													"value": "24"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6797:6:20",
												"nodeType": "YulIdentifier",
												"src": "6797:6:20"
											},
											"nativeSrc": "6797:27:20",
											"nodeType": "YulFunctionCall",
											"src": "6797:27:20"
										},
										"nativeSrc": "6797:27:20",
										"nodeType": "YulExpressionStatement",
										"src": "6797:27:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "tail_1",
															"nativeSrc": "6844:6:20",
															"nodeType": "YulIdentifier",
															"src": "6844:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "6852:2:20",
															"nodeType": "YulLiteral",
															"src": "6852:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6840:3:20",
														"nodeType": "YulIdentifier",
														"src": "6840:3:20"
													},
													"nativeSrc": "6840:15:20",
													"nodeType": "YulFunctionCall",
													"src": "6840:15:20"
												},
												{
													"hexValue": "746f6b656e206e616d6520646964206e6f74206d61746368",
													"kind": "string",
													"nativeSrc": "6857:26:20",
													"nodeType": "YulLiteral",
													"src": "6857:26:20",
													"type": "",
													"value": "token name did not match"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6833:6:20",
												"nodeType": "YulIdentifier",
												"src": "6833:6:20"
											},
											"nativeSrc": "6833:51:20",
											"nodeType": "YulFunctionCall",
											"src": "6833:51:20"
										},
										"nativeSrc": "6833:51:20",
										"nodeType": "YulExpressionStatement",
										"src": "6833:51:20"
									},
									{
										"nativeSrc": "6893:24:20",
										"nodeType": "YulAssignment",
										"src": "6893:24:20",
										"value": {
											"arguments": [
												{
													"name": "tail_1",
													"nativeSrc": "6905:6:20",
													"nodeType": "YulIdentifier",
													"src": "6905:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "6913:3:20",
													"nodeType": "YulLiteral",
													"src": "6913:3:20",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6901:3:20",
												"nodeType": "YulIdentifier",
												"src": "6901:3:20"
											},
											"nativeSrc": "6901:16:20",
											"nodeType": "YulFunctionCall",
											"src": "6901:16:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "6893:4:20",
												"nodeType": "YulIdentifier",
												"src": "6893:4:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr_t_stringliteral_245c734e6d4ec044daf7beffa09d54d4bafba490113c199734d790b04a7390e5_t_stringliteral_ded2ee270d71437b5f0a954775141c9e9df919b36f4fe17a99e646e4c3c69936__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_library_reversed",
							"nativeSrc": "6161:762:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6461:9:20",
									"nodeType": "YulTypedName",
									"src": "6461:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "6472:6:20",
									"nodeType": "YulTypedName",
									"src": "6472:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "6483:4:20",
									"nodeType": "YulTypedName",
									"src": "6483:4:20",
									"type": ""
								}
							],
							"src": "6161:762:20"
						},
						{
							"body": {
								"nativeSrc": "7006:199:20",
								"nodeType": "YulBlock",
								"src": "7006:199:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "7052:16:20",
											"nodeType": "YulBlock",
											"src": "7052:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "7061:1:20",
																"nodeType": "YulLiteral",
																"src": "7061:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "7064:1:20",
																"nodeType": "YulLiteral",
																"src": "7064:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "7054:6:20",
															"nodeType": "YulIdentifier",
															"src": "7054:6:20"
														},
														"nativeSrc": "7054:12:20",
														"nodeType": "YulFunctionCall",
														"src": "7054:12:20"
													},
													"nativeSrc": "7054:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "7054:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "7027:7:20",
															"nodeType": "YulIdentifier",
															"src": "7027:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "7036:9:20",
															"nodeType": "YulIdentifier",
															"src": "7036:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "7023:3:20",
														"nodeType": "YulIdentifier",
														"src": "7023:3:20"
													},
													"nativeSrc": "7023:23:20",
													"nodeType": "YulFunctionCall",
													"src": "7023:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "7048:2:20",
													"nodeType": "YulLiteral",
													"src": "7048:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "7019:3:20",
												"nodeType": "YulIdentifier",
												"src": "7019:3:20"
											},
											"nativeSrc": "7019:32:20",
											"nodeType": "YulFunctionCall",
											"src": "7019:32:20"
										},
										"nativeSrc": "7016:52:20",
										"nodeType": "YulIf",
										"src": "7016:52:20"
									},
									{
										"nativeSrc": "7077:29:20",
										"nodeType": "YulVariableDeclaration",
										"src": "7077:29:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7096:9:20",
													"nodeType": "YulIdentifier",
													"src": "7096:9:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "7090:5:20",
												"nodeType": "YulIdentifier",
												"src": "7090:5:20"
											},
											"nativeSrc": "7090:16:20",
											"nodeType": "YulFunctionCall",
											"src": "7090:16:20"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "7081:5:20",
												"nodeType": "YulTypedName",
												"src": "7081:5:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "7159:16:20",
											"nodeType": "YulBlock",
											"src": "7159:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "7168:1:20",
																"nodeType": "YulLiteral",
																"src": "7168:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "7171:1:20",
																"nodeType": "YulLiteral",
																"src": "7171:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "7161:6:20",
															"nodeType": "YulIdentifier",
															"src": "7161:6:20"
														},
														"nativeSrc": "7161:12:20",
														"nodeType": "YulFunctionCall",
														"src": "7161:12:20"
													},
													"nativeSrc": "7161:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "7161:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "7128:5:20",
															"nodeType": "YulIdentifier",
															"src": "7128:5:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nativeSrc": "7149:5:20",
																			"nodeType": "YulIdentifier",
																			"src": "7149:5:20"
																		}
																	],
																	"functionName": {
																		"name": "iszero",
																		"nativeSrc": "7142:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7142:6:20"
																	},
																	"nativeSrc": "7142:13:20",
																	"nodeType": "YulFunctionCall",
																	"src": "7142:13:20"
																}
															],
															"functionName": {
																"name": "iszero",
																"nativeSrc": "7135:6:20",
																"nodeType": "YulIdentifier",
																"src": "7135:6:20"
															},
															"nativeSrc": "7135:21:20",
															"nodeType": "YulFunctionCall",
															"src": "7135:21:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "7125:2:20",
														"nodeType": "YulIdentifier",
														"src": "7125:2:20"
													},
													"nativeSrc": "7125:32:20",
													"nodeType": "YulFunctionCall",
													"src": "7125:32:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "7118:6:20",
												"nodeType": "YulIdentifier",
												"src": "7118:6:20"
											},
											"nativeSrc": "7118:40:20",
											"nodeType": "YulFunctionCall",
											"src": "7118:40:20"
										},
										"nativeSrc": "7115:60:20",
										"nodeType": "YulIf",
										"src": "7115:60:20"
									},
									{
										"nativeSrc": "7184:15:20",
										"nodeType": "YulAssignment",
										"src": "7184:15:20",
										"value": {
											"name": "value",
											"nativeSrc": "7194:5:20",
											"nodeType": "YulIdentifier",
											"src": "7194:5:20"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "7184:6:20",
												"nodeType": "YulIdentifier",
												"src": "7184:6:20"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_bool_fromMemory",
							"nativeSrc": "6928:277:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6972:9:20",
									"nodeType": "YulTypedName",
									"src": "6972:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "6983:7:20",
									"nodeType": "YulTypedName",
									"src": "6983:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "6995:6:20",
									"nodeType": "YulTypedName",
									"src": "6995:6:20",
									"type": ""
								}
							],
							"src": "6928:277:20"
						},
						{
							"body": {
								"nativeSrc": "7541:429:20",
								"nodeType": "YulBlock",
								"src": "7541:429:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7558:9:20",
													"nodeType": "YulIdentifier",
													"src": "7558:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "7569:2:20",
													"nodeType": "YulLiteral",
													"src": "7569:2:20",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7551:6:20",
												"nodeType": "YulIdentifier",
												"src": "7551:6:20"
											},
											"nativeSrc": "7551:21:20",
											"nodeType": "YulFunctionCall",
											"src": "7551:21:20"
										},
										"nativeSrc": "7551:21:20",
										"nodeType": "YulExpressionStatement",
										"src": "7551:21:20"
									},
									{
										"nativeSrc": "7581:59:20",
										"nodeType": "YulVariableDeclaration",
										"src": "7581:59:20",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "7613:6:20",
													"nodeType": "YulIdentifier",
													"src": "7613:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7625:9:20",
															"nodeType": "YulIdentifier",
															"src": "7625:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "7636:2:20",
															"nodeType": "YulLiteral",
															"src": "7636:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7621:3:20",
														"nodeType": "YulIdentifier",
														"src": "7621:3:20"
													},
													"nativeSrc": "7621:18:20",
													"nodeType": "YulFunctionCall",
													"src": "7621:18:20"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "7595:17:20",
												"nodeType": "YulIdentifier",
												"src": "7595:17:20"
											},
											"nativeSrc": "7595:45:20",
											"nodeType": "YulFunctionCall",
											"src": "7595:45:20"
										},
										"variables": [
											{
												"name": "tail_1",
												"nativeSrc": "7585:6:20",
												"nodeType": "YulTypedName",
												"src": "7585:6:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "7649:32:20",
										"nodeType": "YulVariableDeclaration",
										"src": "7649:32:20",
										"value": {
											"arguments": [
												{
													"name": "tail_1",
													"nativeSrc": "7663:6:20",
													"nodeType": "YulIdentifier",
													"src": "7663:6:20"
												},
												{
													"name": "headStart",
													"nativeSrc": "7671:9:20",
													"nodeType": "YulIdentifier",
													"src": "7671:9:20"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "7659:3:20",
												"nodeType": "YulIdentifier",
												"src": "7659:3:20"
											},
											"nativeSrc": "7659:22:20",
											"nodeType": "YulFunctionCall",
											"src": "7659:22:20"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "7653:2:20",
												"nodeType": "YulTypedName",
												"src": "7653:2:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7701:9:20",
															"nodeType": "YulIdentifier",
															"src": "7701:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "7712:2:20",
															"nodeType": "YulLiteral",
															"src": "7712:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7697:3:20",
														"nodeType": "YulIdentifier",
														"src": "7697:3:20"
													},
													"nativeSrc": "7697:18:20",
													"nodeType": "YulFunctionCall",
													"src": "7697:18:20"
												},
												{
													"name": "_1",
													"nativeSrc": "7717:2:20",
													"nodeType": "YulIdentifier",
													"src": "7717:2:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7690:6:20",
												"nodeType": "YulIdentifier",
												"src": "7690:6:20"
											},
											"nativeSrc": "7690:30:20",
											"nodeType": "YulFunctionCall",
											"src": "7690:30:20"
										},
										"nativeSrc": "7690:30:20",
										"nodeType": "YulExpressionStatement",
										"src": "7690:30:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "tail_1",
													"nativeSrc": "7736:6:20",
													"nodeType": "YulIdentifier",
													"src": "7736:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "7744:1:20",
													"nodeType": "YulLiteral",
													"src": "7744:1:20",
													"type": "",
													"value": "3"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7729:6:20",
												"nodeType": "YulIdentifier",
												"src": "7729:6:20"
											},
											"nativeSrc": "7729:17:20",
											"nodeType": "YulFunctionCall",
											"src": "7729:17:20"
										},
										"nativeSrc": "7729:17:20",
										"nodeType": "YulExpressionStatement",
										"src": "7729:17:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "tail_1",
															"nativeSrc": "7766:6:20",
															"nodeType": "YulIdentifier",
															"src": "7766:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "7774:2:20",
															"nodeType": "YulLiteral",
															"src": "7774:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7762:3:20",
														"nodeType": "YulIdentifier",
														"src": "7762:3:20"
													},
													"nativeSrc": "7762:15:20",
													"nodeType": "YulFunctionCall",
													"src": "7762:15:20"
												},
												{
													"hexValue": "4d544b",
													"kind": "string",
													"nativeSrc": "7779:5:20",
													"nodeType": "YulLiteral",
													"src": "7779:5:20",
													"type": "",
													"value": "MTK"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7755:6:20",
												"nodeType": "YulIdentifier",
												"src": "7755:6:20"
											},
											"nativeSrc": "7755:30:20",
											"nodeType": "YulFunctionCall",
											"src": "7755:30:20"
										},
										"nativeSrc": "7755:30:20",
										"nodeType": "YulExpressionStatement",
										"src": "7755:30:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7805:9:20",
															"nodeType": "YulIdentifier",
															"src": "7805:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "7816:2:20",
															"nodeType": "YulLiteral",
															"src": "7816:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7801:3:20",
														"nodeType": "YulIdentifier",
														"src": "7801:3:20"
													},
													"nativeSrc": "7801:18:20",
													"nodeType": "YulFunctionCall",
													"src": "7801:18:20"
												},
												{
													"arguments": [
														{
															"name": "_1",
															"nativeSrc": "7825:2:20",
															"nodeType": "YulIdentifier",
															"src": "7825:2:20"
														},
														{
															"kind": "number",
															"nativeSrc": "7829:2:20",
															"nodeType": "YulLiteral",
															"src": "7829:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7821:3:20",
														"nodeType": "YulIdentifier",
														"src": "7821:3:20"
													},
													"nativeSrc": "7821:11:20",
													"nodeType": "YulFunctionCall",
													"src": "7821:11:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7794:6:20",
												"nodeType": "YulIdentifier",
												"src": "7794:6:20"
											},
											"nativeSrc": "7794:39:20",
											"nodeType": "YulFunctionCall",
											"src": "7794:39:20"
										},
										"nativeSrc": "7794:39:20",
										"nodeType": "YulExpressionStatement",
										"src": "7794:39:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "tail_1",
															"nativeSrc": "7853:6:20",
															"nodeType": "YulIdentifier",
															"src": "7853:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "7861:2:20",
															"nodeType": "YulLiteral",
															"src": "7861:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7849:3:20",
														"nodeType": "YulIdentifier",
														"src": "7849:3:20"
													},
													"nativeSrc": "7849:15:20",
													"nodeType": "YulFunctionCall",
													"src": "7849:15:20"
												},
												{
													"kind": "number",
													"nativeSrc": "7866:2:20",
													"nodeType": "YulLiteral",
													"src": "7866:2:20",
													"type": "",
													"value": "26"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7842:6:20",
												"nodeType": "YulIdentifier",
												"src": "7842:6:20"
											},
											"nativeSrc": "7842:27:20",
											"nodeType": "YulFunctionCall",
											"src": "7842:27:20"
										},
										"nativeSrc": "7842:27:20",
										"nodeType": "YulExpressionStatement",
										"src": "7842:27:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "tail_1",
															"nativeSrc": "7889:6:20",
															"nodeType": "YulIdentifier",
															"src": "7889:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "7897:2:20",
															"nodeType": "YulLiteral",
															"src": "7897:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7885:3:20",
														"nodeType": "YulIdentifier",
														"src": "7885:3:20"
													},
													"nativeSrc": "7885:15:20",
													"nodeType": "YulFunctionCall",
													"src": "7885:15:20"
												},
												{
													"hexValue": "746f6b656e2073796d626f6c20646964206e6f74206d61746368",
													"kind": "string",
													"nativeSrc": "7902:28:20",
													"nodeType": "YulLiteral",
													"src": "7902:28:20",
													"type": "",
													"value": "token symbol did not match"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7878:6:20",
												"nodeType": "YulIdentifier",
												"src": "7878:6:20"
											},
											"nativeSrc": "7878:53:20",
											"nodeType": "YulFunctionCall",
											"src": "7878:53:20"
										},
										"nativeSrc": "7878:53:20",
										"nodeType": "YulExpressionStatement",
										"src": "7878:53:20"
									},
									{
										"nativeSrc": "7940:24:20",
										"nodeType": "YulAssignment",
										"src": "7940:24:20",
										"value": {
											"arguments": [
												{
													"name": "tail_1",
													"nativeSrc": "7952:6:20",
													"nodeType": "YulIdentifier",
													"src": "7952:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "7960:3:20",
													"nodeType": "YulLiteral",
													"src": "7960:3:20",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7948:3:20",
												"nodeType": "YulIdentifier",
												"src": "7948:3:20"
											},
											"nativeSrc": "7948:16:20",
											"nodeType": "YulFunctionCall",
											"src": "7948:16:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "7940:4:20",
												"nodeType": "YulIdentifier",
												"src": "7940:4:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr_t_stringliteral_793539e36336d70961c91bdb898dff4b065dbb5ef5ac709025f5b68be91dd01e_t_stringliteral_f575216461f54c2e041738e8b8d199f72eb6be1f077174aaf571aabf6568860d__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_library_reversed",
							"nativeSrc": "7210:760:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "7510:9:20",
									"nodeType": "YulTypedName",
									"src": "7510:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "7521:6:20",
									"nodeType": "YulTypedName",
									"src": "7521:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "7532:4:20",
									"nodeType": "YulTypedName",
									"src": "7532:4:20",
									"type": ""
								}
							],
							"src": "7210:760:20"
						},
						{
							"body": {
								"nativeSrc": "8220:277:20",
								"nodeType": "YulBlock",
								"src": "8220:277:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "8237:9:20",
													"nodeType": "YulIdentifier",
													"src": "8237:9:20"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "8252:6:20",
															"nodeType": "YulIdentifier",
															"src": "8252:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "8260:4:20",
															"nodeType": "YulLiteral",
															"src": "8260:4:20",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "8248:3:20",
														"nodeType": "YulIdentifier",
														"src": "8248:3:20"
													},
													"nativeSrc": "8248:17:20",
													"nodeType": "YulFunctionCall",
													"src": "8248:17:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8230:6:20",
												"nodeType": "YulIdentifier",
												"src": "8230:6:20"
											},
											"nativeSrc": "8230:36:20",
											"nodeType": "YulFunctionCall",
											"src": "8230:36:20"
										},
										"nativeSrc": "8230:36:20",
										"nodeType": "YulExpressionStatement",
										"src": "8230:36:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8286:9:20",
															"nodeType": "YulIdentifier",
															"src": "8286:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "8297:2:20",
															"nodeType": "YulLiteral",
															"src": "8297:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8282:3:20",
														"nodeType": "YulIdentifier",
														"src": "8282:3:20"
													},
													"nativeSrc": "8282:18:20",
													"nodeType": "YulFunctionCall",
													"src": "8282:18:20"
												},
												{
													"name": "value1",
													"nativeSrc": "8302:6:20",
													"nodeType": "YulIdentifier",
													"src": "8302:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8275:6:20",
												"nodeType": "YulIdentifier",
												"src": "8275:6:20"
											},
											"nativeSrc": "8275:34:20",
											"nodeType": "YulFunctionCall",
											"src": "8275:34:20"
										},
										"nativeSrc": "8275:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "8275:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8329:9:20",
															"nodeType": "YulIdentifier",
															"src": "8329:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "8340:2:20",
															"nodeType": "YulLiteral",
															"src": "8340:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8325:3:20",
														"nodeType": "YulIdentifier",
														"src": "8325:3:20"
													},
													"nativeSrc": "8325:18:20",
													"nodeType": "YulFunctionCall",
													"src": "8325:18:20"
												},
												{
													"kind": "number",
													"nativeSrc": "8345:2:20",
													"nodeType": "YulLiteral",
													"src": "8345:2:20",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8318:6:20",
												"nodeType": "YulIdentifier",
												"src": "8318:6:20"
											},
											"nativeSrc": "8318:30:20",
											"nodeType": "YulFunctionCall",
											"src": "8318:30:20"
										},
										"nativeSrc": "8318:30:20",
										"nodeType": "YulExpressionStatement",
										"src": "8318:30:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8368:9:20",
															"nodeType": "YulIdentifier",
															"src": "8368:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "8379:2:20",
															"nodeType": "YulLiteral",
															"src": "8379:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8364:3:20",
														"nodeType": "YulIdentifier",
														"src": "8364:3:20"
													},
													"nativeSrc": "8364:18:20",
													"nodeType": "YulFunctionCall",
													"src": "8364:18:20"
												},
												{
													"kind": "number",
													"nativeSrc": "8384:2:20",
													"nodeType": "YulLiteral",
													"src": "8384:2:20",
													"type": "",
													"value": "28"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8357:6:20",
												"nodeType": "YulIdentifier",
												"src": "8357:6:20"
											},
											"nativeSrc": "8357:30:20",
											"nodeType": "YulFunctionCall",
											"src": "8357:30:20"
										},
										"nativeSrc": "8357:30:20",
										"nodeType": "YulExpressionStatement",
										"src": "8357:30:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8407:9:20",
															"nodeType": "YulIdentifier",
															"src": "8407:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "8418:3:20",
															"nodeType": "YulLiteral",
															"src": "8418:3:20",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8403:3:20",
														"nodeType": "YulIdentifier",
														"src": "8403:3:20"
													},
													"nativeSrc": "8403:19:20",
													"nodeType": "YulFunctionCall",
													"src": "8403:19:20"
												},
												{
													"hexValue": "746f6b656e20646563696d616c7320646964206e6f74206d61746368",
													"kind": "string",
													"nativeSrc": "8424:30:20",
													"nodeType": "YulLiteral",
													"src": "8424:30:20",
													"type": "",
													"value": "token decimals did not match"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8396:6:20",
												"nodeType": "YulIdentifier",
												"src": "8396:6:20"
											},
											"nativeSrc": "8396:59:20",
											"nodeType": "YulFunctionCall",
											"src": "8396:59:20"
										},
										"nativeSrc": "8396:59:20",
										"nodeType": "YulExpressionStatement",
										"src": "8396:59:20"
									},
									{
										"nativeSrc": "8464:27:20",
										"nodeType": "YulAssignment",
										"src": "8464:27:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "8476:9:20",
													"nodeType": "YulIdentifier",
													"src": "8476:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "8487:3:20",
													"nodeType": "YulLiteral",
													"src": "8487:3:20",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "8472:3:20",
												"nodeType": "YulIdentifier",
												"src": "8472:3:20"
											},
											"nativeSrc": "8472:19:20",
											"nodeType": "YulFunctionCall",
											"src": "8472:19:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "8464:4:20",
												"nodeType": "YulIdentifier",
												"src": "8464:4:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_uint8_t_rational_18_by_1_t_stringliteral_c6f4430b79e8d4db307de93d9b3001c93510a47801d19fe2afbd5ece5099d644__to_t_uint256_t_uint256_t_string_memory_ptr__fromStack_library_reversed",
							"nativeSrc": "7975:522:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "8181:9:20",
									"nodeType": "YulTypedName",
									"src": "8181:9:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "8192:6:20",
									"nodeType": "YulTypedName",
									"src": "8192:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "8200:6:20",
									"nodeType": "YulTypedName",
									"src": "8200:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "8211:4:20",
									"nodeType": "YulTypedName",
									"src": "8211:4:20",
									"type": ""
								}
							],
							"src": "7975:522:20"
						},
						{
							"body": {
								"nativeSrc": "8748:265:20",
								"nodeType": "YulBlock",
								"src": "8748:265:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "8765:9:20",
													"nodeType": "YulIdentifier",
													"src": "8765:9:20"
												},
												{
													"name": "value0",
													"nativeSrc": "8776:6:20",
													"nodeType": "YulIdentifier",
													"src": "8776:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8758:6:20",
												"nodeType": "YulIdentifier",
												"src": "8758:6:20"
											},
											"nativeSrc": "8758:25:20",
											"nodeType": "YulFunctionCall",
											"src": "8758:25:20"
										},
										"nativeSrc": "8758:25:20",
										"nodeType": "YulExpressionStatement",
										"src": "8758:25:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8803:9:20",
															"nodeType": "YulIdentifier",
															"src": "8803:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "8814:2:20",
															"nodeType": "YulLiteral",
															"src": "8814:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8799:3:20",
														"nodeType": "YulIdentifier",
														"src": "8799:3:20"
													},
													"nativeSrc": "8799:18:20",
													"nodeType": "YulFunctionCall",
													"src": "8799:18:20"
												},
												{
													"name": "value1",
													"nativeSrc": "8819:6:20",
													"nodeType": "YulIdentifier",
													"src": "8819:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8792:6:20",
												"nodeType": "YulIdentifier",
												"src": "8792:6:20"
											},
											"nativeSrc": "8792:34:20",
											"nodeType": "YulFunctionCall",
											"src": "8792:34:20"
										},
										"nativeSrc": "8792:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "8792:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8846:9:20",
															"nodeType": "YulIdentifier",
															"src": "8846:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "8857:2:20",
															"nodeType": "YulLiteral",
															"src": "8857:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8842:3:20",
														"nodeType": "YulIdentifier",
														"src": "8842:3:20"
													},
													"nativeSrc": "8842:18:20",
													"nodeType": "YulFunctionCall",
													"src": "8842:18:20"
												},
												{
													"kind": "number",
													"nativeSrc": "8862:2:20",
													"nodeType": "YulLiteral",
													"src": "8862:2:20",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8835:6:20",
												"nodeType": "YulIdentifier",
												"src": "8835:6:20"
											},
											"nativeSrc": "8835:30:20",
											"nodeType": "YulFunctionCall",
											"src": "8835:30:20"
										},
										"nativeSrc": "8835:30:20",
										"nodeType": "YulExpressionStatement",
										"src": "8835:30:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8885:9:20",
															"nodeType": "YulIdentifier",
															"src": "8885:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "8896:2:20",
															"nodeType": "YulLiteral",
															"src": "8896:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8881:3:20",
														"nodeType": "YulIdentifier",
														"src": "8881:3:20"
													},
													"nativeSrc": "8881:18:20",
													"nodeType": "YulFunctionCall",
													"src": "8881:18:20"
												},
												{
													"kind": "number",
													"nativeSrc": "8901:2:20",
													"nodeType": "YulLiteral",
													"src": "8901:2:20",
													"type": "",
													"value": "27"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8874:6:20",
												"nodeType": "YulIdentifier",
												"src": "8874:6:20"
											},
											"nativeSrc": "8874:30:20",
											"nodeType": "YulFunctionCall",
											"src": "8874:30:20"
										},
										"nativeSrc": "8874:30:20",
										"nodeType": "YulExpressionStatement",
										"src": "8874:30:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8924:9:20",
															"nodeType": "YulIdentifier",
															"src": "8924:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "8935:3:20",
															"nodeType": "YulLiteral",
															"src": "8935:3:20",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8920:3:20",
														"nodeType": "YulIdentifier",
														"src": "8920:3:20"
													},
													"nativeSrc": "8920:19:20",
													"nodeType": "YulFunctionCall",
													"src": "8920:19:20"
												},
												{
													"hexValue": "746f6b656e20737570706c792073686f756c64206265207a65726f",
													"kind": "string",
													"nativeSrc": "8941:29:20",
													"nodeType": "YulLiteral",
													"src": "8941:29:20",
													"type": "",
													"value": "token supply should be zero"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8913:6:20",
												"nodeType": "YulIdentifier",
												"src": "8913:6:20"
											},
											"nativeSrc": "8913:58:20",
											"nodeType": "YulFunctionCall",
											"src": "8913:58:20"
										},
										"nativeSrc": "8913:58:20",
										"nodeType": "YulExpressionStatement",
										"src": "8913:58:20"
									},
									{
										"nativeSrc": "8980:27:20",
										"nodeType": "YulAssignment",
										"src": "8980:27:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "8992:9:20",
													"nodeType": "YulIdentifier",
													"src": "8992:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "9003:3:20",
													"nodeType": "YulLiteral",
													"src": "9003:3:20",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "8988:3:20",
												"nodeType": "YulIdentifier",
												"src": "8988:3:20"
											},
											"nativeSrc": "8988:19:20",
											"nodeType": "YulFunctionCall",
											"src": "8988:19:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "8980:4:20",
												"nodeType": "YulIdentifier",
												"src": "8980:4:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_rational_0_by_1_t_stringliteral_a98e435fde1199fec7a064784ca2092c0021045372b1dc1d6a10798084e7f064__to_t_uint256_t_uint256_t_string_memory_ptr__fromStack_library_reversed",
							"nativeSrc": "8502:511:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "8709:9:20",
									"nodeType": "YulTypedName",
									"src": "8709:9:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "8720:6:20",
									"nodeType": "YulTypedName",
									"src": "8720:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "8728:6:20",
									"nodeType": "YulTypedName",
									"src": "8728:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "8739:4:20",
									"nodeType": "YulTypedName",
									"src": "8739:4:20",
									"type": ""
								}
							],
							"src": "8502:511:20"
						},
						{
							"body": {
								"nativeSrc": "9175:188:20",
								"nodeType": "YulBlock",
								"src": "9175:188:20",
								"statements": [
									{
										"nativeSrc": "9185:26:20",
										"nodeType": "YulAssignment",
										"src": "9185:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "9197:9:20",
													"nodeType": "YulIdentifier",
													"src": "9197:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "9208:2:20",
													"nodeType": "YulLiteral",
													"src": "9208:2:20",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "9193:3:20",
												"nodeType": "YulIdentifier",
												"src": "9193:3:20"
											},
											"nativeSrc": "9193:18:20",
											"nodeType": "YulFunctionCall",
											"src": "9193:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "9185:4:20",
												"nodeType": "YulIdentifier",
												"src": "9185:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "9227:9:20",
													"nodeType": "YulIdentifier",
													"src": "9227:9:20"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "9242:6:20",
															"nodeType": "YulIdentifier",
															"src": "9242:6:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "9258:3:20",
																			"nodeType": "YulLiteral",
																			"src": "9258:3:20",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "9263:1:20",
																			"nodeType": "YulLiteral",
																			"src": "9263:1:20",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "9254:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "9254:3:20"
																	},
																	"nativeSrc": "9254:11:20",
																	"nodeType": "YulFunctionCall",
																	"src": "9254:11:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "9267:1:20",
																	"nodeType": "YulLiteral",
																	"src": "9267:1:20",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "9250:3:20",
																"nodeType": "YulIdentifier",
																"src": "9250:3:20"
															},
															"nativeSrc": "9250:19:20",
															"nodeType": "YulFunctionCall",
															"src": "9250:19:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "9238:3:20",
														"nodeType": "YulIdentifier",
														"src": "9238:3:20"
													},
													"nativeSrc": "9238:32:20",
													"nodeType": "YulFunctionCall",
													"src": "9238:32:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9220:6:20",
												"nodeType": "YulIdentifier",
												"src": "9220:6:20"
											},
											"nativeSrc": "9220:51:20",
											"nodeType": "YulFunctionCall",
											"src": "9220:51:20"
										},
										"nativeSrc": "9220:51:20",
										"nodeType": "YulExpressionStatement",
										"src": "9220:51:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "9291:9:20",
															"nodeType": "YulIdentifier",
															"src": "9291:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "9302:2:20",
															"nodeType": "YulLiteral",
															"src": "9302:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9287:3:20",
														"nodeType": "YulIdentifier",
														"src": "9287:3:20"
													},
													"nativeSrc": "9287:18:20",
													"nodeType": "YulFunctionCall",
													"src": "9287:18:20"
												},
												{
													"name": "value1",
													"nativeSrc": "9307:6:20",
													"nodeType": "YulIdentifier",
													"src": "9307:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9280:6:20",
												"nodeType": "YulIdentifier",
												"src": "9280:6:20"
											},
											"nativeSrc": "9280:34:20",
											"nodeType": "YulFunctionCall",
											"src": "9280:34:20"
										},
										"nativeSrc": "9280:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "9280:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "9334:9:20",
															"nodeType": "YulIdentifier",
															"src": "9334:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "9345:2:20",
															"nodeType": "YulLiteral",
															"src": "9345:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9330:3:20",
														"nodeType": "YulIdentifier",
														"src": "9330:3:20"
													},
													"nativeSrc": "9330:18:20",
													"nodeType": "YulFunctionCall",
													"src": "9330:18:20"
												},
												{
													"name": "value2",
													"nativeSrc": "9350:6:20",
													"nodeType": "YulIdentifier",
													"src": "9350:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9323:6:20",
												"nodeType": "YulIdentifier",
												"src": "9323:6:20"
											},
											"nativeSrc": "9323:34:20",
											"nodeType": "YulFunctionCall",
											"src": "9323:34:20"
										},
										"nativeSrc": "9323:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "9323:34:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "9018:345:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "9128:9:20",
									"nodeType": "YulTypedName",
									"src": "9128:9:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "9139:6:20",
									"nodeType": "YulTypedName",
									"src": "9139:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "9147:6:20",
									"nodeType": "YulTypedName",
									"src": "9147:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "9155:6:20",
									"nodeType": "YulTypedName",
									"src": "9155:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "9166:4:20",
									"nodeType": "YulTypedName",
									"src": "9166:4:20",
									"type": ""
								}
							],
							"src": "9018:345:20"
						},
						{
							"body": {
								"nativeSrc": "9469:102:20",
								"nodeType": "YulBlock",
								"src": "9469:102:20",
								"statements": [
									{
										"nativeSrc": "9479:26:20",
										"nodeType": "YulAssignment",
										"src": "9479:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "9491:9:20",
													"nodeType": "YulIdentifier",
													"src": "9491:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "9502:2:20",
													"nodeType": "YulLiteral",
													"src": "9502:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "9487:3:20",
												"nodeType": "YulIdentifier",
												"src": "9487:3:20"
											},
											"nativeSrc": "9487:18:20",
											"nodeType": "YulFunctionCall",
											"src": "9487:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "9479:4:20",
												"nodeType": "YulIdentifier",
												"src": "9479:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "9521:9:20",
													"nodeType": "YulIdentifier",
													"src": "9521:9:20"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "9536:6:20",
															"nodeType": "YulIdentifier",
															"src": "9536:6:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "9552:3:20",
																			"nodeType": "YulLiteral",
																			"src": "9552:3:20",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "9557:1:20",
																			"nodeType": "YulLiteral",
																			"src": "9557:1:20",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "9548:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "9548:3:20"
																	},
																	"nativeSrc": "9548:11:20",
																	"nodeType": "YulFunctionCall",
																	"src": "9548:11:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "9561:1:20",
																	"nodeType": "YulLiteral",
																	"src": "9561:1:20",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "9544:3:20",
																"nodeType": "YulIdentifier",
																"src": "9544:3:20"
															},
															"nativeSrc": "9544:19:20",
															"nodeType": "YulFunctionCall",
															"src": "9544:19:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "9532:3:20",
														"nodeType": "YulIdentifier",
														"src": "9532:3:20"
													},
													"nativeSrc": "9532:32:20",
													"nodeType": "YulFunctionCall",
													"src": "9532:32:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9514:6:20",
												"nodeType": "YulIdentifier",
												"src": "9514:6:20"
											},
											"nativeSrc": "9514:51:20",
											"nodeType": "YulFunctionCall",
											"src": "9514:51:20"
										},
										"nativeSrc": "9514:51:20",
										"nodeType": "YulExpressionStatement",
										"src": "9514:51:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "9368:203:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "9438:9:20",
									"nodeType": "YulTypedName",
									"src": "9438:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "9449:6:20",
									"nodeType": "YulTypedName",
									"src": "9449:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "9460:4:20",
									"nodeType": "YulTypedName",
									"src": "9460:4:20",
									"type": ""
								}
							],
							"src": "9368:203:20"
						},
						{
							"body": {
								"nativeSrc": "9624:174:20",
								"nodeType": "YulBlock",
								"src": "9624:174:20",
								"statements": [
									{
										"nativeSrc": "9634:16:20",
										"nodeType": "YulAssignment",
										"src": "9634:16:20",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "9645:1:20",
													"nodeType": "YulIdentifier",
													"src": "9645:1:20"
												},
												{
													"name": "y",
													"nativeSrc": "9648:1:20",
													"nodeType": "YulIdentifier",
													"src": "9648:1:20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "9641:3:20",
												"nodeType": "YulIdentifier",
												"src": "9641:3:20"
											},
											"nativeSrc": "9641:9:20",
											"nodeType": "YulFunctionCall",
											"src": "9641:9:20"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "9634:3:20",
												"nodeType": "YulIdentifier",
												"src": "9634:3:20"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "9681:111:20",
											"nodeType": "YulBlock",
											"src": "9681:111:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "9702:1:20",
																"nodeType": "YulLiteral",
																"src": "9702:1:20",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9709:3:20",
																		"nodeType": "YulLiteral",
																		"src": "9709:3:20",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9714:10:20",
																		"nodeType": "YulLiteral",
																		"src": "9714:10:20",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "9705:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "9705:3:20"
																},
																"nativeSrc": "9705:20:20",
																"nodeType": "YulFunctionCall",
																"src": "9705:20:20"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "9695:6:20",
															"nodeType": "YulIdentifier",
															"src": "9695:6:20"
														},
														"nativeSrc": "9695:31:20",
														"nodeType": "YulFunctionCall",
														"src": "9695:31:20"
													},
													"nativeSrc": "9695:31:20",
													"nodeType": "YulExpressionStatement",
													"src": "9695:31:20"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "9746:1:20",
																"nodeType": "YulLiteral",
																"src": "9746:1:20",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nativeSrc": "9749:4:20",
																"nodeType": "YulLiteral",
																"src": "9749:4:20",
																"type": "",
																"value": "0x11"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "9739:6:20",
															"nodeType": "YulIdentifier",
															"src": "9739:6:20"
														},
														"nativeSrc": "9739:15:20",
														"nodeType": "YulFunctionCall",
														"src": "9739:15:20"
													},
													"nativeSrc": "9739:15:20",
													"nodeType": "YulExpressionStatement",
													"src": "9739:15:20"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "9774:1:20",
																"nodeType": "YulLiteral",
																"src": "9774:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "9777:4:20",
																"nodeType": "YulLiteral",
																"src": "9777:4:20",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "9767:6:20",
															"nodeType": "YulIdentifier",
															"src": "9767:6:20"
														},
														"nativeSrc": "9767:15:20",
														"nodeType": "YulFunctionCall",
														"src": "9767:15:20"
													},
													"nativeSrc": "9767:15:20",
													"nodeType": "YulExpressionStatement",
													"src": "9767:15:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "9665:1:20",
													"nodeType": "YulIdentifier",
													"src": "9665:1:20"
												},
												{
													"name": "sum",
													"nativeSrc": "9668:3:20",
													"nodeType": "YulIdentifier",
													"src": "9668:3:20"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "9662:2:20",
												"nodeType": "YulIdentifier",
												"src": "9662:2:20"
											},
											"nativeSrc": "9662:10:20",
											"nodeType": "YulFunctionCall",
											"src": "9662:10:20"
										},
										"nativeSrc": "9659:133:20",
										"nodeType": "YulIf",
										"src": "9659:133:20"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nativeSrc": "9576:222:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "9607:1:20",
									"nodeType": "YulTypedName",
									"src": "9607:1:20",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "9610:1:20",
									"nodeType": "YulTypedName",
									"src": "9610:1:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "9616:3:20",
									"nodeType": "YulTypedName",
									"src": "9616:3:20",
									"type": ""
								}
							],
							"src": "9576:222:20"
						},
						{
							"body": {
								"nativeSrc": "10016:276:20",
								"nodeType": "YulBlock",
								"src": "10016:276:20",
								"statements": [
									{
										"nativeSrc": "10026:27:20",
										"nodeType": "YulAssignment",
										"src": "10026:27:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10038:9:20",
													"nodeType": "YulIdentifier",
													"src": "10038:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "10049:3:20",
													"nodeType": "YulLiteral",
													"src": "10049:3:20",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "10034:3:20",
												"nodeType": "YulIdentifier",
												"src": "10034:3:20"
											},
											"nativeSrc": "10034:19:20",
											"nodeType": "YulFunctionCall",
											"src": "10034:19:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "10026:4:20",
												"nodeType": "YulIdentifier",
												"src": "10026:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10069:9:20",
													"nodeType": "YulIdentifier",
													"src": "10069:9:20"
												},
												{
													"name": "value0",
													"nativeSrc": "10080:6:20",
													"nodeType": "YulIdentifier",
													"src": "10080:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10062:6:20",
												"nodeType": "YulIdentifier",
												"src": "10062:6:20"
											},
											"nativeSrc": "10062:25:20",
											"nodeType": "YulFunctionCall",
											"src": "10062:25:20"
										},
										"nativeSrc": "10062:25:20",
										"nodeType": "YulExpressionStatement",
										"src": "10062:25:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10107:9:20",
															"nodeType": "YulIdentifier",
															"src": "10107:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "10118:2:20",
															"nodeType": "YulLiteral",
															"src": "10118:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10103:3:20",
														"nodeType": "YulIdentifier",
														"src": "10103:3:20"
													},
													"nativeSrc": "10103:18:20",
													"nodeType": "YulFunctionCall",
													"src": "10103:18:20"
												},
												{
													"name": "value1",
													"nativeSrc": "10123:6:20",
													"nodeType": "YulIdentifier",
													"src": "10123:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10096:6:20",
												"nodeType": "YulIdentifier",
												"src": "10096:6:20"
											},
											"nativeSrc": "10096:34:20",
											"nodeType": "YulFunctionCall",
											"src": "10096:34:20"
										},
										"nativeSrc": "10096:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "10096:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10150:9:20",
															"nodeType": "YulIdentifier",
															"src": "10150:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "10161:2:20",
															"nodeType": "YulLiteral",
															"src": "10161:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10146:3:20",
														"nodeType": "YulIdentifier",
														"src": "10146:3:20"
													},
													"nativeSrc": "10146:18:20",
													"nodeType": "YulFunctionCall",
													"src": "10146:18:20"
												},
												{
													"name": "value2",
													"nativeSrc": "10166:6:20",
													"nodeType": "YulIdentifier",
													"src": "10166:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10139:6:20",
												"nodeType": "YulIdentifier",
												"src": "10139:6:20"
											},
											"nativeSrc": "10139:34:20",
											"nodeType": "YulFunctionCall",
											"src": "10139:34:20"
										},
										"nativeSrc": "10139:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "10139:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10193:9:20",
															"nodeType": "YulIdentifier",
															"src": "10193:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "10204:2:20",
															"nodeType": "YulLiteral",
															"src": "10204:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10189:3:20",
														"nodeType": "YulIdentifier",
														"src": "10189:3:20"
													},
													"nativeSrc": "10189:18:20",
													"nodeType": "YulFunctionCall",
													"src": "10189:18:20"
												},
												{
													"name": "value3",
													"nativeSrc": "10209:6:20",
													"nodeType": "YulIdentifier",
													"src": "10209:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10182:6:20",
												"nodeType": "YulIdentifier",
												"src": "10182:6:20"
											},
											"nativeSrc": "10182:34:20",
											"nodeType": "YulFunctionCall",
											"src": "10182:34:20"
										},
										"nativeSrc": "10182:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "10182:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10236:9:20",
															"nodeType": "YulIdentifier",
															"src": "10236:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "10247:3:20",
															"nodeType": "YulLiteral",
															"src": "10247:3:20",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10232:3:20",
														"nodeType": "YulIdentifier",
														"src": "10232:3:20"
													},
													"nativeSrc": "10232:19:20",
													"nodeType": "YulFunctionCall",
													"src": "10232:19:20"
												},
												{
													"arguments": [
														{
															"name": "value4",
															"nativeSrc": "10257:6:20",
															"nodeType": "YulIdentifier",
															"src": "10257:6:20"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "10273:3:20",
																			"nodeType": "YulLiteral",
																			"src": "10273:3:20",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "10278:1:20",
																			"nodeType": "YulLiteral",
																			"src": "10278:1:20",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "10269:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "10269:3:20"
																	},
																	"nativeSrc": "10269:11:20",
																	"nodeType": "YulFunctionCall",
																	"src": "10269:11:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "10282:1:20",
																	"nodeType": "YulLiteral",
																	"src": "10282:1:20",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "10265:3:20",
																"nodeType": "YulIdentifier",
																"src": "10265:3:20"
															},
															"nativeSrc": "10265:19:20",
															"nodeType": "YulFunctionCall",
															"src": "10265:19:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "10253:3:20",
														"nodeType": "YulIdentifier",
														"src": "10253:3:20"
													},
													"nativeSrc": "10253:32:20",
													"nodeType": "YulFunctionCall",
													"src": "10253:32:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10225:6:20",
												"nodeType": "YulIdentifier",
												"src": "10225:6:20"
											},
											"nativeSrc": "10225:61:20",
											"nodeType": "YulFunctionCall",
											"src": "10225:61:20"
										},
										"nativeSrc": "10225:61:20",
										"nodeType": "YulExpressionStatement",
										"src": "10225:61:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
							"nativeSrc": "9803:489:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "9953:9:20",
									"nodeType": "YulTypedName",
									"src": "9953:9:20",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "9964:6:20",
									"nodeType": "YulTypedName",
									"src": "9964:6:20",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "9972:6:20",
									"nodeType": "YulTypedName",
									"src": "9972:6:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "9980:6:20",
									"nodeType": "YulTypedName",
									"src": "9980:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "9988:6:20",
									"nodeType": "YulTypedName",
									"src": "9988:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "9996:6:20",
									"nodeType": "YulTypedName",
									"src": "9996:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "10007:4:20",
									"nodeType": "YulTypedName",
									"src": "10007:4:20",
									"type": ""
								}
							],
							"src": "9803:489:20"
						},
						{
							"body": {
								"nativeSrc": "10478:217:20",
								"nodeType": "YulBlock",
								"src": "10478:217:20",
								"statements": [
									{
										"nativeSrc": "10488:27:20",
										"nodeType": "YulAssignment",
										"src": "10488:27:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10500:9:20",
													"nodeType": "YulIdentifier",
													"src": "10500:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "10511:3:20",
													"nodeType": "YulLiteral",
													"src": "10511:3:20",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "10496:3:20",
												"nodeType": "YulIdentifier",
												"src": "10496:3:20"
											},
											"nativeSrc": "10496:19:20",
											"nodeType": "YulFunctionCall",
											"src": "10496:19:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "10488:4:20",
												"nodeType": "YulIdentifier",
												"src": "10488:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10531:9:20",
													"nodeType": "YulIdentifier",
													"src": "10531:9:20"
												},
												{
													"name": "value0",
													"nativeSrc": "10542:6:20",
													"nodeType": "YulIdentifier",
													"src": "10542:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10524:6:20",
												"nodeType": "YulIdentifier",
												"src": "10524:6:20"
											},
											"nativeSrc": "10524:25:20",
											"nodeType": "YulFunctionCall",
											"src": "10524:25:20"
										},
										"nativeSrc": "10524:25:20",
										"nodeType": "YulExpressionStatement",
										"src": "10524:25:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10569:9:20",
															"nodeType": "YulIdentifier",
															"src": "10569:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "10580:2:20",
															"nodeType": "YulLiteral",
															"src": "10580:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10565:3:20",
														"nodeType": "YulIdentifier",
														"src": "10565:3:20"
													},
													"nativeSrc": "10565:18:20",
													"nodeType": "YulFunctionCall",
													"src": "10565:18:20"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "10589:6:20",
															"nodeType": "YulIdentifier",
															"src": "10589:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "10597:4:20",
															"nodeType": "YulLiteral",
															"src": "10597:4:20",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "10585:3:20",
														"nodeType": "YulIdentifier",
														"src": "10585:3:20"
													},
													"nativeSrc": "10585:17:20",
													"nodeType": "YulFunctionCall",
													"src": "10585:17:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10558:6:20",
												"nodeType": "YulIdentifier",
												"src": "10558:6:20"
											},
											"nativeSrc": "10558:45:20",
											"nodeType": "YulFunctionCall",
											"src": "10558:45:20"
										},
										"nativeSrc": "10558:45:20",
										"nodeType": "YulExpressionStatement",
										"src": "10558:45:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10623:9:20",
															"nodeType": "YulIdentifier",
															"src": "10623:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "10634:2:20",
															"nodeType": "YulLiteral",
															"src": "10634:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10619:3:20",
														"nodeType": "YulIdentifier",
														"src": "10619:3:20"
													},
													"nativeSrc": "10619:18:20",
													"nodeType": "YulFunctionCall",
													"src": "10619:18:20"
												},
												{
													"name": "value2",
													"nativeSrc": "10639:6:20",
													"nodeType": "YulIdentifier",
													"src": "10639:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10612:6:20",
												"nodeType": "YulIdentifier",
												"src": "10612:6:20"
											},
											"nativeSrc": "10612:34:20",
											"nodeType": "YulFunctionCall",
											"src": "10612:34:20"
										},
										"nativeSrc": "10612:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "10612:34:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10666:9:20",
															"nodeType": "YulIdentifier",
															"src": "10666:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "10677:2:20",
															"nodeType": "YulLiteral",
															"src": "10677:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10662:3:20",
														"nodeType": "YulIdentifier",
														"src": "10662:3:20"
													},
													"nativeSrc": "10662:18:20",
													"nodeType": "YulFunctionCall",
													"src": "10662:18:20"
												},
												{
													"name": "value3",
													"nativeSrc": "10682:6:20",
													"nodeType": "YulIdentifier",
													"src": "10682:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10655:6:20",
												"nodeType": "YulIdentifier",
												"src": "10655:6:20"
											},
											"nativeSrc": "10655:34:20",
											"nodeType": "YulFunctionCall",
											"src": "10655:34:20"
										},
										"nativeSrc": "10655:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "10655:34:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
							"nativeSrc": "10297:398:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "10423:9:20",
									"nodeType": "YulTypedName",
									"src": "10423:9:20",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "10434:6:20",
									"nodeType": "YulTypedName",
									"src": "10434:6:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "10442:6:20",
									"nodeType": "YulTypedName",
									"src": "10442:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "10450:6:20",
									"nodeType": "YulTypedName",
									"src": "10450:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "10458:6:20",
									"nodeType": "YulTypedName",
									"src": "10458:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "10469:4:20",
									"nodeType": "YulTypedName",
									"src": "10469:4:20",
									"type": ""
								}
							],
							"src": "10297:398:20"
						},
						{
							"body": {
								"nativeSrc": "10732:95:20",
								"nodeType": "YulBlock",
								"src": "10732:95:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "10749:1:20",
													"nodeType": "YulLiteral",
													"src": "10749:1:20",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "10756:3:20",
															"nodeType": "YulLiteral",
															"src": "10756:3:20",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "10761:10:20",
															"nodeType": "YulLiteral",
															"src": "10761:10:20",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "10752:3:20",
														"nodeType": "YulIdentifier",
														"src": "10752:3:20"
													},
													"nativeSrc": "10752:20:20",
													"nodeType": "YulFunctionCall",
													"src": "10752:20:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10742:6:20",
												"nodeType": "YulIdentifier",
												"src": "10742:6:20"
											},
											"nativeSrc": "10742:31:20",
											"nodeType": "YulFunctionCall",
											"src": "10742:31:20"
										},
										"nativeSrc": "10742:31:20",
										"nodeType": "YulExpressionStatement",
										"src": "10742:31:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "10789:1:20",
													"nodeType": "YulLiteral",
													"src": "10789:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "10792:4:20",
													"nodeType": "YulLiteral",
													"src": "10792:4:20",
													"type": "",
													"value": "0x21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10782:6:20",
												"nodeType": "YulIdentifier",
												"src": "10782:6:20"
											},
											"nativeSrc": "10782:15:20",
											"nodeType": "YulFunctionCall",
											"src": "10782:15:20"
										},
										"nativeSrc": "10782:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "10782:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "10813:1:20",
													"nodeType": "YulLiteral",
													"src": "10813:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "10816:4:20",
													"nodeType": "YulLiteral",
													"src": "10816:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "10806:6:20",
												"nodeType": "YulIdentifier",
												"src": "10806:6:20"
											},
											"nativeSrc": "10806:15:20",
											"nodeType": "YulFunctionCall",
											"src": "10806:15:20"
										},
										"nativeSrc": "10806:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "10806:15:20"
									}
								]
							},
							"name": "panic_error_0x21",
							"nativeSrc": "10700:127:20",
							"nodeType": "YulFunctionDefinition",
							"src": "10700:127:20"
						}
					]
				},
				"contents": "{\n    { }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        mcopy(add(pos, 0x20), add(value, 0x20), length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        mstore(add(headStart, 32), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, 32)\n        let srcPtr := add(value6, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, 32)\n            srcPtr := add(srcPtr, 32)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 96))\n        value3 := value_1\n        let value_2 := calldataload(add(headStart, 128))\n        if iszero(eq(value_2, and(value_2, 0xff))) { revert(0, 0) }\n        value4 := value_2\n        let value_3 := 0\n        value_3 := calldataload(add(headStart, 160))\n        value5 := value_3\n        let value_4 := 0\n        value_4 := calldataload(add(headStart, 192))\n        value6 := value_4\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_245c734e6d4ec044daf7beffa09d54d4bafba490113c199734d790b04a7390e5_t_stringliteral_ded2ee270d71437b5f0a954775141c9e9df919b36f4fe17a99e646e4c3c69936__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_string(value0, add(headStart, 96))\n        let _1 := sub(tail_1, headStart)\n        mstore(add(headStart, 32), _1)\n        mstore(tail_1, 7)\n        mstore(add(tail_1, 32), \"MyToken\")\n        mstore(add(headStart, 64), add(_1, 64))\n        mstore(add(tail_1, 64), 24)\n        mstore(add(tail_1, 96), \"token name did not match\")\n        tail := add(tail_1, 128)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_793539e36336d70961c91bdb898dff4b065dbb5ef5ac709025f5b68be91dd01e_t_stringliteral_f575216461f54c2e041738e8b8d199f72eb6be1f077174aaf571aabf6568860d__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_string(value0, add(headStart, 96))\n        let _1 := sub(tail_1, headStart)\n        mstore(add(headStart, 32), _1)\n        mstore(tail_1, 3)\n        mstore(add(tail_1, 32), \"MTK\")\n        mstore(add(headStart, 64), add(_1, 64))\n        mstore(add(tail_1, 64), 26)\n        mstore(add(tail_1, 96), \"token symbol did not match\")\n        tail := add(tail_1, 128)\n    }\n    function abi_encode_tuple_t_uint8_t_rational_18_by_1_t_stringliteral_c6f4430b79e8d4db307de93d9b3001c93510a47801d19fe2afbd5ece5099d644__to_t_uint256_t_uint256_t_string_memory_ptr__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 96)\n        mstore(add(headStart, 96), 28)\n        mstore(add(headStart, 128), \"token decimals did not match\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_uint256_t_rational_0_by_1_t_stringliteral_a98e435fde1199fec7a064784ca2092c0021045372b1dc1d6a10798084e7f064__to_t_uint256_t_uint256_t_string_memory_ptr__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 96)\n        mstore(add(headStart, 96), 27)\n        mstore(add(headStart, 128), \"token supply should be zero\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n}",
				"id": 20,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {
			"2019": [
				{
					"length": 32,
					"start": 2168
				}
			],
			"2021": [
				{
					"length": 32,
					"start": 2126
				}
			],
			"2023": [
				{
					"length": 32,
					"start": 2084
				}
			],
			"2025": [
				{
					"length": 32,
					"start": 2249
				}
			],
			"2027": [
				{
					"length": 32,
					"start": 2289
				}
			],
			"2030": [
				{
					"length": 32,
					"start": 2376
				}
			],
			"2033": [
				{
					"length": 32,
					"start": 2421
				}
			]
		},
		"linkReferences": {
			"remix_tests.sol": {
				"Assert": [
					{
						"length": 20,
						"start": 1214
					},
					{
						"length": 20,
						"start": 1340
					},
					{
						"length": 20,
						"start": 1466
					},
					{
						"length": 20,
						"start": 1650
					}
				]
			}
		},
		"object": "608060405234801561000f575f80fd5b50600436106100e5575f3560e01c80637ecebe0011610088578063a9059cbb11610063578063a9059cbb146101c4578063d505accf146101d7578063dc881d1c146101ec578063dd62ed3e146101f4575f80fd5b80637ecebe001461018e57806384b0196e146101a157806395d89b41146101bc575f80fd5b806323b872dd116100c357806323b872dd1461013c578063313ce5671461014f5780633644e5151461015e57806370a0823114610166575f80fd5b806306fdde03146100e9578063095ea7b31461010757806318160ddd1461012a575b5f80fd5b6100f161022c565b6040516100fe9190610eaa565b60405180910390f35b61011a610115366004610ede565b6102bc565b60405190151581526020016100fe565b6002545b6040519081526020016100fe565b61011a61014a366004610f06565b6102d5565b604051601281526020016100fe565b61012e6102f8565b61012e610174366004610f40565b6001600160a01b03165f9081526020819052604090205490565b61012e61019c366004610f40565b610306565b6101a9610323565b6040516100fe9796959493929190610f59565b6100f1610365565b61011a6101d2366004610ede565b610374565b6101ea6101e5366004610fef565b610381565b005b6101ea6104bc565b61012e61020236600461105c565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b60606003805461023b9061108d565b80601f01602080910402602001604051908101604052809291908181526020018280546102679061108d565b80156102b25780601f10610289576101008083540402835291602001916102b2565b820191905f5260205f20905b81548152906001019060200180831161029557829003601f168201915b5050505050905090565b5f336102c981858561072e565b60019150505b92915050565b5f336102e2858285610740565b6102ed8585856107bb565b506001949350505050565b5f610301610818565b905090565b6001600160a01b0381165f908152600760205260408120546102cf565b5f6060805f805f6060610334610941565b61033c61096e565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461023b9061108d565b5f336102c98185856107bb565b834211156103aa5760405163313c898160e11b8152600481018590526024015b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886103f58c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f61044f8261099b565b90505f61045e828787876109c7565b9050896001600160a01b0316816001600160a01b0316146104a5576040516325c0072360e11b81526001600160a01b0380831660048301528b1660248201526044016103a1565b6104b08a8a8a61072e565b50505050505050505050565b73__$acbfb1c35000d78352310b16a054a6b106$__63e8c2cb166104de61022c565b6040518263ffffffff1660e01b81526004016104fa91906110c5565b602060405180830381865af4158015610515573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105399190611138565b5073__$acbfb1c35000d78352310b16a054a6b106$__63e8c2cb1661055c610365565b6040518263ffffffff1660e01b81526004016105789190611157565b602060405180830381865af4158015610593573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105b79190611138565b5073__$acbfb1c35000d78352310b16a054a6b106$__63abcd796060126040516001600160e01b031960e084901b16815260ff90911660048201526012602482015260606044820152601c60648201527f746f6b656e20646563696d616c7320646964206e6f74206d6174636800000000608482015260a401602060405180830381865af415801561064b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061066f9190611138565b5073__$acbfb1c35000d78352310b16a054a6b106$__63abcd796061069360025490565b6040516001600160e01b031960e084901b16815260048101919091525f602482015260606044820152601b60648201527f746f6b656e20737570706c792073686f756c64206265207a65726f0000000000608482015260a401602060405180830381865af4158015610707573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061072b9190611138565b50565b61073b83838360016109f3565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f1981146107b557818110156107a757604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016103a1565b6107b584848484035f6109f3565b50505050565b6001600160a01b0383166107e457604051634b637e8f60e11b81525f60048201526024016103a1565b6001600160a01b03821661080d5760405163ec442f0560e01b81525f60048201526024016103a1565b61073b838383610ac5565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561087057507f000000000000000000000000000000000000000000000000000000000000000046145b1561089a57507f000000000000000000000000000000000000000000000000000000000000000090565b610301604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60606103017f00000000000000000000000000000000000000000000000000000000000000006005610beb565b60606103017f00000000000000000000000000000000000000000000000000000000000000006006610beb565b5f6102cf6109a7610818565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f806109d788888888610c94565b9250925092506109e78282610d5c565b50909695505050505050565b6001600160a01b038416610a1c5760405163e602df0560e01b81525f60048201526024016103a1565b6001600160a01b038316610a4557604051634a1406b160e11b81525f60048201526024016103a1565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156107b557826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610ab791815260200190565b60405180910390a350505050565b6001600160a01b038316610aef578060025f828254610ae491906111c6565b90915550610b5f9050565b6001600160a01b0383165f9081526020819052604090205481811015610b415760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016103a1565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610b7b57600280548290039055610b99565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610bde91815260200190565b60405180910390a3505050565b606060ff8314610c0557610bfe83610e18565b90506102cf565b818054610c119061108d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3d9061108d565b8015610c885780601f10610c5f57610100808354040283529160200191610c88565b820191905f5260205f20905b815481529060010190602001808311610c6b57829003601f168201915b505050505090506102cf565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610ccd57505f91506003905082610d52565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610d1e573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116610d4957505f925060019150829050610d52565b92505f91508190505b9450945094915050565b5f826003811115610d6f57610d6f6111e5565b03610d78575050565b6001826003811115610d8c57610d8c6111e5565b03610daa5760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610dbe57610dbe6111e5565b03610ddf5760405163fce698f760e01b8152600481018290526024016103a1565b6003826003811115610df357610df36111e5565b03610e14576040516335e2f38360e21b8152600481018290526024016103a1565b5050565b60605f610e2483610e55565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f60ff8216601f8111156102cf57604051632cd44ac360e21b815260040160405180910390fd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610ebc6020830184610e7c565b9392505050565b80356001600160a01b0381168114610ed9575f80fd5b919050565b5f8060408385031215610eef575f80fd5b610ef883610ec3565b946020939093013593505050565b5f805f60608486031215610f18575f80fd5b610f2184610ec3565b9250610f2f60208501610ec3565b929592945050506040919091013590565b5f60208284031215610f50575f80fd5b610ebc82610ec3565b60ff60f81b8816815260e060208201525f610f7760e0830189610e7c565b8281036040840152610f898189610e7c565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015610fde578351835260209384019390920191600101610fc0565b50909b9a5050505050505050505050565b5f805f805f805f60e0888a031215611005575f80fd5b61100e88610ec3565b965061101c60208901610ec3565b95506040880135945060608801359350608088013560ff8116811461103f575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f806040838503121561106d575f80fd5b61107683610ec3565b915061108460208401610ec3565b90509250929050565b600181811c908216806110a157607f821691505b6020821081036110bf57634e487b7160e01b5f52602260045260245ffd5b50919050565b606081525f6110d76060830184610e7c565b828103806020850152600782526626bcaa37b5b2b760c91b602083015260408101604085015250601860408201527f746f6b656e206e616d6520646964206e6f74206d61746368000000000000000060608201526080810191505092915050565b5f60208284031215611148575f80fd5b81518015158114610ebc575f80fd5b606081525f6111696060830184610e7c565b82810380602085015260038252624d544b60e81b602083015260408101604085015250601a60408201527f746f6b656e2073796d626f6c20646964206e6f74206d6174636800000000000060608201526080810191505092915050565b808201808211156102cf57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52602160045260245ffdfea264697066735822122005029262ab186c02398c42756937359f41187346e05656b76aaf32761460bc6464736f6c634300081a0033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE5 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0x88 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x63 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1C4 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xDC881D1C EQ PUSH2 0x1EC JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1F4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1BC JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x166 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xE9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x12A JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF1 PUSH2 0x22C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFE SWAP2 SWAP1 PUSH2 0xEAA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11A PUSH2 0x115 CALLDATASIZE PUSH1 0x4 PUSH2 0xEDE JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH2 0x11A PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0xF06 JUMP JUMPDEST PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH2 0x12E PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x12E PUSH2 0x174 CALLDATASIZE PUSH1 0x4 PUSH2 0xF40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x12E PUSH2 0x19C CALLDATASIZE PUSH1 0x4 PUSH2 0xF40 JUMP JUMPDEST PUSH2 0x306 JUMP JUMPDEST PUSH2 0x1A9 PUSH2 0x323 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFE SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF59 JUMP JUMPDEST PUSH2 0xF1 PUSH2 0x365 JUMP JUMPDEST PUSH2 0x11A PUSH2 0x1D2 CALLDATASIZE PUSH1 0x4 PUSH2 0xEDE JUMP JUMPDEST PUSH2 0x374 JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0xFEF JUMP JUMPDEST PUSH2 0x381 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EA PUSH2 0x4BC JUMP JUMPDEST PUSH2 0x12E PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0x105C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x23B SWAP1 PUSH2 0x108D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x267 SWAP1 PUSH2 0x108D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2B2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x289 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2B2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x295 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2C9 DUP2 DUP6 DUP6 PUSH2 0x72E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2E2 DUP6 DUP3 DUP6 PUSH2 0x740 JUMP JUMPDEST PUSH2 0x2ED DUP6 DUP6 DUP6 PUSH2 0x7BB JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x301 PUSH2 0x818 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x2CF JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x334 PUSH2 0x941 JUMP JUMPDEST PUSH2 0x33C PUSH2 0x96E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x23B SWAP1 PUSH2 0x108D JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2C9 DUP2 DUP6 DUP6 PUSH2 0x7BB JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x3AA JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x3F5 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x44F DUP3 PUSH2 0x99B JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x45E DUP3 DUP8 DUP8 DUP8 PUSH2 0x9C7 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH2 0x4B0 DUP11 DUP11 DUP11 PUSH2 0x72E JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0x0 PUSH4 0xE8C2CB16 PUSH2 0x4DE PUSH2 0x22C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FA SWAP2 SWAP1 PUSH2 0x10C5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x515 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x539 SWAP2 SWAP1 PUSH2 0x1138 JUMP JUMPDEST POP PUSH20 0x0 PUSH4 0xE8C2CB16 PUSH2 0x55C PUSH2 0x365 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x578 SWAP2 SWAP1 PUSH2 0x1157 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x593 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5B7 SWAP2 SWAP1 PUSH2 0x1138 JUMP JUMPDEST POP PUSH20 0x0 PUSH4 0xABCD7960 PUSH1 0x12 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0xFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x746F6B656E20646563696D616C7320646964206E6F74206D6174636800000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x64B JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x66F SWAP2 SWAP1 PUSH2 0x1138 JUMP JUMPDEST POP PUSH20 0x0 PUSH4 0xABCD7960 PUSH2 0x693 PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH0 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x746F6B656E20737570706C792073686F756C64206265207A65726F0000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x707 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x72B SWAP2 SWAP1 PUSH2 0x1138 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x73B DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x9F3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0x7B5 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH2 0x7B5 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x9F3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x7E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x80D JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH2 0x73B DUP4 DUP4 DUP4 PUSH2 0xAC5 JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x870 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x89A JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x301 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x301 PUSH32 0x0 PUSH1 0x5 PUSH2 0xBEB JUMP JUMPDEST PUSH1 0x60 PUSH2 0x301 PUSH32 0x0 PUSH1 0x6 PUSH2 0xBEB JUMP JUMPDEST PUSH0 PUSH2 0x2CF PUSH2 0x9A7 PUSH2 0x818 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x9D7 DUP9 DUP9 DUP9 DUP9 PUSH2 0xC94 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x9E7 DUP3 DUP3 PUSH2 0xD5C JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xA1C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xA45 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x7B5 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xAB7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xAEF JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xAE4 SWAP2 SWAP1 PUSH2 0x11C6 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xB5F SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xB41 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB7B JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xB99 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xBDE SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xC05 JUMPI PUSH2 0xBFE DUP4 PUSH2 0xE18 JUMP JUMPDEST SWAP1 POP PUSH2 0x2CF JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xC11 SWAP1 PUSH2 0x108D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC3D SWAP1 PUSH2 0x108D JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC88 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC5F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC88 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC6B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2CF JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xCCD JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xD52 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD1E JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xD49 JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xD52 JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD6F JUMPI PUSH2 0xD6F PUSH2 0x11E5 JUMP JUMPDEST SUB PUSH2 0xD78 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD8C JUMPI PUSH2 0xD8C PUSH2 0x11E5 JUMP JUMPDEST SUB PUSH2 0xDAA JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xDBE JUMPI PUSH2 0xDBE PUSH2 0x11E5 JUMP JUMPDEST SUB PUSH2 0xDDF JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xDF3 JUMPI PUSH2 0xDF3 PUSH2 0x11E5 JUMP JUMPDEST SUB PUSH2 0xE14 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3A1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xE24 DUP4 PUSH2 0xE55 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x2CF JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xEBC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xE7C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xED9 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEEF JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xEF8 DUP4 PUSH2 0xEC3 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xF18 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF21 DUP5 PUSH2 0xEC3 JUMP JUMPDEST SWAP3 POP PUSH2 0xF2F PUSH1 0x20 DUP6 ADD PUSH2 0xEC3 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF50 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xEBC DUP3 PUSH2 0xEC3 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xF77 PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0xE7C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xF89 DUP2 DUP10 PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFDE JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xFC0 JUMP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1005 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x100E DUP9 PUSH2 0xEC3 JUMP JUMPDEST SWAP7 POP PUSH2 0x101C PUSH1 0x20 DUP10 ADD PUSH2 0xEC3 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x103F JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x106D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1076 DUP4 PUSH2 0xEC3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1084 PUSH1 0x20 DUP5 ADD PUSH2 0xEC3 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x10A1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x10BF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH0 PUSH2 0x10D7 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xE7C JUMP JUMPDEST DUP3 DUP2 SUB DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x7 DUP3 MSTORE PUSH7 0x26BCAA37B5B2B7 PUSH1 0xC9 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 DUP6 ADD MSTORE POP PUSH1 0x18 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x746F6B656E206E616D6520646964206E6F74206D617463680000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1148 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xEBC JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH0 PUSH2 0x1169 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xE7C JUMP JUMPDEST DUP3 DUP2 SUB DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x3 DUP3 MSTORE PUSH3 0x4D544B PUSH1 0xE8 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 DUP6 ADD MSTORE POP PUSH1 0x1A PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x746F6B656E2073796D626F6C20646964206E6F74206D61746368000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2CF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV MUL SWAP3 PUSH3 0xAB186C MUL CODECOPY DUP13 TIMESTAMP PUSH22 0x6937359F41187346E05656B76AAF32761460BC646473 PUSH16 0x6C634300081A00330000000000000000 ",
		"sourceMap": "131:368:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;:::i;:::-;;:::i;:::-;;;1181:14:20;;1174:22;1156:41;;1144:2;1129:18;4293:186:2;1016:187:20;3144:97:2;3222:12;;3144:97;;;1354:25:20;;;1342:2;1327:18;3144:97:2;1208:177:20;5039:244:2;;;;;;:::i;:::-;;:::i;3002:82::-;;;3075:2;1911:36:20;;1899:2;1884:18;3002:82:2;1769:184:20;2656:112:4;;;:::i;3299:116:2:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3390:18:2;3364:7;3390:18;;;;;;;;;;;;3299:116;2406:143:4;;;;;;:::i;:::-;;:::i;5144:557:13:-;;;:::i;:::-;;;;;;;;;;;;;:::i;2276:93:2:-;;;:::i;3610:178::-;;;;;;:::i;:::-;;:::i;1680:672:4:-;;;;;;:::i;:::-;;:::i;:::-;;170:327:19;;;:::i;3846:140:2:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3952:18:2;;;3926:7;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3846:140;2074:89;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;735:10:7;4420:31:2;735:10:7;4436:7:2;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;;:::o;5039:244::-;5126:4;735:10:7;5182:37:2;5198:4;735:10:7;5213:5:2;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;-1:-1:-1;5272:4:2;;5039:244;-1:-1:-1;;;;5039:244:2:o;2656:112:4:-;2715:7;2741:20;:18;:20::i;:::-;2734:27;;2656:112;:::o;2406:143::-;-1:-1:-1;;;;;624:14:8;;2497:7:4;624:14:8;;;:7;:14;;;;;;2523:19:4;538:107:8;5144:557:13;5242:13;5269:18;5301:21;5336:15;5365:25;5404:12;5430:27;5533:13;:11;:13::i;:::-;5560:16;:14;:16::i;:::-;5668;;;5652:1;5668:16;;;;;;;;;-1:-1:-1;;;5482:212:13;;;-1:-1:-1;5482:212:13;;-1:-1:-1;5590:13:13;;-1:-1:-1;5625:4:13;;-1:-1:-1;5652:1:13;-1:-1:-1;5668:16:13;-1:-1:-1;5482:212:13;-1:-1:-1;5144:557:13:o;2276:93:2:-;2323:13;2355:7;2348:14;;;;;:::i;3610:178::-;3679:4;735:10:7;3733:27:2;735:10:7;3750:2:2;3754:5;3733:9;:27::i;1680:672:4:-;1901:8;1883:15;:26;1879:97;;;1932:33;;-1:-1:-1;;;1932:33:4;;;;;1354:25:20;;;1327:18;;1932:33:4;;;;;;;;1879:97;1986:18;1022:95;2045:5;2052:7;2061:5;2068:16;2078:5;-1:-1:-1;;;;;1121:14:8;819:7;1121:14;;;:7;:14;;;;;:16;;;;;;;;;759:395;2068:16:4;2017:78;;;;;;5551:25:20;;;;-1:-1:-1;;;;;5612:32:20;;;5592:18;;;5585:60;5681:32;;;;5661:18;;;5654:60;5730:18;;;5723:34;5773:19;;;5766:35;5817:19;;;5810:35;;;5523:19;;2017:78:4;;;;;;;;;;;;2007:89;;;;;;1986:110;;2107:12;2122:28;2139:10;2122:16;:28::i;:::-;2107:43;;2161:14;2178:28;2192:4;2198:1;2201;2204;2178:13;:28::i;:::-;2161:45;;2230:5;-1:-1:-1;;;;;2220:15:4;:6;-1:-1:-1;;;;;2220:15:4;;2216:88;;2258:35;;-1:-1:-1;;;2258:35:4;;-1:-1:-1;;;;;6048:32:20;;;2258:35:4;;;6030:51:20;6117:32;;6097:18;;;6090:60;6003:18;;2258:35:4;5856:300:20;2216:88:4;2314:31;2323:5;2330:7;2339:5;2314:8;:31::i;:::-;1869:483;;;1680:672;;;;;;;:::o;170:327:19:-;221:6;:12;234:6;:4;:6::i;:::-;221:59;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;290:6;:12;303:8;:6;:8::i;:::-;290:59;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;359:6:19;:12;3075:2:2;359:60:19;;-1:-1:-1;;;;;;359:60:19;;;;;;;8260:4:20;8248:17;;;359:60:19;;;8230:36:20;384:2:19;8282:18:20;;;8275:34;8345:2;8325:18;;;8318:30;8384:2;8364:18;;;8357:30;8424;8403:19;;;8396:59;8472:19;;359:60:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;429:6;:12;442:13;3222:12:2;;;3144:97;442:13:19;429:61;;-1:-1:-1;;;;;;429:61:19;;;;;;;;;;8758:25:20;;;;457:1:19;8799:18:20;;;8792:34;8862:2;8842:18;;;8835:30;8901:2;8881:18;;;8874:30;8941:29;8920:19;;;8913:58;8988:19;;429:61:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;170:327::o;8989:128:2:-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;10663:477::-;-1:-1:-1;;;;;3952:18:2;;;10762:24;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10828:37:2;;10824:310;;10904:5;10885:16;:24;10881:130;;;10936:60;;-1:-1:-1;;;10936:60:2;;-1:-1:-1;;;;;9238:32:20;;10936:60:2;;;9220:51:20;9287:18;;;9280:34;;;9330:18;;;9323:34;;;9193:18;;10936:60:2;9018:345:20;10881:130:2;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10752:388;10663:477;;;:::o;5656:300::-;-1:-1:-1;;;;;5739:18:2;;5735:86;;5780:30;;-1:-1:-1;;;5780:30:2;;5807:1;5780:30;;;9514:51:20;9487:18;;5780:30:2;9368:203:20;5735:86:2;-1:-1:-1;;;;;5834:16:2;;5830:86;;5873:32;;-1:-1:-1;;;5873:32:2;;5902:1;5873:32;;;9514:51:20;9487:18;;5873:32:2;9368:203:20;5830:86:2;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;3845:262:13:-;3898:7;3929:4;-1:-1:-1;;;;;3938:11:13;3921:28;;:63;;;;;3970:14;3953:13;:31;3921:63;3917:184;;;-1:-1:-1;4007:22:13;;3845:262::o;3917:184::-;4067:23;4204:80;;;2079:95;4204:80;;;10062:25:20;4226:11:13;10103:18:20;;;10096:34;;;;4239:14:13;10146:18:20;;;10139:34;4255:13:13;10189:18:20;;;10182:34;4278:4:13;10232:19:20;;;10225:61;4168:7:13;;10034:19:20;;4204:80:13;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;6021:126;6067:13;6099:41;:5;6126:13;6099:26;:41::i;6473:135::-;6522:13;6554:47;:8;6584:16;6554:29;:47::i;4917:176::-;4994:7;5020:66;5053:20;:18;:20::i;:::-;5075:10;3555:4:14;3549:11;-1:-1:-1;;;3573:23:14;;3625:4;3616:14;;3609:39;;;;3677:4;3668:14;;3661:34;3733:4;3718:20;;;3353:401;6803:260:12;6888:7;6908:17;6927:18;6947:16;6967:25;6978:4;6984:1;6987;6990;6967:10;:25::i;:::-;6907:85;;;;;;7002:28;7014:5;7021:8;7002:11;:28::i;:::-;-1:-1:-1;7047:9:12;;6803:260;-1:-1:-1;;;;;;6803:260:12:o;9949:432:2:-;-1:-1:-1;;;;;10061:19:2;;10057:89;;10103:32;;-1:-1:-1;;;10103:32:2;;10132:1;10103:32;;;9514:51:20;9487:18;;10103:32:2;9368:203:20;10057:89:2;-1:-1:-1;;;;;10159:21:2;;10155:90;;10203:31;;-1:-1:-1;;;10203:31:2;;10231:1;10203:31;;;9514:51:20;9487:18;;10203:31:2;9368:203:20;10155:90:2;-1:-1:-1;;;;;10254:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10299:76;;;;10349:7;-1:-1:-1;;;;;10333:31:2;10342:5;-1:-1:-1;;;;;10333:31:2;;10358:5;10333:31;;;;1354:25:20;;1342:2;1327:18;;1208:177;10333:31:2;;;;;;;;9949:432;;;;:::o;6271:1107::-;-1:-1:-1;;;;;6360:18:2;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:2;;-1:-1:-1;6356:540:2;;-1:-1:-1;;;;;6570:15:2;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:2;;-1:-1:-1;;;;;9238:32:20;;6649:50:2;;;9220:51:20;9287:18;;;9280:34;;;9330:18;;;9323:34;;;9193:18;;6649:50:2;9018:345:20;6599:115:2;-1:-1:-1;;;;;6834:15:2;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:2;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:2;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:2;7355:4;-1:-1:-1;;;;;7346:25:2;;7365:5;7346:25;;;;1354::20;;1342:2;1327:18;;1208:177;7346:25:2;;;;;;;;6271:1107;;;:::o;3385:267:9:-;3479:13;1390:66;3508:46;;3504:142;;3577:15;3586:5;3577:8;:15::i;:::-;3570:22;;;;3504:142;3630:5;3623:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5140:1530:12;5266:7;;;6199:66;6186:79;;6182:164;;;-1:-1:-1;6297:1:12;;-1:-1:-1;6301:30:12;;-1:-1:-1;6333:1:12;6281:54;;6182:164;6457:24;;;6440:14;6457:24;;;;;;;;;10524:25:20;;;10597:4;10585:17;;10565:18;;;10558:45;;;;10619:18;;;10612:34;;;10662:18;;;10655:34;;;6457:24:12;;10496:19:20;;6457:24:12;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6457:24:12;;-1:-1:-1;;6457:24:12;;;-1:-1:-1;;;;;;;6495:20:12;;6491:113;;-1:-1:-1;6547:1:12;;-1:-1:-1;6551:29:12;;-1:-1:-1;6547:1:12;;-1:-1:-1;6531:62:12;;6491:113;6622:6;-1:-1:-1;6630:20:12;;-1:-1:-1;6630:20:12;;-1:-1:-1;5140:1530:12;;;;;;;;;:::o;7196:532::-;7291:20;7282:5;:29;;;;;;;;:::i;:::-;;7278:444;;7196:532;;:::o;7278:444::-;7387:29;7378:5;:38;;;;;;;;:::i;:::-;;7374:348;;7439:23;;-1:-1:-1;;;7439:23:12;;;;;;;;;;;7374:348;7492:35;7483:5;:44;;;;;;;;:::i;:::-;;7479:243;;7550:46;;-1:-1:-1;;;7550:46:12;;;;;1354:25:20;;;1327:18;;7550:46:12;1208:177:20;7479:243:12;7626:30;7617:5;:39;;;;;;;;:::i;:::-;;7613:109;;7679:32;;-1:-1:-1;;;7679:32:12;;;;;1354:25:20;;;1327:18;;7679:32:12;1208:177:20;7613:109:12;7196:532;;:::o;2078:405:9:-;2137:13;2162:11;2176:16;2187:4;2176:10;:16::i;:::-;2300:14;;;2311:2;2300:14;;;;;;;;;2162:30;;-1:-1:-1;2280:17:9;;2300:14;;;;;;;;;-1:-1:-1;;;2390:16:9;;;-1:-1:-1;2435:4:9;2426:14;;2419:28;;;;-1:-1:-1;2390:16:9;2078:405::o;2555:245::-;2616:7;2688:4;2652:40;;2715:2;2706:11;;2702:69;;;2740:20;;-1:-1:-1;;;2740:20:9;;;;;;;;;;;14:289:20;56:3;94:5;88:12;121:6;116:3;109:19;177:6;170:4;163:5;159:16;152:4;147:3;143:14;137:47;229:1;222:4;213:6;208:3;204:16;200:27;193:38;292:4;285:2;281:7;276:2;268:6;264:15;260:29;255:3;251:39;247:50;240:57;;;14:289;;;;:::o;308:220::-;457:2;446:9;439:21;420:4;477:45;518:2;507:9;503:18;495:6;477:45;:::i;:::-;469:53;308:220;-1:-1:-1;;;308:220:20:o;533:173::-;601:20;;-1:-1:-1;;;;;650:31:20;;640:42;;630:70;;696:1;693;686:12;630:70;533:173;;;:::o;711:300::-;779:6;787;840:2;828:9;819:7;815:23;811:32;808:52;;;856:1;853;846:12;808:52;879:29;898:9;879:29;:::i;:::-;869:39;977:2;962:18;;;;949:32;;-1:-1:-1;;;711:300:20:o;1390:374::-;1467:6;1475;1483;1536:2;1524:9;1515:7;1511:23;1507:32;1504:52;;;1552:1;1549;1542:12;1504:52;1575:29;1594:9;1575:29;:::i;:::-;1565:39;;1623:38;1657:2;1646:9;1642:18;1623:38;:::i;:::-;1390:374;;1613:48;;-1:-1:-1;;;1730:2:20;1715:18;;;;1702:32;;1390:374::o;2140:186::-;2199:6;2252:2;2240:9;2231:7;2227:23;2223:32;2220:52;;;2268:1;2265;2258:12;2220:52;2291:29;2310:9;2291:29;:::i;2331:1238::-;2737:3;2732;2728:13;2720:6;2716:26;2705:9;2698:45;2779:3;2774:2;2763:9;2759:18;2752:31;2679:4;2806:46;2847:3;2836:9;2832:19;2824:6;2806:46;:::i;:::-;2900:9;2892:6;2888:22;2883:2;2872:9;2868:18;2861:50;2934:33;2960:6;2952;2934:33;:::i;:::-;2998:2;2983:18;;2976:34;;;-1:-1:-1;;;;;3047:32:20;;3041:3;3026:19;;3019:61;3067:3;3096:19;;3089:35;;;3161:22;;;3155:3;3140:19;;3133:51;3233:13;;3255:22;;;3305:2;3331:15;;;;-1:-1:-1;3293:15:20;;;;-1:-1:-1;3374:169:20;3388:6;3385:1;3382:13;3374:169;;;3449:13;;3437:26;;3492:2;3518:15;;;;3483:12;;;;3410:1;3403:9;3374:169;;;-1:-1:-1;3560:3:20;;2331:1238;-1:-1:-1;;;;;;;;;;;2331:1238:20:o;3574:903::-;3685:6;3693;3701;3709;3717;3725;3733;3786:3;3774:9;3765:7;3761:23;3757:33;3754:53;;;3803:1;3800;3793:12;3754:53;3826:29;3845:9;3826:29;:::i;:::-;3816:39;;3874:38;3908:2;3897:9;3893:18;3874:38;:::i;:::-;3864:48;-1:-1:-1;3981:2:20;3966:18;;3953:32;;-1:-1:-1;4082:2:20;4067:18;;4054:32;;-1:-1:-1;4164:3:20;4149:19;;4136:33;4213:4;4200:18;;4188:31;;4178:59;;4233:1;4230;4223:12;4178:59;3574:903;;;;-1:-1:-1;3574:903:20;;;;4256:7;4336:3;4321:19;;4308:33;;-1:-1:-1;4440:3:20;4425:19;;;4412:33;;3574:903;-1:-1:-1;;3574:903:20:o;4482:260::-;4550:6;4558;4611:2;4599:9;4590:7;4586:23;4582:32;4579:52;;;4627:1;4624;4617:12;4579:52;4650:29;4669:9;4650:29;:::i;:::-;4640:39;;4698:38;4732:2;4721:9;4717:18;4698:38;:::i;:::-;4688:48;;4482:260;;;;;:::o;4747:380::-;4826:1;4822:12;;;;4869;;;4890:61;;4944:4;4936:6;4932:17;4922:27;;4890:61;4997:2;4989:6;4986:14;4966:18;4963:38;4960:161;;5043:10;5038:3;5034:20;5031:1;5024:31;5078:4;5075:1;5068:15;5106:4;5103:1;5096:15;4960:161;;4747:380;;;:::o;6161:762::-;6520:2;6509:9;6502:21;6483:4;6546:45;6587:2;6576:9;6572:18;6564:6;6546:45;:::i;:::-;6622:9;6614:6;6610:22;6668:2;6663;6652:9;6648:18;6641:30;6695:1;6687:6;6680:17;-1:-1:-1;;;6725:2:20;6717:6;6713:15;6706:34;6784:2;6780;6776:11;6771:2;6760:9;6756:18;6749:39;;6821:2;6816;6808:6;6804:15;6797:27;6857:26;6852:2;6844:6;6840:15;6833:51;6913:3;6905:6;6901:16;6893:24;;;6161:762;;;;:::o;6928:277::-;6995:6;7048:2;7036:9;7027:7;7023:23;7019:32;7016:52;;;7064:1;7061;7054:12;7016:52;7096:9;7090:16;7149:5;7142:13;7135:21;7128:5;7125:32;7115:60;;7171:1;7168;7161:12;7210:760;7569:2;7558:9;7551:21;7532:4;7595:45;7636:2;7625:9;7621:18;7613:6;7595:45;:::i;:::-;7671:9;7663:6;7659:22;7717:2;7712;7701:9;7697:18;7690:30;7744:1;7736:6;7729:17;-1:-1:-1;;;7774:2:20;7766:6;7762:15;7755:30;7829:2;7825;7821:11;7816:2;7805:9;7801:18;7794:39;;7866:2;7861;7853:6;7849:15;7842:27;7902:28;7897:2;7889:6;7885:15;7878:53;7960:3;7952:6;7948:16;7940:24;;;7210:760;;;;:::o;9576:222::-;9641:9;;;9662:10;;;9659:133;;;9714:10;9709:3;9705:20;9702:1;9695:31;9749:4;9746:1;9739:15;9777:4;9774:1;9767:15;10700:127;10761:10;10756:3;10752:20;10749:1;10742:31;10792:4;10789:1;10782:15;10816:4;10813:1;10806:15"
	},
	"Assembly": ".code\n  PUSH 160\t\t\tcontract MyTokenTest is MyToke...\n  PUSH 40\t\t\tcontract MyTokenTest is MyToke...\n  MSTORE \t\t\tcontract MyTokenTest is MyToke...\n  CALLVALUE \t\t\tcontract MyTokenTest is MyToke...\n  DUP1 \t\t\tcontract MyTokenTest is MyToke...\n  ISZERO \t\t\tcontract MyTokenTest is MyToke...\n  PUSH [tag] 1\t\t\tcontract MyTokenTest is MyToke...\n  JUMPI \t\t\tcontract MyTokenTest is MyToke...\n  PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n  DUP1 \t\t\tcontract MyTokenTest is MyToke...\n  REVERT \t\t\tcontract MyTokenTest is MyToke...\ntag 1\t\t\tcontract MyTokenTest is MyToke...\n  JUMPDEST \t\t\tcontract MyTokenTest is MyToke...\n  POP \t\t\tcontract MyTokenTest is MyToke...\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 7\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 26BCAA37B5B2B7\t\t\t\n  PUSH C9\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 31\t\t\t\n  PUSH F8\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 7\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 26BCAA37B5B2B7\t\t\t\n  PUSH C9\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 3\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 4D544B\t\t\t\n  PUSH E8\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH 3\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 7\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 8\t\t\t\n  JUMP \t\t\t\ntag 7\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH 4\t\t\t\n  PUSH [tag] 9\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 8\t\t\t\n  JUMP \t\t\t\ntag 9\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH [tag] 11\t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  DUP4 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 5\t\t\t\n  PUSH [tag] 12\t\t\t\n  JUMP \t\t\t\ntag 11\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 120\t\t\t\n  MSTORE \t\t\t\n  PUSH [tag] 13\t\t\t\n  DUP2 \t\t\t\n  PUSH 6\t\t\t\n  PUSH [tag] 12\t\t\t\n  JUMP \t\t\t\ntag 13\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 140\t\t\t\n  MSTORE \t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  KECCAK256 \t\t\t\n  PUSH E0\t\t\t\n  MSTORE \t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  KECCAK256 \t\t\t\n  PUSH 100\t\t\t\n  MSTORE \t\t\t\n  CHAINID \t\t\t\n  PUSH A0\t\t\t\n  MSTORE \t\t\t\n  PUSH [tag] 14\t\t\t\n  PUSH E0\t\t\t\n  MLOAD \t\t\t\n  PUSH 100\t\t\t\n  MLOAD \t\t\t\n  PUSH 40\t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  PUSH 8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F\t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  SWAP3 \t\t\t\n  SWAP1 \t\t\t\n  SWAP3 \t\t\t\n  MSTORE \t\t\t\n  PUSH 60\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  CHAINID \t\t\t\n  PUSH 80\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  ADDRESS \t\t\t\n  PUSH A0\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  PUSH C0\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  DUP4 \t\t\t\n  SUB \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  SWAP1 \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  KECCAK256 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 14\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 80\t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  ADDRESS \t\t\t\n  PUSH C0\t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  PUSH [tag] 42\t\t\tcontract MyTokenTest is MyToke...\n  JUMP \t\t\tcontract MyTokenTest is MyToke...\ntag 12\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP4 \t\t\t\n  MLOAD \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 20\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 21\t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 22\t\t\t\n  JUMP \t\t\t\ntag 21\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 23\t\t\t\n  JUMP \t\t\t\ntag 20\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 26\t\t\t\n  DUP5 \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 8\t\t\t\n  JUMP \t\t\t\ntag 26\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH FF\t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\ntag 23\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 22\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 1F\t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 31\t\t\t\n  JUMPI \t\t\t\n  DUP3 \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 305A27A9\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 4\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 32\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 32\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  REVERT \t\t\t\ntag 31\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 34\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 35\t\t\t\n  JUMP \t\t\t\ntag 34\t\t\t\n  JUMPDEST \t\t\t\n  OR \t\t\t\n  SWAP4 \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 37\t\t\te-Identifier: GPL-3.0\\n\\npragm...\n  JUMPDEST \t\t\te-Identifier: GPL-3.0\\n\\npragm...\n  PUSH 4E487B71\t\t\t \"remix_te\n  PUSH E0\t\t\tmpo\n  SHL \t\t\t0;\\nimport \"remix_tes\n  PUSH 0\t\t\t.\n  MSTORE \t\t\t.7.0 <0.9.0;\\nimport \"remix_te...\n  PUSH 41\t\t\tcont\n  PUSH 4\t\t\t.\n  MSTORE \t\t\tmport \"../contr\n  PUSH 24\t\t\t\\ncon\n  PUSH 0\t\t\t\"\n  REVERT \t\t\tken.sol\";\\n\\ncont\ntag 38\t\t\tnTest is MyToken {\\n\\n    func...\n  JUMPDEST \t\t\tnTest is MyToken {\\n\\n    func...\n  PUSH 1\t\t\tr\n  DUP2 \t\t\tAssert.equal\n  DUP2 \t\t\tAssert.equal\n  SHR \t\t\tAssert.equal\n  SWAP1 \t\t\tAssert.equal\n  DUP3 \t\t\t not match\")\n  AND \t\t\t not match\")\n  DUP1 \t\t\t not match\")\n  PUSH [tag] 45\t\t\t Assert.equal(symbol(), \"MTK\",...\n  JUMPI \t\t\t Assert.equal(symbol(), \"MTK\",...\n  PUSH 7F\t\t\tatch\n  DUP3 \t\t\tid not\n  AND \t\t\tol did not match\"\n  SWAP2 \t\t\ttoken symbol did not match\"\n  POP \t\t\ttoken symbol did not match\"\ntag 45\t\t\t Assert.equal(symbol(), \"MTK\",...\n  JUMPDEST \t\t\t Assert.equal(symbol(), \"MTK\",...\n  PUSH 20\t\t\tec\n  DUP3 \t\t\t\"token\n  LT \t\t\t8, \"token deci\n  DUP2 \t\t\t.equal(decimals(),\n  SUB \t\t\tert.equal(decimals(), 18, \"tok...\n  PUSH [tag] 46\t\t\tAssert.equal(decimals(), 18, \"...\n  JUMPI \t\t\tAssert.equal(decimals(), 18, \"...\n  PUSH 4E487B71\t\t\ttotalSuppl\n  PUSH E0\t\t\tqua\n  SHL \t\t\trt.equal(totalSupply\n  PUSH 0\t\t\ts\n  MSTORE \t\t\t      Assert.equal(totalSupply...\n  PUSH 22\t\t\tuld \n  PUSH 4\t\t\ts\n  MSTORE \t\t\tsupply should b\n  PUSH 24\t\t\t\n  PUSH 0\t\t\t\n  REVERT \t\t\t }\\n}\ntag 46\t\t\tAssert.equal(decimals(), 18, \"...\n  JUMPDEST \t\t\tAssert.equal(decimals(), 18, \"...\n  POP \t\t\tAssert.equal(decimals(), 18, \"...\n  SWAP2 \t\t\tnTest is MyToken {\\n\\n    func...\n  SWAP1 \t\t\tnTest is MyToken {\\n\\n    func...\n  POP \t\t\tnTest is MyToken {\\n\\n    func...\n  JUMP \t\t\tnTest is MyToken {\\n\\n    func...\ntag 40\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 49\t\t\t\n  JUMPI \t\t\t\n  DUP1 \t\t\t\n  PUSH 0\t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  PUSH 0\t\t\t\n  KECCAK256 \t\t\t\n  PUSH 1F\t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  PUSH 5\t\t\t\n  SHR \t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  PUSH 20\t\t\t\n  DUP6 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 50\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\ntag 50\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  PUSH 5\t\t\t\n  SHR \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\ntag 51\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 53\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  SSTORE \t\t\t\n  PUSH 1\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 51\t\t\t\n  JUMP \t\t\t\ntag 53\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 49\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 8\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH 40\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 57\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 57\t\t\t\n  PUSH [tag] 37\t\t\t\n  JUMP \t\t\t\ntag 57\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 58\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 59\t\t\t\n  DUP5 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 38\t\t\t\n  JUMP \t\t\t\ntag 59\t\t\t\n  JUMPDEST \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 40\t\t\t\n  JUMP \t\t\t\ntag 58\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 20\t\t\t\n  PUSH 1F\t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 61\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 62\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  DUP5 \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\ntag 62\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  PUSH 3\t\t\t\n  DUP6 \t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  SHR \t\t\t\n  NOT \t\t\t\n  AND \t\t\t\n  PUSH 1\t\t\t\n  DUP5 \t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  OR \t\t\t\n  DUP5 \t\t\t\n  SSTORE \t\t\t\n  PUSH [tag] 53\t\t\t\n  JUMP \t\t\t\ntag 61\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP5 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  KECCAK256 \t\t\t\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  DUP6 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\ntag 65\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 67\t\t\t\n  JUMPI \t\t\t\n  DUP8 \t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  DUP3 \t\t\t\n  SSTORE \t\t\t\n  PUSH 20\t\t\t\n  SWAP5 \t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  SWAP5 \t\t\t\n  PUSH 1\t\t\t\n  SWAP1 \t\t\t\n  SWAP3 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  ADD \t\t\t\n  PUSH [tag] 65\t\t\t\n  JUMP \t\t\t\ntag 67\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  DUP5 \t\t\t\n  DUP3 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 68\t\t\t\n  JUMPI \t\t\t\n  DUP7 \t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  PUSH 3\t\t\t\n  DUP8 \t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  PUSH F8\t\t\t\n  AND \t\t\t\n  SHR \t\t\t\n  NOT \t\t\t\n  AND \t\t\t\n  DUP2 \t\t\t\n  SSTORE \t\t\t\ntag 68\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  SHL \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 33\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 20\t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 20\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  MCOPY \t\t\t\n  PUSH 0\t\t\t\n  PUSH 40\t\t\t\n  DUP3 \t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  AND \t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 35\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 46\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  PUSH 20\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  PUSH 3\t\t\t\n  SHL \t\t\t\n  SHL \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 42\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 80\t\t\tcontract MyTokenTest is MyToke...\n  MLOAD \t\t\tcontract MyTokenTest is MyToke...\n  PUSH A0\t\t\tcontract MyTokenTest is MyToke...\n  MLOAD \t\t\tcontract MyTokenTest is MyToke...\n  PUSH C0\t\t\tcontract MyTokenTest is MyToke...\n  MLOAD \t\t\tcontract MyTokenTest is MyToke...\n  PUSH E0\t\t\tcontract MyTokenTest is MyToke...\n  MLOAD \t\t\tcontract MyTokenTest is MyToke...\n  PUSH 100\t\t\tcontract MyTokenTest is MyToke...\n  MLOAD \t\t\tcontract MyTokenTest is MyToke...\n  PUSH 120\t\t\tcontract MyTokenTest is MyToke...\n  MLOAD \t\t\tcontract MyTokenTest is MyToke...\n  PUSH 140\t\t\tcontract MyTokenTest is MyToke...\n  MLOAD \t\t\tcontract MyTokenTest is MyToke...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract MyTokenTest is MyToke...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract MyTokenTest is MyToke...\n  PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n  CODECOPY \t\t\tcontract MyTokenTest is MyToke...\n  PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n  ASSIGNIMMUTABLE 2033\t\t\tcontract MyTokenTest is MyToke...\n  PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n  ASSIGNIMMUTABLE 2030\t\t\tcontract MyTokenTest is MyToke...\n  PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n  ASSIGNIMMUTABLE 2027\t\t\tcontract MyTokenTest is MyToke...\n  PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n  ASSIGNIMMUTABLE 2025\t\t\tcontract MyTokenTest is MyToke...\n  PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n  ASSIGNIMMUTABLE 2023\t\t\tcontract MyTokenTest is MyToke...\n  PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n  ASSIGNIMMUTABLE 2021\t\t\tcontract MyTokenTest is MyToke...\n  PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n  ASSIGNIMMUTABLE 2019\t\t\tcontract MyTokenTest is MyToke...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract MyTokenTest is MyToke...\n  PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n  RETURN \t\t\tcontract MyTokenTest is MyToke...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract MyTokenTest is MyToke...\n      PUSH 40\t\t\tcontract MyTokenTest is MyToke...\n      MSTORE \t\t\tcontract MyTokenTest is MyToke...\n      CALLVALUE \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      ISZERO \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 1\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      REVERT \t\t\tcontract MyTokenTest is MyToke...\n    tag 1\t\t\tcontract MyTokenTest is MyToke...\n      JUMPDEST \t\t\tcontract MyTokenTest is MyToke...\n      POP \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 4\t\t\tcontract MyTokenTest is MyToke...\n      CALLDATASIZE \t\t\tcontract MyTokenTest is MyToke...\n      LT \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 2\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n      CALLDATALOAD \t\t\tcontract MyTokenTest is MyToke...\n      PUSH E0\t\t\tcontract MyTokenTest is MyToke...\n      SHR \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 7ECEBE00\t\t\tcontract MyTokenTest is MyToke...\n      GT \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 17\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH A9059CBB\t\t\tcontract MyTokenTest is MyToke...\n      GT \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 18\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH A9059CBB\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 13\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH D505ACCF\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 14\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH DC881D1C\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 15\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH DD62ED3E\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 16\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      REVERT \t\t\tcontract MyTokenTest is MyToke...\n    tag 18\t\t\tcontract MyTokenTest is MyToke...\n      JUMPDEST \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 7ECEBE00\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 10\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 84B0196E\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 11\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 95D89B41\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 12\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      REVERT \t\t\tcontract MyTokenTest is MyToke...\n    tag 17\t\t\tcontract MyTokenTest is MyToke...\n      JUMPDEST \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 23B872DD\t\t\tcontract MyTokenTest is MyToke...\n      GT \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 19\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 23B872DD\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 6\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 313CE567\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 7\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 3644E515\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 8\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 70A08231\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 9\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      REVERT \t\t\tcontract MyTokenTest is MyToke...\n    tag 19\t\t\tcontract MyTokenTest is MyToke...\n      JUMPDEST \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 6FDDE03\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 3\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 95EA7B3\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 4\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 18160DDD\t\t\tcontract MyTokenTest is MyToke...\n      EQ \t\t\tcontract MyTokenTest is MyToke...\n      PUSH [tag] 5\t\t\tcontract MyTokenTest is MyToke...\n      JUMPI \t\t\tcontract MyTokenTest is MyToke...\n    tag 2\t\t\tcontract MyTokenTest is MyToke...\n      JUMPDEST \t\t\tcontract MyTokenTest is MyToke...\n      PUSH 0\t\t\tcontract MyTokenTest is MyToke...\n      DUP1 \t\t\tcontract MyTokenTest is MyToke...\n      REVERT \t\t\tcontract MyTokenTest is MyToke...\n    tag 3\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 20\t\t\t\n      PUSH [tag] 21\t\t\t\n      JUMP \t\t\t\n    tag 20\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 22\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 23\t\t\t\n      JUMP \t\t\t\n    tag 22\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 4\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 24\t\t\t\n      PUSH [tag] 25\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 26\t\t\t\n      JUMP \t\t\t\n    tag 25\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 27\t\t\t\n      JUMP \t\t\t\n    tag 24\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 22\t\t\t\n      JUMP \t\t\t\n    tag 5\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\t\n      SLOAD \t\t\t\n    tag 30\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 22\t\t\t\n      JUMP \t\t\t\n    tag 6\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 24\t\t\t\n      PUSH [tag] 35\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 36\t\t\t\n      JUMP \t\t\t\n    tag 35\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 37\t\t\t\n      JUMP \t\t\t\n    tag 7\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 12\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 22\t\t\t\n      JUMP \t\t\t\n    tag 8\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 30\t\t\t\n      PUSH [tag] 44\t\t\t\n      JUMP \t\t\t\n    tag 9\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 30\t\t\t\n      PUSH [tag] 48\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 49\t\t\t\n      JUMP \t\t\t\n    tag 48\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 10\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 30\t\t\t\n      PUSH [tag] 53\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 49\t\t\t\n      JUMP \t\t\t\n    tag 53\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 54\t\t\t\n      JUMP \t\t\t\n    tag 11\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 56\t\t\t\n      PUSH [tag] 57\t\t\t\n      JUMP \t\t\t\n    tag 56\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 22\t\t\t\n      SWAP8 \t\t\t\n      SWAP7 \t\t\t\n      SWAP6 \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 59\t\t\t\n      JUMP \t\t\t\n    tag 12\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 20\t\t\t\n      PUSH [tag] 61\t\t\t\n      JUMP \t\t\t\n    tag 13\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 24\t\t\t\n      PUSH [tag] 64\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 26\t\t\t\n      JUMP \t\t\t\n    tag 64\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 65\t\t\t\n      JUMP \t\t\t\n    tag 14\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 67\t\t\t\n      PUSH [tag] 68\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 69\t\t\t\n      JUMP \t\t\t\n    tag 68\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 70\t\t\t\n      JUMP \t\t\t\n    tag 67\t\t\t\n      JUMPDEST \t\t\t\n      STOP \t\t\t\n    tag 15\t\t\tfunction testTokenInitialValue...\n      JUMPDEST \t\t\tfunction testTokenInitialValue...\n      PUSH [tag] 67\t\t\tfunction testTokenInitialValue...\n      PUSH [tag] 72\t\t\tfunction testTokenInitialValue...\n      JUMP \t\t\tfunction testTokenInitialValue...\n    tag 16\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 30\t\t\t\n      PUSH [tag] 74\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 75\t\t\t\n      JUMP \t\t\t\n    tag 74\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP4 \t\t\t\n      SWAP1 \t\t\t\n      SWAP5 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 21\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 3\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 79\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 80\t\t\t\n      JUMP \t\t\t\n    tag 79\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 81\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 80\t\t\t\n      JUMP \t\t\t\n    tag 81\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 82\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 83\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 82\t\t\t\n      JUMP \t\t\t\n    tag 83\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 84\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 84\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 82\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 27\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\t\n      PUSH [tag] 88\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 89\t\t\t\n      JUMP \t\t\t\n    tag 88\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 85\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 37\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\t\n      PUSH [tag] 93\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 94\t\t\t\n      JUMP \t\t\t\n    tag 93\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 95\t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 96\t\t\t\n      JUMP \t\t\t\n    tag 95\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 44\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 99\t\t\t\n      PUSH [tag] 100\t\t\t\n      JUMP \t\t\t\n    tag 99\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 54\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 7\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 85\t\t\t\n      JUMP \t\t\t\n    tag 57\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 106\t\t\t\n      PUSH [tag] 107\t\t\t\n      JUMP \t\t\t\n    tag 106\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 108\t\t\t\n      PUSH [tag] 109\t\t\t\n      JUMP \t\t\t\n    tag 108\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH F\t\t\t\n      PUSH F8\t\t\t\n      SHL \t\t\t\n      SWAP12 \t\t\t\n      SWAP4 \t\t\t\n      SWAP11 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP9 \t\t\t\n      POP \t\t\t\n      CHAINID \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      ADDRESS \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 61\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 79\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 80\t\t\t\n      JUMP \t\t\t\n    tag 65\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\t\n      PUSH [tag] 88\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 96\t\t\t\n      JUMP \t\t\t\n    tag 70\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      TIMESTAMP \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 124\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 313C8981\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n    tag 125\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 124\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9\t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 126\t\t\t\n      DUP13 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 7\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SSTORE \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 126\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP7 \t\t\t\n      SWAP1 \t\t\t\n      SWAP7 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP5 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH A0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH C0\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH E0\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 130\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 131\t\t\t\n      JUMP \t\t\t\n    tag 130\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 132\t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      DUP8 \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 133\t\t\t\n      JUMP \t\t\t\n    tag 132\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP10 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 134\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 25C00723\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP12 \t\t\t\n      AND \t\t\t\n      PUSH 24\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 125\t\t\t\n      JUMP \t\t\t\n    tag 134\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 137\t\t\t\n      DUP11 \t\t\t\n      DUP11 \t\t\t\n      DUP11 \t\t\t\n      PUSH [tag] 89\t\t\t\n      JUMP \t\t\t\n    tag 137\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 72\t\t\tfunction testTokenInitialValue...\n      JUMPDEST \t\t\tfunction testTokenInitialValue...\n      PUSHLIB remix_tests.sol:Assert\t\t\tAssert\n      PUSH E8C2CB16\t\t\tAssert.equal\n      PUSH [tag] 139\t\t\tname()\n      PUSH [tag] 21\t\t\tname\n      JUMP \t\t\tname()\n    tag 139\t\t\tname()\n      JUMPDEST \t\t\tname()\n      PUSH 40\t\t\tAssert.equal(name(), \"MyToken\"...\n      MLOAD \t\t\tAssert.equal(name(), \"MyToken\"...\n      DUP3 \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH FFFFFFFF\t\t\tAssert.equal(name(), \"MyToken\"...\n      AND \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH E0\t\t\tAssert.equal(name(), \"MyToken\"...\n      SHL \t\t\tAssert.equal(name(), \"MyToken\"...\n      DUP2 \t\t\tAssert.equal(name(), \"MyToken\"...\n      MSTORE \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH 4\t\t\tAssert.equal(name(), \"MyToken\"...\n      ADD \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH [tag] 140\t\t\tAssert.equal(name(), \"MyToken\"...\n      SWAP2 \t\t\tAssert.equal(name(), \"MyToken\"...\n      SWAP1 \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH [tag] 141\t\t\tAssert.equal(name(), \"MyToken\"...\n      JUMP \t\t\tAssert.equal(name(), \"MyToken\"...\n    tag 140\t\t\tAssert.equal(name(), \"MyToken\"...\n      JUMPDEST \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH 20\t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH 40\t\t\tAssert.equal(name(), \"MyToken\"...\n      MLOAD \t\t\tAssert.equal(name(), \"MyToken\"...\n      DUP1 \t\t\tAssert.equal(name(), \"MyToken\"...\n      DUP4 \t\t\tAssert.equal(name(), \"MyToken\"...\n      SUB \t\t\tAssert.equal(name(), \"MyToken\"...\n      DUP2 \t\t\tAssert.equal(name(), \"MyToken\"...\n      DUP7 \t\t\tAssert.equal(name(), \"MyToken\"...\n      GAS \t\t\tAssert.equal(name(), \"MyToken\"...\n      DELEGATECALL \t\t\tAssert.equal(name(), \"MyToken\"...\n      ISZERO \t\t\tAssert.equal(name(), \"MyToken\"...\n      DUP1 \t\t\tAssert.equal(name(), \"MyToken\"...\n      ISZERO \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH [tag] 143\t\t\tAssert.equal(name(), \"MyToken\"...\n      JUMPI \t\t\tAssert.equal(name(), \"MyToken\"...\n      RETURNDATASIZE \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH 0\t\t\tAssert.equal(name(), \"MyToken\"...\n      DUP1 \t\t\tAssert.equal(name(), \"MyToken\"...\n      RETURNDATACOPY \t\t\tAssert.equal(name(), \"MyToken\"...\n      RETURNDATASIZE \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH 0\t\t\tAssert.equal(name(), \"MyToken\"...\n      REVERT \t\t\tAssert.equal(name(), \"MyToken\"...\n    tag 143\t\t\tAssert.equal(name(), \"MyToken\"...\n      JUMPDEST \t\t\tAssert.equal(name(), \"MyToken\"...\n      POP \t\t\tAssert.equal(name(), \"MyToken\"...\n      POP \t\t\tAssert.equal(name(), \"MyToken\"...\n      POP \t\t\tAssert.equal(name(), \"MyToken\"...\n      POP \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH 40\t\t\tAssert.equal(name(), \"MyToken\"...\n      MLOAD \t\t\tAssert.equal(name(), \"MyToken\"...\n      RETURNDATASIZE \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH 1F\t\t\tAssert.equal(name(), \"MyToken\"...\n      NOT \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH 1F\t\t\tAssert.equal(name(), \"MyToken\"...\n      DUP3 \t\t\tAssert.equal(name(), \"MyToken\"...\n      ADD \t\t\tAssert.equal(name(), \"MyToken\"...\n      AND \t\t\tAssert.equal(name(), \"MyToken\"...\n      DUP3 \t\t\tAssert.equal(name(), \"MyToken\"...\n      ADD \t\t\tAssert.equal(name(), \"MyToken\"...\n      DUP1 \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH 40\t\t\tAssert.equal(name(), \"MyToken\"...\n      MSTORE \t\t\tAssert.equal(name(), \"MyToken\"...\n      POP \t\t\tAssert.equal(name(), \"MyToken\"...\n      DUP2 \t\t\tAssert.equal(name(), \"MyToken\"...\n      ADD \t\t\tAssert.equal(name(), \"MyToken\"...\n      SWAP1 \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH [tag] 144\t\t\tAssert.equal(name(), \"MyToken\"...\n      SWAP2 \t\t\tAssert.equal(name(), \"MyToken\"...\n      SWAP1 \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSH [tag] 145\t\t\tAssert.equal(name(), \"MyToken\"...\n      JUMP \t\t\tAssert.equal(name(), \"MyToken\"...\n    tag 144\t\t\tAssert.equal(name(), \"MyToken\"...\n      JUMPDEST \t\t\tAssert.equal(name(), \"MyToken\"...\n      POP \t\t\tAssert.equal(name(), \"MyToken\"...\n      PUSHLIB remix_tests.sol:Assert\t\t\tAssert\n      PUSH E8C2CB16\t\t\tAssert.equal\n      PUSH [tag] 146\t\t\tsymbol()\n      PUSH [tag] 61\t\t\tsymbol\n      JUMP \t\t\tsymbol()\n    tag 146\t\t\tsymbol()\n      JUMPDEST \t\t\tsymbol()\n      PUSH 40\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      MLOAD \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DUP3 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH FFFFFFFF\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      AND \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH E0\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      SHL \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DUP2 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      MSTORE \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH 4\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      ADD \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH [tag] 147\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      SWAP2 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      SWAP1 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH [tag] 148\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      JUMP \t\t\tAssert.equal(symbol(), \"MTK\", ...\n    tag 147\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      JUMPDEST \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH 20\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH 40\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      MLOAD \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DUP1 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DUP4 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      SUB \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DUP2 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DUP7 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      GAS \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DELEGATECALL \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      ISZERO \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DUP1 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      ISZERO \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH [tag] 150\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      JUMPI \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      RETURNDATASIZE \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH 0\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DUP1 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      RETURNDATACOPY \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      RETURNDATASIZE \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH 0\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      REVERT \t\t\tAssert.equal(symbol(), \"MTK\", ...\n    tag 150\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      JUMPDEST \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      POP \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      POP \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      POP \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      POP \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH 40\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      MLOAD \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      RETURNDATASIZE \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH 1F\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      NOT \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH 1F\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DUP3 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      ADD \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      AND \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DUP3 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      ADD \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DUP1 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH 40\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      MSTORE \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      POP \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      DUP2 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      ADD \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      SWAP1 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH [tag] 151\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      SWAP2 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      SWAP1 \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      PUSH [tag] 145\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      JUMP \t\t\tAssert.equal(symbol(), \"MTK\", ...\n    tag 151\t\t\tAssert.equal(symbol(), \"MTK\", ...\n      JUMPDEST \t\t\tAssert.equal(symbol(), \"MTK\", ...\n      POP \t\t\t\n      PUSHLIB remix_tests.sol:Assert\t\t\tAssert\n      PUSH ABCD7960\t\t\tAssert.equal\n      PUSH 12\t\t\t\n      PUSH 40\t\t\tAssert.equal(decimals(), 18, \"...\n      MLOAD \t\t\tAssert.equal(decimals(), 18, \"...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      PUSH E0\t\t\tAssert.equal(decimals(), 18, \"...\n      DUP5 \t\t\tAssert.equal(decimals(), 18, \"...\n      SWAP1 \t\t\tAssert.equal(decimals(), 18, \"...\n      SHL \t\t\tAssert.equal(decimals(), 18, \"...\n      AND \t\t\tAssert.equal(decimals(), 18, \"...\n      DUP2 \t\t\tAssert.equal(decimals(), 18, \"...\n      MSTORE \t\t\tAssert.equal(decimals(), 18, \"...\n      PUSH FF\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\tAssert.equal(decimals(), 18, \"...\n      DUP3 \t\t\tAssert.equal(decimals(), 18, \"...\n      ADD \t\t\tAssert.equal(decimals(), 18, \"...\n      MSTORE \t\t\t\n      PUSH 12\t\t\t18\n      PUSH 24\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 60\t\t\t\n      PUSH 44\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 1C\t\t\t\n      PUSH 64\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 746F6B656E20646563696D616C7320646964206E6F74206D6174636800000000\t\t\t\n      PUSH 84\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH A4\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\tAssert.equal(decimals(), 18, \"...\n      PUSH 40\t\t\tAssert.equal(decimals(), 18, \"...\n      MLOAD \t\t\tAssert.equal(decimals(), 18, \"...\n      DUP1 \t\t\tAssert.equal(decimals(), 18, \"...\n      DUP4 \t\t\tAssert.equal(decimals(), 18, \"...\n      SUB \t\t\tAssert.equal(decimals(), 18, \"...\n      DUP2 \t\t\tAssert.equal(decimals(), 18, \"...\n      DUP7 \t\t\tAssert.equal(decimals(), 18, \"...\n      GAS \t\t\tAssert.equal(decimals(), 18, \"...\n      DELEGATECALL \t\t\tAssert.equal(decimals(), 18, \"...\n      ISZERO \t\t\tAssert.equal(decimals(), 18, \"...\n      DUP1 \t\t\tAssert.equal(decimals(), 18, \"...\n      ISZERO \t\t\tAssert.equal(decimals(), 18, \"...\n      PUSH [tag] 156\t\t\tAssert.equal(decimals(), 18, \"...\n      JUMPI \t\t\tAssert.equal(decimals(), 18, \"...\n      RETURNDATASIZE \t\t\tAssert.equal(decimals(), 18, \"...\n      PUSH 0\t\t\tAssert.equal(decimals(), 18, \"...\n      DUP1 \t\t\tAssert.equal(decimals(), 18, \"...\n      RETURNDATACOPY \t\t\tAssert.equal(decimals(), 18, \"...\n      RETURNDATASIZE \t\t\tAssert.equal(decimals(), 18, \"...\n      PUSH 0\t\t\tAssert.equal(decimals(), 18, \"...\n      REVERT \t\t\tAssert.equal(decimals(), 18, \"...\n    tag 156\t\t\tAssert.equal(decimals(), 18, \"...\n      JUMPDEST \t\t\tAssert.equal(decimals(), 18, \"...\n      POP \t\t\tAssert.equal(decimals(), 18, \"...\n      POP \t\t\tAssert.equal(decimals(), 18, \"...\n      POP \t\t\tAssert.equal(decimals(), 18, \"...\n      POP \t\t\tAssert.equal(decimals(), 18, \"...\n      PUSH 40\t\t\tAssert.equal(decimals(), 18, \"...\n      MLOAD \t\t\tAssert.equal(decimals(), 18, \"...\n      RETURNDATASIZE \t\t\tAssert.equal(decimals(), 18, \"...\n      PUSH 1F\t\t\tAssert.equal(decimals(), 18, \"...\n      NOT \t\t\tAssert.equal(decimals(), 18, \"...\n      PUSH 1F\t\t\tAssert.equal(decimals(), 18, \"...\n      DUP3 \t\t\tAssert.equal(decimals(), 18, \"...\n      ADD \t\t\tAssert.equal(decimals(), 18, \"...\n      AND \t\t\tAssert.equal(decimals(), 18, \"...\n      DUP3 \t\t\tAssert.equal(decimals(), 18, \"...\n      ADD \t\t\tAssert.equal(decimals(), 18, \"...\n      DUP1 \t\t\tAssert.equal(decimals(), 18, \"...\n      PUSH 40\t\t\tAssert.equal(decimals(), 18, \"...\n      MSTORE \t\t\tAssert.equal(decimals(), 18, \"...\n      POP \t\t\tAssert.equal(decimals(), 18, \"...\n      DUP2 \t\t\tAssert.equal(decimals(), 18, \"...\n      ADD \t\t\tAssert.equal(decimals(), 18, \"...\n      SWAP1 \t\t\tAssert.equal(decimals(), 18, \"...\n      PUSH [tag] 157\t\t\tAssert.equal(decimals(), 18, \"...\n      SWAP2 \t\t\tAssert.equal(decimals(), 18, \"...\n      SWAP1 \t\t\tAssert.equal(decimals(), 18, \"...\n      PUSH [tag] 145\t\t\tAssert.equal(decimals(), 18, \"...\n      JUMP \t\t\tAssert.equal(decimals(), 18, \"...\n    tag 157\t\t\tAssert.equal(decimals(), 18, \"...\n      JUMPDEST \t\t\tAssert.equal(decimals(), 18, \"...\n      POP \t\t\tAssert.equal(decimals(), 18, \"...\n      PUSHLIB remix_tests.sol:Assert\t\t\tAssert\n      PUSH ABCD7960\t\t\tAssert.equal\n      PUSH [tag] 158\t\t\ttotalSupply()\n      PUSH 2\t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 158\t\t\ttotalSupply()\n      JUMPDEST \t\t\ttotalSupply()\n      PUSH 40\t\t\tAssert.equal(totalSupply(), 0,...\n      MLOAD \t\t\tAssert.equal(totalSupply(), 0,...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      PUSH E0\t\t\tAssert.equal(totalSupply(), 0,...\n      DUP5 \t\t\tAssert.equal(totalSupply(), 0,...\n      SWAP1 \t\t\tAssert.equal(totalSupply(), 0,...\n      SHL \t\t\tAssert.equal(totalSupply(), 0,...\n      AND \t\t\tAssert.equal(totalSupply(), 0,...\n      DUP2 \t\t\tAssert.equal(totalSupply(), 0,...\n      MSTORE \t\t\tAssert.equal(totalSupply(), 0,...\n      PUSH 4\t\t\tAssert.equal(totalSupply(), 0,...\n      DUP2 \t\t\tAssert.equal(totalSupply(), 0,...\n      ADD \t\t\tAssert.equal(totalSupply(), 0,...\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t0\n      PUSH 24\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 60\t\t\t\n      PUSH 44\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 1B\t\t\t\n      PUSH 64\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 746F6B656E20737570706C792073686F756C64206265207A65726F0000000000\t\t\t\n      PUSH 84\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH A4\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\tAssert.equal(totalSupply(), 0,...\n      PUSH 40\t\t\tAssert.equal(totalSupply(), 0,...\n      MLOAD \t\t\tAssert.equal(totalSupply(), 0,...\n      DUP1 \t\t\tAssert.equal(totalSupply(), 0,...\n      DUP4 \t\t\tAssert.equal(totalSupply(), 0,...\n      SUB \t\t\tAssert.equal(totalSupply(), 0,...\n      DUP2 \t\t\tAssert.equal(totalSupply(), 0,...\n      DUP7 \t\t\tAssert.equal(totalSupply(), 0,...\n      GAS \t\t\tAssert.equal(totalSupply(), 0,...\n      DELEGATECALL \t\t\tAssert.equal(totalSupply(), 0,...\n      ISZERO \t\t\tAssert.equal(totalSupply(), 0,...\n      DUP1 \t\t\tAssert.equal(totalSupply(), 0,...\n      ISZERO \t\t\tAssert.equal(totalSupply(), 0,...\n      PUSH [tag] 162\t\t\tAssert.equal(totalSupply(), 0,...\n      JUMPI \t\t\tAssert.equal(totalSupply(), 0,...\n      RETURNDATASIZE \t\t\tAssert.equal(totalSupply(), 0,...\n      PUSH 0\t\t\tAssert.equal(totalSupply(), 0,...\n      DUP1 \t\t\tAssert.equal(totalSupply(), 0,...\n      RETURNDATACOPY \t\t\tAssert.equal(totalSupply(), 0,...\n      RETURNDATASIZE \t\t\tAssert.equal(totalSupply(), 0,...\n      PUSH 0\t\t\tAssert.equal(totalSupply(), 0,...\n      REVERT \t\t\tAssert.equal(totalSupply(), 0,...\n    tag 162\t\t\tAssert.equal(totalSupply(), 0,...\n      JUMPDEST \t\t\tAssert.equal(totalSupply(), 0,...\n      POP \t\t\tAssert.equal(totalSupply(), 0,...\n      POP \t\t\tAssert.equal(totalSupply(), 0,...\n      POP \t\t\tAssert.equal(totalSupply(), 0,...\n      POP \t\t\tAssert.equal(totalSupply(), 0,...\n      PUSH 40\t\t\tAssert.equal(totalSupply(), 0,...\n      MLOAD \t\t\tAssert.equal(totalSupply(), 0,...\n      RETURNDATASIZE \t\t\tAssert.equal(totalSupply(), 0,...\n      PUSH 1F\t\t\tAssert.equal(totalSupply(), 0,...\n      NOT \t\t\tAssert.equal(totalSupply(), 0,...\n      PUSH 1F\t\t\tAssert.equal(totalSupply(), 0,...\n      DUP3 \t\t\tAssert.equal(totalSupply(), 0,...\n      ADD \t\t\tAssert.equal(totalSupply(), 0,...\n      AND \t\t\tAssert.equal(totalSupply(), 0,...\n      DUP3 \t\t\tAssert.equal(totalSupply(), 0,...\n      ADD \t\t\tAssert.equal(totalSupply(), 0,...\n      DUP1 \t\t\tAssert.equal(totalSupply(), 0,...\n      PUSH 40\t\t\tAssert.equal(totalSupply(), 0,...\n      MSTORE \t\t\tAssert.equal(totalSupply(), 0,...\n      POP \t\t\tAssert.equal(totalSupply(), 0,...\n      DUP2 \t\t\tAssert.equal(totalSupply(), 0,...\n      ADD \t\t\tAssert.equal(totalSupply(), 0,...\n      SWAP1 \t\t\tAssert.equal(totalSupply(), 0,...\n      PUSH [tag] 163\t\t\tAssert.equal(totalSupply(), 0,...\n      SWAP2 \t\t\tAssert.equal(totalSupply(), 0,...\n      SWAP1 \t\t\tAssert.equal(totalSupply(), 0,...\n      PUSH [tag] 145\t\t\tAssert.equal(totalSupply(), 0,...\n      JUMP \t\t\tAssert.equal(totalSupply(), 0,...\n    tag 163\t\t\tAssert.equal(totalSupply(), 0,...\n      JUMPDEST \t\t\tAssert.equal(totalSupply(), 0,...\n      POP \t\t\tAssert.equal(totalSupply(), 0,...\n      JUMP \t\t\tfunction testTokenInitialValue...\n    tag 89\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 167\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 168\t\t\t\n      JUMP \t\t\t\n    tag 167\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 94\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP4 \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH 0\t\t\t\n      NOT \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 175\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 172\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 7DC7A0D9\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 64\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 125\t\t\t\n      JUMP \t\t\t\n    tag 172\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 175\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 168\t\t\t\n      JUMP \t\t\t\n    tag 175\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 96\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 177\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 4B637E8F\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 125\t\t\t\n      JUMP \t\t\t\n    tag 177\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 180\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH EC442F05\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 125\t\t\t\n      JUMP \t\t\t\n    tag 180\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 167\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 183\t\t\t\n      JUMP \t\t\t\n    tag 100\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      ADDRESS \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      PUSHIMMUTABLE 2023\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 185\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSHIMMUTABLE 2021\t\t\t\n      CHAINID \t\t\t\n      EQ \t\t\t\n    tag 185\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 186\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSHIMMUTABLE 2019\t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 186\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 99\t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSHIMMUTABLE 2025\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSHIMMUTABLE 2027\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      CHAINID \t\t\t\n      PUSH 80\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      ADDRESS \t\t\t\n      PUSH A0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      PUSH C0\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 107\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 99\t\t\t\n      PUSHIMMUTABLE 2030\t\t\t\n      PUSH 5\t\t\t\n      PUSH [tag] 193\t\t\t\n      JUMP \t\t\t\n    tag 109\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 99\t\t\t\n      PUSHIMMUTABLE 2033\t\t\t\n      PUSH 6\t\t\t\n      PUSH [tag] 193\t\t\t\n      JUMP \t\t\t\n    tag 131\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 85\t\t\t\n      PUSH [tag] 199\t\t\t\n      PUSH [tag] 100\t\t\t\n      JUMP \t\t\t\n    tag 199\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1901\t\t\t\n      PUSH F0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 2\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 42\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 133\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 202\t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 203\t\t\t\n      JUMP \t\t\t\n    tag 202\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 204\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 205\t\t\t\n      JUMP \t\t\t\n    tag 204\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP7 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 168\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 207\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH E602DF05\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 125\t\t\t\n      JUMP \t\t\t\n    tag 207\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 4A1406B1\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 125\t\t\t\n      JUMP \t\t\t\n    tag 209\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP4 \t\t\t\n      DUP8 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      KECCAK256 \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 175\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925\t\t\t\n      DUP5 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 212\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 212\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 183\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 214\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 2\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 215\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 216\t\t\t\n      JUMP \t\t\t\n    tag 215\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 217\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 214\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 218\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 391434E3\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 64\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 125\t\t\t\n      JUMP \t\t\t\n    tag 218\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n    tag 217\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 220\t\t\t\n      JUMPI \t\t\t\n      PUSH 2\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      PUSH [tag] 221\t\t\t\n      JUMP \t\t\t\n    tag 220\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n    tag 221\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 222\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 222\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 193\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH FF\t\t\t\n      DUP4 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 227\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 228\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 229\t\t\t\n      JUMP \t\t\t\n    tag 228\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 85\t\t\t\n      JUMP \t\t\t\n    tag 227\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 231\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 80\t\t\t\n      JUMP \t\t\t\n    tag 231\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 232\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 80\t\t\t\n      JUMP \t\t\t\n    tag 232\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 233\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 234\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 233\t\t\t\n      JUMP \t\t\t\n    tag 234\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 235\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 235\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 233\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 85\t\t\t\n      JUMP \t\t\t\n    tag 203\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP1 \t\t\t\n      PUSH 7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\t\t\t\n      DUP5 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 238\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 3\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 237\t\t\t\n      JUMP \t\t\t\n    tag 238\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      MSTORE \t\t\t\n      DUP11 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH FF\t\t\t\n      DUP10 \t\t\t\n      AND \t\t\t\n      SWAP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 60\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP8 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      SWAP1 \t\t\t\n      PUSH A0\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP6 \t\t\t\n      GAS \t\t\t\n      STATICCALL \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 242\t\t\t\n      JUMPI \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      RETURNDATACOPY \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 242\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 243\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 237\t\t\t\n      JUMP \t\t\t\n    tag 243\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 237\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 205\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 249\t\t\t\n      PUSH [tag] 247\t\t\t\n      JUMP \t\t\t\n    tag 249\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 250\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 250\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 255\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 255\t\t\t\n      PUSH [tag] 247\t\t\t\n      JUMP \t\t\t\n    tag 255\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 256\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH F645EEDF\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 256\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 261\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 261\t\t\t\n      PUSH [tag] 247\t\t\t\n      JUMP \t\t\t\n    tag 261\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 262\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH FCE698F7\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 125\t\t\t\n      JUMP \t\t\t\n    tag 262\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 3\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 268\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 268\t\t\t\n      PUSH [tag] 247\t\t\t\n      JUMP \t\t\t\n    tag 268\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 269\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 35E2F383\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 125\t\t\t\n      JUMP \t\t\t\n    tag 269\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 229\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 272\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 273\t\t\t\n      JUMP \t\t\t\n    tag 272\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP2 \t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      DUP4 \t\t\t\n      CALLDATACOPY \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 273\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 1F\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 85\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 2CD44AC3\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 279\t\t\te-Identifier: GPL-3.0\\n\\npragm...\n      JUMPDEST \t\t\te-Identifier: GPL-3.0\\n\\npragm...\n      PUSH 0\t\t\t.7.\n      DUP2 \t\t\t\\nimpo\n      MLOAD \t\t\t.sol\";\\nimpor\n      DUP1 \t\t\ten.sol\n      DUP5 \t\t\tMyT\n      MSTORE \t\t\ttracts/MyToken.sol\"\n      DUP1 \t\t\tn test\n      PUSH 20\t\t\tfunc\n      DUP5 \t\t\t{\\n\\n  \n      ADD \t\t\tken {\\n\\n    funct\n      PUSH 20\t\t\tis M\n      DUP7 \t\t\tTes\n      ADD \t\t\tokenTest is My\n      MCOPY \t\t\tct MyTokenTest is MyToken {\\n\\...\n      PUSH 0\t\t\tq\n      PUSH 20\t\t\tsser\n      DUP3 \t\t\t      \n      DUP7 \t\t\tic \n      ADD \t\t\tpublic {\\n       \n      ADD \t\t\ts() public {\\n        Assert\n      MSTORE \t\t\talValues() public {\\n        A...\n      PUSH 20\t\t\tsert\n      PUSH 1F\t\t\t  \n      NOT \t\t\t\\n      \n      PUSH 1F\t\t\tch\n      DUP4 \t\t\t not m\n      ADD \t\t\t did not match\"\n      AND \t\t\tname did not match\");\\n       \n      DUP6 \t\t\toke\n      ADD \t\t\t, \"token name did not match\");...\n      ADD \t\t\tken\", \"token name did not matc...\n      SWAP2 \t\t\t, \"MyToken\", \"token name did n...\n      POP \t\t\t, \"MyToken\", \"token name did n...\n      POP \t\t\t, \"MyToken\", \"token name did n...\n      SWAP3 \t\t\te-Identifier: GPL-3.0\\n\\npragm...\n      SWAP2 \t\t\te-Identifier: GPL-3.0\\n\\npragm...\n      POP \t\t\te-Identifier: GPL-3.0\\n\\npragm...\n      POP \t\t\te-Identifier: GPL-3.0\\n\\npragm...\n      JUMP \t\t\te-Identifier: GPL-3.0\\n\\npragm...\n    tag 23\t\t\tl(), \"MTK\", \"token symbol did ...\n      JUMPDEST \t\t\tl(), \"MTK\", \"token symbol did ...\n      PUSH 20\t\t\t0,\n      DUP2 \t\t\tlSupply()\n      MSTORE \t\t\tal(totalSupply(), 0, \n      PUSH 0\t\t\t\\n   \n      PUSH [tag] 284\t\t\tuld be zero\");\\n    }\\n}\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t }\\n}\n      PUSH [tag] 279\t\t\tuld be zero\");\\n    }\\n}\n      JUMP \t\t\tuld be zero\");\\n    }\\n}\n    tag 284\t\t\tuld be zero\");\\n    }\\n}\n      JUMPDEST \t\t\tuld be zero\");\\n    }\\n}\n      SWAP4 \t\t\tpply should be zero\");\\n    }\\...\n      SWAP3 \t\t\tl(), \"MTK\", \"token symbol did ...\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\tl(), \"MTK\", \"token symbol did ...\n    tag 280\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 286\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 286\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 26\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 288\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 289\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 280\t\t\t\n      JUMP \t\t\t\n    tag 289\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      PUSH 20\t\t\t\n      SWAP4 \t\t\t\n      SWAP1 \t\t\t\n      SWAP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 36\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 293\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 293\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 294\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 280\t\t\t\n      JUMP \t\t\t\n    tag 294\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 295\t\t\t\n      PUSH 20\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 280\t\t\t\n      JUMP \t\t\t\n    tag 295\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      SWAP3 \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 49\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 299\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 299\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 284\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 280\t\t\t\n      JUMP \t\t\t\n    tag 59\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FF\t\t\t\n      PUSH F8\t\t\t\n      SHL \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH E0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 302\t\t\t\n      PUSH E0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP10 \t\t\t\n      PUSH [tag] 279\t\t\t\n      JUMP \t\t\t\n    tag 302\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 40\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 303\t\t\t\n      DUP2 \t\t\t\n      DUP10 \t\t\t\n      PUSH [tag] 279\t\t\t\n      JUMP \t\t\t\n    tag 303\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      DUP9 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP8 \t\t\t\n      AND \t\t\t\n      PUSH 80\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH A0\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH C0\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP5 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n    tag 304\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 306\t\t\t\n      JUMPI \t\t\t\n      DUP4 \t\t\t\n      MLOAD \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      SWAP4 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP4 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 304\t\t\t\n      JUMP \t\t\t\n    tag 306\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP12 \t\t\t\n      SWAP11 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 69\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH E0\t\t\t\n      DUP9 \t\t\t\n      DUP11 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 308\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 308\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 309\t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 280\t\t\t\n      JUMP \t\t\t\n    tag 309\t\t\t\n      JUMPDEST \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 310\t\t\t\n      PUSH 20\t\t\t\n      DUP10 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 280\t\t\t\n      JUMP \t\t\t\n    tag 310\t\t\t\n      JUMPDEST \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH 60\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH 80\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FF\t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 311\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 311\t\t\t\n      JUMPDEST \t\t\t\n      SWAP7 \t\t\t\n      SWAP10 \t\t\t\n      SWAP6 \t\t\t\n      SWAP9 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP7 \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      SWAP5 \t\t\t\n      PUSH A0\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH C0\t\t\t\n      SWAP1 \t\t\t\n      SWAP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 75\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 313\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 313\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 314\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 280\t\t\t\n      JUMP \t\t\t\n    tag 314\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 315\t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 280\t\t\t\n      JUMP \t\t\t\n    tag 315\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 80\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 317\t\t\t\n      JUMPI \t\t\t\n      PUSH 7F\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 317\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 318\t\t\t\n      JUMPI \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 318\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 141\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 323\t\t\t\n      PUSH 60\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 279\t\t\t\n      JUMP \t\t\t\n    tag 323\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      PUSH 20\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 7\t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 26BCAA37B5B2B7\t\t\t\n      PUSH C9\t\t\t\n      SHL \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      PUSH 18\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 746F6B656E206E616D6520646964206E6F74206D617463680000000000000000\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 145\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 325\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 325\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 284\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 148\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 328\t\t\t\n      PUSH 60\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 279\t\t\t\n      JUMP \t\t\t\n    tag 328\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      PUSH 20\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 3\t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4D544B\t\t\t\n      PUSH E8\t\t\t\n      SHL \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      PUSH 1A\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 746F6B656E2073796D626F6C20646964206E6F74206D61746368000000000000\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 216\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 85\t\t\t\n      JUMPI \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 247\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 21\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    .data\n"
}